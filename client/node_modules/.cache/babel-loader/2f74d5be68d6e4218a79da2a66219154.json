{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport { firestore } from '../../firebase/utils';\nimport convertCollectionsToMap from '../../firebase/convertCollectionsToMap';\nimport directoryTypes from './types';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './actions';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(directoryTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/nick.bansal/Desktop/dev/ecommerce-site/src/redux/directory/sagas.js"],"names":["takeLatest","call","put","firestore","convertCollectionsToMap","directoryTypes","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AAEA,OAAOC,cAAP,MAA2B,SAA3B;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,WAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACxC,MAAI;AACH,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,uBAAD,EAA0BO,QAA1B,CAAjC;AACA,UAAMT,GAAG,CAACI,uBAAuB,CAACO,cAAD,CAAxB,CAAT;AACA,GALD,CAKE,OAAOC,KAAP,EAAc;AACf,UAAMZ,GAAG,CAACK,uBAAuB,CAACO,KAAD,CAAxB,CAAT;AACA;AACD;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACxC,QAAMf,UAAU,CACfK,cAAc,CAACW,uBADA,EAEfR,qBAFe,CAAhB;AAIA","sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\nimport { firestore } from '../../firebase/utils';\nimport convertCollectionsToMap from '../../firebase/convertCollectionsToMap';\n\nimport directoryTypes from './types';\n\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './actions';\n\nexport function* fetchCollectionsAsync() {\n\ttry {\n\t\tconst collectionRef = firestore.collection('collections');\n\t\tconst snapshot = yield collectionRef.get();\n\t\tconst collectionsMap = yield call(convertCollectionsToMap, snapshot);\n\t\tyield put(fetchCollectionsSuccess(collectionsMap));\n\t} catch (error) {\n\t\tyield put(fetchCollectionsFailure(error));\n\t}\n}\n\nexport function* fetchCollectionsStart() {\n\tyield takeLatest(\n\t\tdirectoryTypes.FETCH_COLLECTIONS_START,\n\t\tfetchCollectionsAsync\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}