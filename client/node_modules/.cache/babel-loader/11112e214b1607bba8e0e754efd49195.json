{"ast":null,"code":"var _jsxFileName = \"/Users/nick.bansal/Desktop/dev/ecommerce-site/src/pages/Shop/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { fetchCollectionsStartAsync } from '../../redux/directory/actions';\nimport { selectIsCollectionFetching } from '../../redux/directory/selectors';\nimport Overview from './Overview';\nimport Collection from './Collection';\nimport WithSpinner from '../../components/WithSpinner';\nconst OverViewLoading = WithSpinner(Overview);\nconst CollectionLoading = WithSpinner(Collection);\n\nconst ShopPage = ({\n  match,\n  isCollectionFetching,\n  fetchCollections\n}) => {\n  useEffect(() => {\n    fetchCollections(); // const collectionRef = firestore.collection('collections');\n    // |---------- SUBSCRIBES TO LIVE COLLECTION DATA ----------|\n    // unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    // \tconst dataCollection = convertCollectionsToMap(snapshot);\n    // \tdispatch(setCurrentData(dataCollection));\n    // \tsetLoading(false);\n    // });\n    // |----------------- NEED TO UNSUBSCRIBE ------------------|\n    // collectionRef.get().then(snapshot => {\n    // \tconst dataCollection = convertCollectionsToMap(snapshot);\n    // \tdispatch(setCurrentData(dataCollection));\n    // \tsetLoading(false);\n    // });\n    // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    render: props => /*#__PURE__*/React.createElement(OverViewLoading, Object.assign({\n      isLoading: isCollectionFetching\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 6\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    render: props => /*#__PURE__*/React.createElement(CollectionLoading, Object.assign({\n      isLoading: isCollectionFetching\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 6\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }\n  }));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollections: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/nick.bansal/Desktop/dev/ecommerce-site/src/pages/Shop/index.js"],"names":["React","useEffect","useState","Switch","Route","connect","createStructuredSelector","fetchCollectionsStartAsync","selectIsCollectionFetching","Overview","Collection","WithSpinner","OverViewLoading","CollectionLoading","ShopPage","match","isCollectionFetching","fetchCollections","path","props","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,MAAMC,eAAe,GAAGD,WAAW,CAACF,QAAD,CAAnC;AACA,MAAMI,iBAAiB,GAAGF,WAAW,CAACD,UAAD,CAArC;;AAEA,MAAMI,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,oBAAT;AAA+BC,EAAAA;AAA/B,CAAD,KAAuD;AACvEhB,EAAAA,SAAS,CAAC,MAAM;AACfgB,IAAAA,gBAAgB,GADD,CAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,KAAD;AACC,IAAA,KAAK,MADN;AAEC,IAAA,IAAI,EAAG,GAAEF,KAAK,CAACG,IAAK,EAFrB;AAGC,IAAA,MAAM,EAAEC,KAAK,iBACZ,oBAAC,eAAD;AACC,MAAA,SAAS,EAAEH;AADZ,OAEKG,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAWC,oBAAC,KAAD;AACC,IAAA,IAAI,EAAG,GAAEJ,KAAK,CAACG,IAAK,gBADrB;AAEC,IAAA,MAAM,EAAEC,KAAK,iBACZ,oBAAC,iBAAD;AACC,MAAA,SAAS,EAAEH;AADZ,OAEKG,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXD,CADD;AAuBA,CA1CD;;AA4CA,MAAMC,eAAe,GAAGd,wBAAwB,CAAC;AAChDU,EAAAA,oBAAoB,EAAER;AAD0B,CAAD,CAAhD;;AAIA,MAAMa,kBAAkB,GAAGC,QAAQ,KAAK;AACvCL,EAAAA,gBAAgB,EAAE,MAAMK,QAAQ,CAACf,0BAA0B,EAA3B;AADO,CAAL,CAAnC;;AAIA,eAAeF,OAAO,CAACe,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CP,QAA7C,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { fetchCollectionsStartAsync } from '../../redux/directory/actions';\nimport { selectIsCollectionFetching } from '../../redux/directory/selectors';\n\nimport Overview from './Overview';\nimport Collection from './Collection';\nimport WithSpinner from '../../components/WithSpinner';\n\nconst OverViewLoading = WithSpinner(Overview);\nconst CollectionLoading = WithSpinner(Collection);\n\nconst ShopPage = ({ match, isCollectionFetching, fetchCollections }) => {\n\tuseEffect(() => {\n\t\tfetchCollections();\n\t\t// const collectionRef = firestore.collection('collections');\n\t\t// |---------- SUBSCRIBES TO LIVE COLLECTION DATA ----------|\n\t\t// unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n\t\t// \tconst dataCollection = convertCollectionsToMap(snapshot);\n\t\t// \tdispatch(setCurrentData(dataCollection));\n\t\t// \tsetLoading(false);\n\t\t// });\n\t\t// |----------------- NEED TO UNSUBSCRIBE ------------------|\n\t\t// collectionRef.get().then(snapshot => {\n\t\t// \tconst dataCollection = convertCollectionsToMap(snapshot);\n\t\t// \tdispatch(setCurrentData(dataCollection));\n\t\t// \tsetLoading(false);\n\t\t// });\n\t\t// eslint-disable-next-line\n\t}, []);\n\n\treturn (\n\t\t<Switch>\n\t\t\t<Route\n\t\t\t\texact\n\t\t\t\tpath={`${match.path}`}\n\t\t\t\trender={props => (\n\t\t\t\t\t<OverViewLoading\n\t\t\t\t\t\tisLoading={isCollectionFetching}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t/>\n\t\t\t<Route\n\t\t\t\tpath={`${match.path}/:collectionId`}\n\t\t\t\trender={props => (\n\t\t\t\t\t<CollectionLoading\n\t\t\t\t\t\tisLoading={isCollectionFetching}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t/>\n\t\t</Switch>\n\t);\n};\n\nconst mapStateToProps = createStructuredSelector({\n\tisCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n\tfetchCollections: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}