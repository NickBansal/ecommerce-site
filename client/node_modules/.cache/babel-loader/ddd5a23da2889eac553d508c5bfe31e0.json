{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore } from '../../firebase/utils';\nimport convertCollectionsToMap from '../../firebase/convertCollectionsToMap';\nimport directoryTypes from './types';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './actions';\nexport function* fetchCollectionsAsync() {\n  console.log('I am fired');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error));\n  } // collectionRef\n  // \t.get()\n  // \t.then(snapshot => {\n  // \t\tconst collectionsMap = convertCollectionsToMap(snapshot);\n  // \t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n  // \t})\n  // \t.catch(error => {\n  // \t\tdispatch(fetchCollectionsFailure(error));\n  // \t});\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(directoryTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/nick.bansal/Desktop/dev/ecommerce-site/src/redux/directory/sagas.js"],"names":["takeEvery","call","put","firestore","convertCollectionsToMap","directoryTypes","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AAEA,OAAOC,cAAP,MAA2B,SAA3B;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,WAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AAEA,MAAI;AACH,UAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACG,uBAAD,EAA0BS,QAA1B,CAAjC;AACA,UAAMX,GAAG,CAACI,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACA,GALD,CAKE,OAAOC,KAAP,EAAc;AACf,UAAMd,GAAG,CAACK,uBAAuB,CAACS,KAAD,CAAxB,CAAT;AACA,GAVuC,CAYxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACxC,QAAMjB,SAAS,CACdK,cAAc,CAACa,uBADD,EAEdV,qBAFc,CAAf;AAIA","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore } from '../../firebase/utils';\nimport convertCollectionsToMap from '../../firebase/convertCollectionsToMap';\n\nimport directoryTypes from './types';\n\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './actions';\n\nexport function* fetchCollectionsAsync() {\n\tconsole.log('I am fired');\n\n\ttry {\n\t\tconst collectionRef = firestore.collection('collections');\n\t\tconst snapshot = yield collectionRef.get();\n\t\tconst collectionsMap = yield call(convertCollectionsToMap, snapshot);\n\t\tyield put(fetchCollectionsSuccess(collectionsMap));\n\t} catch (error) {\n\t\tyield put(fetchCollectionsFailure(error));\n\t}\n\n\t// collectionRef\n\t// \t.get()\n\t// \t.then(snapshot => {\n\t// \t\tconst collectionsMap = convertCollectionsToMap(snapshot);\n\t// \t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n\t// \t})\n\t// \t.catch(error => {\n\t// \t\tdispatch(fetchCollectionsFailure(error));\n\t// \t});\n}\n\nexport function* fetchCollectionsStart() {\n\tyield takeEvery(\n\t\tdirectoryTypes.FETCH_COLLECTIONS_START,\n\t\tfetchCollectionsAsync\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}