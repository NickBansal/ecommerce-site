{"ast":null,"code":"var _jsxFileName = \"/Users/nick.bansal/Desktop/dev/ecommerce-site/src/pages/Shop/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { fetchCollectionsStartAsync } from '../../redux/directory/actions';\nimport { selectIsCollectionFetching } from '../../redux/directory/selectors';\nimport Overview from './Overview';\nimport Collection from './Collection';\nimport WithSpinner from '../../components/WithSpinner';\nconst OverViewLoading = WithSpinner(Overview);\nconst CollectionLoading = WithSpinner(Collection);\n\nconst ShopPage = ({\n  match,\n  fetchCollections,\n  isFetching\n}) => {\n  useEffect(() => {\n    fetchCollections();\n    console.log(isFetching); // |------------- SUBSCRIBE TO LIVE DATA -------------|\n    // let unsubscribeFromSnapshot = null;\n    // const collectionRef = firestore.collection('collections');\n    // unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    // \tconst dataCollection = convertCollectionsToMap(snapshot);\n    // \tdispatch(setCurrentData(dataCollection));\n    // \tsetLoading(false);\n    // });\n    // return () => unsubscribeFromSnapshot();\n    // |------------ UNSUBSCRIBE TO LIVE DATA ------------|\n  }, []);\n  return /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    render: props => /*#__PURE__*/React.createElement(OverViewLoading, Object.assign({\n      isLoading: isFetching\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 6\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    render: props => /*#__PURE__*/React.createElement(CollectionLoading, Object.assign({\n      isLoading: isFetching\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 6\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }\n  }));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollections: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/nick.bansal/Desktop/dev/ecommerce-site/src/pages/Shop/index.js"],"names":["React","useEffect","useState","Switch","Route","connect","createStructuredSelector","fetchCollectionsStartAsync","selectIsCollectionFetching","Overview","Collection","WithSpinner","OverViewLoading","CollectionLoading","ShopPage","match","fetchCollections","isFetching","console","log","path","props","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,MAAMC,eAAe,GAAGD,WAAW,CAACF,QAAD,CAAnC;AACA,MAAMI,iBAAiB,GAAGF,WAAW,CAACD,UAAD,CAArC;;AAEA,MAAMI,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,gBAAT;AAA2BC,EAAAA;AAA3B,CAAD,KAA6C;AAC7DhB,EAAAA,SAAS,CAAC,MAAM;AACfe,IAAAA,gBAAgB;AAChBE,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ,EAFe,CAIf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAdQ,EAcN,EAdM,CAAT;AAgBA,sBACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,KAAD;AACC,IAAA,KAAK,MADN;AAEC,IAAA,IAAI,EAAG,GAAEF,KAAK,CAACK,IAAK,EAFrB;AAGC,IAAA,MAAM,EAAEC,KAAK,iBACZ,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAEJ;AAA5B,OAA4CI,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAQC,oBAAC,KAAD;AACC,IAAA,IAAI,EAAG,GAAEN,KAAK,CAACK,IAAK,gBADrB;AAEC,IAAA,MAAM,EAAEC,KAAK,iBACZ,oBAAC,iBAAD;AAAmB,MAAA,SAAS,EAAEJ;AAA9B,OAA8CI,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARD,CADD;AAiBA,CAlCD;;AAoCA,MAAMC,eAAe,GAAGhB,wBAAwB,CAAC;AAChDW,EAAAA,UAAU,EAAET;AADoC,CAAD,CAAhD;;AAIA,MAAMe,kBAAkB,GAAGC,QAAQ,KAAK;AACvCR,EAAAA,gBAAgB,EAAE,MAAMQ,QAAQ,CAACjB,0BAA0B,EAA3B;AADO,CAAL,CAAnC;;AAIA,eAAeF,OAAO,CAACiB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,QAA7C,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { fetchCollectionsStartAsync } from '../../redux/directory/actions';\nimport { selectIsCollectionFetching } from '../../redux/directory/selectors';\n\nimport Overview from './Overview';\nimport Collection from './Collection';\nimport WithSpinner from '../../components/WithSpinner';\n\nconst OverViewLoading = WithSpinner(Overview);\nconst CollectionLoading = WithSpinner(Collection);\n\nconst ShopPage = ({ match, fetchCollections, isFetching }) => {\n\tuseEffect(() => {\n\t\tfetchCollections();\n\t\tconsole.log(isFetching);\n\n\t\t// |------------- SUBSCRIBE TO LIVE DATA -------------|\n\t\t// let unsubscribeFromSnapshot = null;\n\t\t// const collectionRef = firestore.collection('collections');\n\t\t// unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n\t\t// \tconst dataCollection = convertCollectionsToMap(snapshot);\n\t\t// \tdispatch(setCurrentData(dataCollection));\n\t\t// \tsetLoading(false);\n\t\t// });\n\t\t// return () => unsubscribeFromSnapshot();\n\t\t// |------------ UNSUBSCRIBE TO LIVE DATA ------------|\n\t}, []);\n\n\treturn (\n\t\t<Switch>\n\t\t\t<Route\n\t\t\t\texact\n\t\t\t\tpath={`${match.path}`}\n\t\t\t\trender={props => (\n\t\t\t\t\t<OverViewLoading isLoading={isFetching} {...props} />\n\t\t\t\t)}\n\t\t\t/>\n\t\t\t<Route\n\t\t\t\tpath={`${match.path}/:collectionId`}\n\t\t\t\trender={props => (\n\t\t\t\t\t<CollectionLoading isLoading={isFetching} {...props} />\n\t\t\t\t)}\n\t\t\t/>\n\t\t</Switch>\n\t);\n};\n\nconst mapStateToProps = createStructuredSelector({\n\tisFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n\tfetchCollections: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}