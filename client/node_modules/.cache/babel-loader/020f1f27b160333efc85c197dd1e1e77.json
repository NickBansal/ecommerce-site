{"ast":null,"code":"var _jsxFileName = \"/Users/nick.bansal/Desktop/dev/ecommerce-site/src/pages/Shop/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { firestore } from '../../firebase/utils';\nimport convertCollectionsToMap from '../../firebase/convertCollectionsToMap';\nimport { setCurrentData, fetchCollectionsStartAsync } from '../../redux/directory/actions';\nimport { selectIsCollectionFetching } from '../../redux/directory/selectors';\nimport Overview from './Overview';\nimport Collection from './Collection';\nimport WithSpinner from '../../components/WithSpinner';\nconst OverViewLoading = WithSpinner(Overview);\nconst CollectionLoading = WithSpinner(Collection);\n\nconst ShopPage = ({\n  match,\n  dispatch\n}) => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const collectionRef = firestore.collection('collections'); // |------------- SUBSCRIBE TO LIVE DATA -------------|\n    // let unsubscribeFromSnapshot = null;\n    // unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    // \tconst dataCollection = convertCollectionsToMap(snapshot);\n    // \tdispatch(setCurrentData(dataCollection));\n    // \tsetLoading(false);\n    // });\n    // return () => unsubscribeFromSnapshot();\n    // |------------ UNSUBSCRIBE TO LIVE DATA ------------|\n\n    collectionRef.get().then(snapshot => {\n      const dataCollection = convertCollectionsToMap(snapshot);\n      dispatch(setCurrentData(dataCollection));\n      setLoading(false);\n    }); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    render: props => /*#__PURE__*/React.createElement(OverViewLoading, Object.assign({\n      isLoading: loading\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 6\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    render: props => /*#__PURE__*/React.createElement(CollectionLoading, Object.assign({\n      isLoading: loading\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 6\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }\n  }));\n};\n\nconst mapStateToProps = createSelectorCreator({\n  isFetching: selectIsCollectionFetching\n});\nexport default connect()(ShopPage);","map":{"version":3,"sources":["/Users/nick.bansal/Desktop/dev/ecommerce-site/src/pages/Shop/index.js"],"names":["React","useEffect","useState","Switch","Route","connect","createStructuredSelector","firestore","convertCollectionsToMap","setCurrentData","fetchCollectionsStartAsync","selectIsCollectionFetching","Overview","Collection","WithSpinner","OverViewLoading","CollectionLoading","ShopPage","match","dispatch","loading","setLoading","collectionRef","collection","get","then","snapshot","dataCollection","path","props","mapStateToProps","createSelectorCreator","isFetching"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AAEA,SACCC,cADD,EAECC,0BAFD,QAGO,+BAHP;AAIA,SAASC,0BAAT,QAA2C,iCAA3C;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,MAAMC,eAAe,GAAGD,WAAW,CAACF,QAAD,CAAnC;AACA,MAAMI,iBAAiB,GAAGF,WAAW,CAACD,UAAD,CAArC;;AAEA,MAAMI,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB;AACzC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMqB,aAAa,GAAGf,SAAS,CAACgB,UAAV,CAAqB,aAArB,CAAtB,CADe,CAGf;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACpC,YAAMC,cAAc,GAAGnB,uBAAuB,CAACkB,QAAD,CAA9C;AACAP,MAAAA,QAAQ,CAACV,cAAc,CAACkB,cAAD,CAAf,CAAR;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,KAJD,EAhBe,CAsBf;AACA,GAvBQ,EAuBN,EAvBM,CAAT;AAyBA,sBACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,KAAD;AACC,IAAA,KAAK,MADN;AAEC,IAAA,IAAI,EAAG,GAAEH,KAAK,CAACU,IAAK,EAFrB;AAGC,IAAA,MAAM,EAAEC,KAAK,iBACZ,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAET;AAA5B,OAAyCS,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAQC,oBAAC,KAAD;AACC,IAAA,IAAI,EAAG,GAAEX,KAAK,CAACU,IAAK,gBADrB;AAEC,IAAA,MAAM,EAAEC,KAAK,iBACZ,oBAAC,iBAAD;AAAmB,MAAA,SAAS,EAAET;AAA9B,OAA2CS,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARD,CADD;AAiBA,CA7CD;;AA+CA,MAAMC,eAAe,GAAGC,qBAAqB,CAAC;AAC7CC,EAAAA,UAAU,EAAErB;AADiC,CAAD,CAA7C;AAIA,eAAeN,OAAO,GAAGY,QAAH,CAAtB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { firestore } from '../../firebase/utils';\nimport convertCollectionsToMap from '../../firebase/convertCollectionsToMap';\n\nimport {\n\tsetCurrentData,\n\tfetchCollectionsStartAsync\n} from '../../redux/directory/actions';\nimport { selectIsCollectionFetching } from '../../redux/directory/selectors';\n\nimport Overview from './Overview';\nimport Collection from './Collection';\nimport WithSpinner from '../../components/WithSpinner';\n\nconst OverViewLoading = WithSpinner(Overview);\nconst CollectionLoading = WithSpinner(Collection);\n\nconst ShopPage = ({ match, dispatch }) => {\n\tconst [loading, setLoading] = useState(true);\n\n\tuseEffect(() => {\n\t\tconst collectionRef = firestore.collection('collections');\n\n\t\t// |------------- SUBSCRIBE TO LIVE DATA -------------|\n\n\t\t// let unsubscribeFromSnapshot = null;\n\t\t// unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n\t\t// \tconst dataCollection = convertCollectionsToMap(snapshot);\n\t\t// \tdispatch(setCurrentData(dataCollection));\n\t\t// \tsetLoading(false);\n\t\t// });\n\n\t\t// return () => unsubscribeFromSnapshot();\n\n\t\t// |------------ UNSUBSCRIBE TO LIVE DATA ------------|\n\n\t\tcollectionRef.get().then(snapshot => {\n\t\t\tconst dataCollection = convertCollectionsToMap(snapshot);\n\t\t\tdispatch(setCurrentData(dataCollection));\n\t\t\tsetLoading(false);\n\t\t});\n\n\t\t// eslint-disable-next-line\n\t}, []);\n\n\treturn (\n\t\t<Switch>\n\t\t\t<Route\n\t\t\t\texact\n\t\t\t\tpath={`${match.path}`}\n\t\t\t\trender={props => (\n\t\t\t\t\t<OverViewLoading isLoading={loading} {...props} />\n\t\t\t\t)}\n\t\t\t/>\n\t\t\t<Route\n\t\t\t\tpath={`${match.path}/:collectionId`}\n\t\t\t\trender={props => (\n\t\t\t\t\t<CollectionLoading isLoading={loading} {...props} />\n\t\t\t\t)}\n\t\t\t/>\n\t\t</Switch>\n\t);\n};\n\nconst mapStateToProps = createSelectorCreator({\n\tisFetching: selectIsCollectionFetching\n});\n\nexport default connect()(ShopPage);\n"]},"metadata":{},"sourceType":"module"}