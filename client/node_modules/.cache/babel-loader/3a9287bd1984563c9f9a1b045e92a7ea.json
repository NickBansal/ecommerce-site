{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { firestore } from '../../firebase/utils';\nimport convertCollectionsToMap from '../../firebase/convertCollectionsToMap';\nimport directoryTypes from './types';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './actions';\nexport function* fetchCollectionsAsync() {\n  console.log('I am fired');\n  const collectionRef = firestore.collection('collections');\n  const snapshot = yield collectionRef.get(); // collectionRef\n  // \t.get()\n  // \t.then(snapshot => {\n  // \t\tconst collectionsMap = convertCollectionsToMap(snapshot);\n  // \t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n  // \t})\n  // \t.catch(error => {\n  // \t\tdispatch(fetchCollectionsFailure(error));\n  // \t});\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(directoryTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/nick.bansal/Desktop/dev/ecommerce-site/src/redux/directory/sagas.js"],"names":["takeEvery","firestore","convertCollectionsToMap","directoryTypes","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AAEA,OAAOC,cAAP,MAA2B,SAA3B;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,WAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,QAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AAEA,QAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CALwC,CAOxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACxC,QAAMb,SAAS,CACdG,cAAc,CAACW,uBADD,EAEdR,qBAFc,CAAf;AAIA","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\nimport { firestore } from '../../firebase/utils';\nimport convertCollectionsToMap from '../../firebase/convertCollectionsToMap';\n\nimport directoryTypes from './types';\n\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './actions';\n\nexport function* fetchCollectionsAsync() {\n\tconsole.log('I am fired');\n\n\tconst collectionRef = firestore.collection('collections');\n\n\tconst snapshot = yield collectionRef.get();\n\n\t// collectionRef\n\t// \t.get()\n\t// \t.then(snapshot => {\n\t// \t\tconst collectionsMap = convertCollectionsToMap(snapshot);\n\t// \t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n\t// \t})\n\t// \t.catch(error => {\n\t// \t\tdispatch(fetchCollectionsFailure(error));\n\t// \t});\n}\n\nexport function* fetchCollectionsStart() {\n\tyield takeEvery(\n\t\tdirectoryTypes.FETCH_COLLECTIONS_START,\n\t\tfetchCollectionsAsync\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}