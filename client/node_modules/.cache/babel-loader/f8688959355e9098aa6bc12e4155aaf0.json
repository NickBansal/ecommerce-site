{"ast":null,"code":"!function (t, e) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? e(exports) : \"function\" == typeof define && define.amd ? define([\"exports\"], e) : e(((t = t || self).prettierPlugins = t.prettierPlugins || {}, t.prettierPlugins.babylon = {}));\n}(this, function (t) {\n  \"use strict\";\n\n  var e = function (t, e) {\n    var s = new SyntaxError(t + \" (\" + e.start.line + \":\" + e.start.column + \")\");\n    return s.loc = e, s;\n  };\n\n  function s(t) {\n    return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, \"default\") ? t.default : t;\n  }\n\n  function i(t, e) {\n    return t(e = {\n      exports: {}\n    }, e.exports), e.exports;\n  }\n\n  var a,\n      r = Object.freeze({\n    __proto__: null,\n    default: {\n      EOL: \"\\n\"\n    }\n  }),\n      n = i(function (t) {\n    t.exports = function (t) {\n      if (\"string\" != typeof t) throw new TypeError(\"Expected a string\");\n      var e = t.match(/(?:\\r?\\n)/g) || [];\n      if (0 === e.length) return null;\n      var s = e.filter(function (t) {\n        return \"\\r\\n\" === t;\n      }).length;\n      return s > e.length - s ? \"\\r\\n\" : \"\\n\";\n    }, t.exports.graceful = function (e) {\n      return t.exports(e) || \"\\n\";\n    };\n  }),\n      o = (n.graceful, (a = r) && a.default || a),\n      h = i(function (t, e) {\n    function s() {\n      var t = o;\n      return s = function () {\n        return t;\n      }, t;\n    }\n\n    function i() {\n      var t,\n          e = (t = n) && t.__esModule ? t : {\n        default: t\n      };\n      return i = function () {\n        return e;\n      }, e;\n    }\n\n    Object.defineProperty(e, \"__esModule\", {\n      value: !0\n    }), e.extract = function (t) {\n      var e = t.match(h);\n      return e ? e[0].trimLeft() : \"\";\n    }, e.strip = function (t) {\n      var e = t.match(h);\n      return e && e[0] ? t.substring(e[0].length) : t;\n    }, e.parse = function (t) {\n      return f(t).pragmas;\n    }, e.parseWithComments = f, e.print = function (t) {\n      var e = t.comments,\n          a = void 0 === e ? \"\" : e,\n          r = t.pragmas,\n          n = void 0 === r ? {} : r,\n          o = (0, i().default)(a) || s().EOL,\n          h = Object.keys(n),\n          u = h.map(function (t) {\n        return m(t, n[t]);\n      }).reduce(function (t, e) {\n        return t.concat(e);\n      }, []).map(function (t) {\n        return \" * \" + t + o;\n      }).join(\"\");\n\n      if (!a) {\n        if (0 === h.length) return \"\";\n\n        if (1 === h.length && !Array.isArray(n[h[0]])) {\n          var l = n[h[0]];\n          return \"\".concat(\"/**\", \" \").concat(m(h[0], l)[0]).concat(\" */\");\n        }\n      }\n\n      var c = a.split(o).map(function (t) {\n        return \"\".concat(\" *\", \" \").concat(t);\n      }).join(o) + o;\n      return \"/**\" + o + (a ? c : \"\") + (a && h.length ? \" *\" + o : \"\") + u + \" */\";\n    };\n    var a = /\\*\\/$/,\n        r = /^\\/\\*\\*/,\n        h = /^\\s*(\\/\\*\\*?(.|\\r?\\n)*?\\*\\/)/,\n        u = /(^|\\s+)\\/\\/([^\\r\\n]*)/g,\n        l = /^(\\r?\\n)+/,\n        c = /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *(?![^@\\r\\n]*\\/\\/[^]*)([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g,\n        p = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g,\n        d = /(\\r?\\n|^) *\\* ?/g;\n\n    function f(t) {\n      var e = (0, i().default)(t) || s().EOL;\n      t = t.replace(r, \"\").replace(a, \"\").replace(d, \"$1\");\n\n      for (var n = \"\"; n !== t;) n = t, t = t.replace(c, \"\".concat(e, \"$1 $2\").concat(e));\n\n      t = t.replace(l, \"\").trimRight();\n\n      for (var o, h = Object.create(null), f = t.replace(p, \"\").replace(l, \"\").trimRight(); o = p.exec(t);) {\n        var m = o[2].replace(u, \"\");\n        \"string\" == typeof h[o[1]] || Array.isArray(h[o[1]]) ? h[o[1]] = [].concat(h[o[1]], m) : h[o[1]] = m;\n      }\n\n      return {\n        comments: f,\n        pragmas: h\n      };\n    }\n\n    function m(t, e) {\n      return [].concat(e).map(function (e) {\n        return \"@\".concat(t, \" \").concat(e).trim();\n      });\n    }\n  });\n  s(h);\n  h.extract, h.strip, h.parse, h.parseWithComments, h.print;\n\n  var u = function (t) {\n    var e = Object.keys(h.parse(h.extract(t)));\n    return -1 !== e.indexOf(\"prettier\") || -1 !== e.indexOf(\"format\");\n  },\n      l = function (t) {\n    return t.length > 0 ? t[t.length - 1] : null;\n  };\n\n  var c = {\n    locStart: function t(e, s) {\n      return !(s = s || {}).ignoreDecorators && e.declaration && e.declaration.decorators && e.declaration.decorators.length > 0 ? t(e.declaration.decorators[0]) : !s.ignoreDecorators && e.decorators && e.decorators.length > 0 ? t(e.decorators[0]) : e.__location ? e.__location.startOffset : e.range ? e.range[0] : \"number\" == typeof e.start ? e.start : e.loc ? e.loc.start : null;\n    },\n    locEnd: function t(e) {\n      var s = e.nodes && l(e.nodes);\n      if (s && e.source && !e.source.end && (e = s), e.__location) return e.__location.endOffset;\n      var i = e.range ? e.range[1] : \"number\" == typeof e.end ? e.end : null;\n      return e.typeAnnotation ? Math.max(i, t(e.typeAnnotation)) : e.loc && !i ? e.loc.end : i;\n    }\n  };\n\n  function p(t) {\n    return (p = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {\n      return typeof t;\n    } : function (t) {\n      return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n    })(t);\n  }\n\n  function d(t, e) {\n    if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function f(t, e) {\n    for (var s = 0; s < e.length; s++) {\n      var i = e[s];\n      i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n    }\n  }\n\n  function m(t, e, s) {\n    return e && f(t.prototype, e), s && f(t, s), t;\n  }\n\n  function y(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), e && v(t, e);\n  }\n\n  function D(t) {\n    return (D = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    })(t);\n  }\n\n  function v(t, e) {\n    return (v = Object.setPrototypeOf || function (t, e) {\n      return t.__proto__ = e, t;\n    })(t, e);\n  }\n\n  function x(t) {\n    if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return t;\n  }\n\n  function g(t, e) {\n    return !e || \"object\" != typeof e && \"function\" != typeof e ? x(t) : e;\n  }\n\n  function k(t, e, s) {\n    return (k = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get : function (t, e, s) {\n      var i = function (t, e) {\n        for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = D(t)););\n\n        return t;\n      }(t, e);\n\n      if (i) {\n        var a = Object.getOwnPropertyDescriptor(i, e);\n        return a.get ? a.get.call(s) : a.value;\n      }\n    })(t, e, s || t);\n  }\n\n  function P(t, e) {\n    return function (t) {\n      if (Array.isArray(t)) return t;\n    }(t) || function (t, e) {\n      if (!(Symbol.iterator in Object(t) || \"[object Arguments]\" === Object.prototype.toString.call(t))) return;\n      var s = [],\n          i = !0,\n          a = !1,\n          r = void 0;\n\n      try {\n        for (var n, o = t[Symbol.iterator](); !(i = (n = o.next()).done) && (s.push(n.value), !e || s.length !== e); i = !0);\n      } catch (t) {\n        a = !0, r = t;\n      } finally {\n        try {\n          i || null == o.return || o.return();\n        } finally {\n          if (a) throw r;\n        }\n      }\n\n      return s;\n    }(t, e) || function () {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }();\n  }\n\n  function b(t) {\n    return function (t) {\n      if (Array.isArray(t)) {\n        for (var e = 0, s = new Array(t.length); e < t.length; e++) s[e] = t[e];\n\n        return s;\n      }\n    }(t) || function (t) {\n      if (Symbol.iterator in Object(t) || \"[object Arguments]\" === Object.prototype.toString.call(t)) return Array.from(t);\n    }(t) || function () {\n      throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n    }();\n  }\n\n  var E = function (t) {\n    return \"string\" == typeof t ? t.replace(function (t) {\n      t = Object.assign({\n        onlyFirst: !1\n      }, t);\n      var e = [\"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\", \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"].join(\"|\");\n      return new RegExp(e, t.onlyFirst ? void 0 : \"g\");\n    }(), \"\") : t;\n  },\n      C = E,\n      A = E;\n\n  C.default = A;\n\n  var w = function (t) {\n    return !Number.isNaN(t) && t >= 4352 && (t <= 4447 || 9001 === t || 9002 === t || 11904 <= t && t <= 12871 && 12351 !== t || 12880 <= t && t <= 19903 || 19968 <= t && t <= 42182 || 43360 <= t && t <= 43388 || 44032 <= t && t <= 55203 || 63744 <= t && t <= 64255 || 65040 <= t && t <= 65049 || 65072 <= t && t <= 65131 || 65281 <= t && t <= 65376 || 65504 <= t && t <= 65510 || 110592 <= t && t <= 110593 || 127488 <= t && t <= 127569 || 131072 <= t && t <= 262141);\n  },\n      T = w,\n      F = w;\n\n  T.default = F;\n\n  var N = function (t) {\n    if (\"string\" != typeof (t = t.replace(/\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g, \"  \")) || 0 === t.length) return 0;\n    t = C(t);\n\n    for (var e = 0, s = 0; s < t.length; s++) {\n      var i = t.codePointAt(s);\n      i <= 31 || i >= 127 && i <= 159 || i >= 768 && i <= 879 || (i > 65535 && s++, e += T(i) ? 2 : 1);\n    }\n\n    return e;\n  },\n      S = N,\n      I = N;\n\n  S.default = I;\n\n  var L = /[|\\\\{}()[\\]^$+*?.]/g,\n      B = function (t) {\n    if (\"string\" != typeof t) throw new TypeError(\"Expected a string\");\n    return t.replace(L, \"\\\\$&\");\n  },\n      O = /[^\\x20-\\x7F]/;\n\n  function M(t) {\n    if (t) switch (t.type) {\n      case \"ExportDefaultDeclaration\":\n      case \"ExportDefaultSpecifier\":\n      case \"DeclareExportDeclaration\":\n      case \"ExportNamedDeclaration\":\n      case \"ExportAllDeclaration\":\n        return !0;\n    }\n    return !1;\n  }\n\n  function R(t) {\n    return function (e, s, i) {\n      var a = i && i.backwards;\n      if (!1 === s) return !1;\n\n      for (var r = e.length, n = s; n >= 0 && n < r;) {\n        var o = e.charAt(n);\n\n        if (t instanceof RegExp) {\n          if (!t.test(o)) return n;\n        } else if (-1 === t.indexOf(o)) return n;\n\n        a ? n-- : n++;\n      }\n\n      return (-1 === n || n === r) && n;\n    };\n  }\n\n  var _ = R(/\\s/),\n      j = R(\" \\t\"),\n      q = R(\",; \\t\"),\n      U = R(/[^\\r\\n]/);\n\n  function V(t, e) {\n    if (!1 === e) return !1;\n    if (\"/\" === t.charAt(e) && \"*\" === t.charAt(e + 1)) for (var s = e + 2; s < t.length; ++s) if (\"*\" === t.charAt(s) && \"/\" === t.charAt(s + 1)) return s + 2;\n    return e;\n  }\n\n  function z(t, e) {\n    return !1 !== e && (\"/\" === t.charAt(e) && \"/\" === t.charAt(e + 1) ? U(t, e) : e);\n  }\n\n  function W(t, e, s) {\n    var i = s && s.backwards;\n    if (!1 === e) return !1;\n    var a = t.charAt(e);\n\n    if (i) {\n      if (\"\\r\" === t.charAt(e - 1) && \"\\n\" === a) return e - 2;\n      if (\"\\n\" === a || \"\\r\" === a || \"\\u2028\" === a || \"\\u2029\" === a) return e - 1;\n    } else {\n      if (\"\\r\" === a && \"\\n\" === t.charAt(e + 1)) return e + 2;\n      if (\"\\n\" === a || \"\\r\" === a || \"\\u2028\" === a || \"\\u2029\" === a) return e + 1;\n    }\n\n    return e;\n  }\n\n  function K(t, e, s) {\n    var i = j(t, (s = s || {}).backwards ? e - 1 : e, s);\n    return i !== W(t, i, s);\n  }\n\n  function X(t, e) {\n    for (var s = null, i = e; i !== s;) s = i, i = V(t, i = q(t, i)), i = j(t, i);\n\n    return !1 !== (i = W(t, i = z(t, i))) && K(t, i);\n  }\n\n  function J(t, e) {\n    for (var s = null, i = e; i !== s;) s = i, i = W(t, i = z(t, i = V(t, i = j(t, i))));\n\n    return i;\n  }\n\n  function H(t, e, s) {\n    return J(t, s(e));\n  }\n\n  var G = {};\n\n  function Q(t) {\n    return G[t];\n  }\n\n  [[\"|>\"], [\"??\"], [\"||\"], [\"&&\"], [\"|\"], [\"^\"], [\"&\"], [\"==\", \"===\", \"!=\", \"!==\"], [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"], [\">>\", \"<<\", \">>>\"], [\"+\", \"-\"], [\"*\", \"/\", \"%\"], [\"**\"]].forEach(function (t, e) {\n    t.forEach(function (t) {\n      G[t] = e;\n    });\n  });\n  var $ = {\n    \"==\": !0,\n    \"!=\": !0,\n    \"===\": !0,\n    \"!==\": !0\n  },\n      Y = {\n    \"*\": !0,\n    \"/\": !0,\n    \"%\": !0\n  },\n      Z = {\n    \">>\": !0,\n    \">>>\": !0,\n    \"<<\": !0\n  };\n\n  function tt(t, e, s) {\n    for (var i = 0, a = s = s || 0; a < t.length; ++a) \"\\t\" === t[a] ? i = i + e - i % e : i++;\n\n    return i;\n  }\n\n  function et(t, e) {\n    var s = t.slice(1, -1),\n        i = {\n      quote: '\"',\n      regex: /\"/g\n    },\n        a = {\n      quote: \"'\",\n      regex: /'/g\n    },\n        r = \"'\" === e ? a : i,\n        n = r === a ? i : a,\n        o = r.quote;\n    (s.includes(r.quote) || s.includes(n.quote)) && (o = (s.match(r.regex) || []).length > (s.match(n.regex) || []).length ? n.quote : r.quote);\n    return o;\n  }\n\n  function st(t, e, s) {\n    var i = '\"' === e ? \"'\" : '\"',\n        a = t.replace(/\\\\([\\s\\S])|(['\"])/g, function (t, a, r) {\n      return a === i ? a : r === e ? \"\\\\\" + r : r || (s && /^[^\\\\nrvtbfux\\r\\n\\u2028\\u2029\"'0-7]$/.test(a) ? a : \"\\\\\" + a);\n    });\n    return e + a + e;\n  }\n\n  function it(t) {\n    return t && t.comments && t.comments.length > 0 && t.comments.some(function (t) {\n      return \"prettier-ignore\" === t.value.trim();\n    });\n  }\n\n  function at(t, e) {\n    (t.comments || (t.comments = [])).push(e), e.printed = !1, \"JSXText\" === t.type && (e.printed = !0);\n  }\n\n  var rt = {\n    replaceEndOfLineWith: function (t, e) {\n      var s = [],\n          i = !0,\n          a = !1,\n          r = void 0;\n\n      try {\n        for (var n, o = t.split(\"\\n\")[Symbol.iterator](); !(i = (n = o.next()).done); i = !0) {\n          var h = n.value;\n          0 !== s.length && s.push(e), s.push(h);\n        }\n      } catch (t) {\n        a = !0, r = t;\n      } finally {\n        try {\n          i || null == o.return || o.return();\n        } finally {\n          if (a) throw r;\n        }\n      }\n\n      return s;\n    },\n    getStringWidth: function (t) {\n      return t ? O.test(t) ? S(t) : t.length : 0;\n    },\n    getMaxContinuousCount: function (t, e) {\n      var s = t.match(new RegExp(\"(\".concat(B(e), \")+\"), \"g\"));\n      return null === s ? 0 : s.reduce(function (t, s) {\n        return Math.max(t, s.length / e.length);\n      }, 0);\n    },\n    getMinNotPresentContinuousCount: function (t, e) {\n      var s = t.match(new RegExp(\"(\".concat(B(e), \")+\"), \"g\"));\n      if (null === s) return 0;\n      var i = new Map(),\n          a = 0,\n          r = !0,\n          n = !1,\n          o = void 0;\n\n      try {\n        for (var h, u = s[Symbol.iterator](); !(r = (h = u.next()).done); r = !0) {\n          var l = h.value.length / e.length;\n          i.set(l, !0), l > a && (a = l);\n        }\n      } catch (t) {\n        n = !0, o = t;\n      } finally {\n        try {\n          r || null == u.return || u.return();\n        } finally {\n          if (n) throw o;\n        }\n      }\n\n      for (var c = 1; c < a; c++) if (!i.get(c)) return c;\n\n      return a + 1;\n    },\n    getPrecedence: Q,\n    shouldFlatten: function (t, e) {\n      return Q(e) === Q(t) && \"**\" !== t && (!$[t] || !$[e]) && !(\"%\" === e && Y[t] || \"%\" === t && Y[e]) && (e === t || !Y[e] || !Y[t]) && (!Z[t] || !Z[e]);\n    },\n    isBitwiseOperator: function (t) {\n      return !!Z[t] || \"|\" === t || \"^\" === t || \"&\" === t;\n    },\n    isExportDeclaration: M,\n    getParentExportDeclaration: function (t) {\n      var e = t.getParentNode();\n      return \"declaration\" === t.getName() && M(e) ? e : null;\n    },\n    getPenultimate: function (t) {\n      return t.length > 1 ? t[t.length - 2] : null;\n    },\n    getLast: l,\n    getNextNonSpaceNonCommentCharacterIndexWithStartIndex: J,\n    getNextNonSpaceNonCommentCharacterIndex: H,\n    getNextNonSpaceNonCommentCharacter: function (t, e, s) {\n      return t.charAt(H(t, e, s));\n    },\n    skip: R,\n    skipWhitespace: _,\n    skipSpaces: j,\n    skipToLineEnd: q,\n    skipEverythingButNewLine: U,\n    skipInlineComment: V,\n    skipTrailingComment: z,\n    skipNewline: W,\n    isNextLineEmptyAfterIndex: X,\n    isNextLineEmpty: function (t, e, s) {\n      return X(t, s(e));\n    },\n    isPreviousLineEmpty: function (t, e, s) {\n      var i = s(e) - 1;\n      return i = W(t, i = j(t, i, {\n        backwards: !0\n      }), {\n        backwards: !0\n      }), (i = j(t, i, {\n        backwards: !0\n      })) !== W(t, i, {\n        backwards: !0\n      });\n    },\n    hasNewline: K,\n    hasNewlineInRange: function (t, e, s) {\n      for (var i = e; i < s; ++i) if (\"\\n\" === t.charAt(i)) return !0;\n\n      return !1;\n    },\n    hasSpaces: function (t, e, s) {\n      return j(t, (s = s || {}).backwards ? e - 1 : e, s) !== e;\n    },\n    setLocStart: function (t, e) {\n      t.range ? t.range[0] = e : t.start = e;\n    },\n    setLocEnd: function (t, e) {\n      t.range ? t.range[1] = e : t.end = e;\n    },\n    startsWithNoLookaheadToken: function t(e, s) {\n      switch ((e = function t(e) {\n        if (e.left) return t(e.left);\n        return e;\n      }(e)).type) {\n        case \"FunctionExpression\":\n        case \"ClassExpression\":\n        case \"DoExpression\":\n          return s;\n\n        case \"ObjectExpression\":\n          return !0;\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return t(e.object, s);\n\n        case \"TaggedTemplateExpression\":\n          return \"FunctionExpression\" !== e.tag.type && t(e.tag, s);\n\n        case \"CallExpression\":\n        case \"OptionalCallExpression\":\n          return \"FunctionExpression\" !== e.callee.type && t(e.callee, s);\n\n        case \"ConditionalExpression\":\n          return t(e.test, s);\n\n        case \"UpdateExpression\":\n          return !e.prefix && t(e.argument, s);\n\n        case \"BindExpression\":\n          return e.object && t(e.object, s);\n\n        case \"SequenceExpression\":\n          return t(e.expressions[0], s);\n\n        case \"TSAsExpression\":\n          return t(e.expression, s);\n\n        default:\n          return !1;\n      }\n    },\n    getAlignmentSize: tt,\n    getIndentSize: function (t, e) {\n      var s = t.lastIndexOf(\"\\n\");\n      return -1 === s ? 0 : tt(t.slice(s + 1).match(/^[ \\t]*/)[0], e);\n    },\n    getPreferredQuote: et,\n    printString: function (t, e, s) {\n      var i = t.slice(1, -1),\n          a = !i.includes('\"') && !i.includes(\"'\"),\n          r = \"json\" === e.parser ? '\"' : e.__isInHtmlAttribute ? \"'\" : et(t, e.singleQuote ? \"'\" : '\"');\n      return s ? a ? r + i + r : t : st(i, r, !(\"css\" === e.parser || \"less\" === e.parser || \"scss\" === e.parser || e.embeddedInHtml));\n    },\n    printNumber: function (t) {\n      return t.toLowerCase().replace(/^([+-]?[\\d.]+e)(?:\\+|(-))?0*(\\d)/, \"$1$2$3\").replace(/^([+-]?[\\d.]+)e[+-]?0+$/, \"$1\").replace(/^([+-])?\\./, \"$10.\").replace(/(\\.\\d+?)0+(?=e|$)/, \"$1\").replace(/\\.(?=e|$)/, \"\");\n    },\n    hasIgnoreComment: function (t) {\n      return it(t.getValue());\n    },\n    hasNodeIgnoreComment: it,\n    makeString: st,\n    matchAncestorTypes: function (t, e, s) {\n      for (s = s || 0, e = e.slice(); e.length;) {\n        var i = t.getParentNode(s),\n            a = e.shift();\n        if (!i || i.type !== a) return !1;\n        s++;\n      }\n\n      return !0;\n    },\n    addLeadingComment: function (t, e) {\n      e.leading = !0, e.trailing = !1, at(t, e);\n    },\n    addDanglingComment: function (t, e) {\n      e.leading = !1, e.trailing = !1, at(t, e);\n    },\n    addTrailingComment: function (t, e) {\n      e.leading = !1, e.trailing = !0, at(t, e);\n    },\n    isWithinParentArrayProperty: function (t, e) {\n      var s = t.getValue(),\n          i = t.getParentNode();\n      if (null == i) return !1;\n      if (!Array.isArray(i[e])) return !1;\n      var a = t.getName();\n      return i[e][a] === s;\n    }\n  }.getLast;\n\n  var nt = function (t, e) {\n    return function t(e, s, i, a) {\n      if (!e || \"object\" !== p(e)) return;\n\n      if (Array.isArray(e)) {\n        for (var r = 0; r < e.length; r++) t(e[r], s, e, r);\n\n        return;\n      }\n\n      if (\"string\" != typeof e.type) return;\n\n      for (var n = 0, o = Object.keys(e); n < o.length; n++) {\n        var h = o[n];\n        t(e[h], s, e, h);\n      }\n\n      var u = s(e);\n      u && (i[a] = u);\n    }(t, function (t) {\n      switch (t.type) {\n        case \"VariableDeclaration\":\n          var s = rt(t.declarations);\n          s && s.init && function (t, s) {\n            if (\";\" === e.originalText[(i = s, \"flow\" === e.parser ? i.range[1] : i.end)]) return;\n            var i;\n            \"flow\" === e.parser ? t.range = [t.range[0], s.range[1]] : t.end = s.end;\n            t.loc = Object.assign({}, t.loc, {\n              end: t.loc.end\n            });\n          }(t, s);\n          break;\n\n        case \"TSParenthesizedType\":\n          return t.typeAnnotation;\n\n        case \"TSUnionType\":\n        case \"TSIntersectionType\":\n          if (1 === t.types.length) return Object.assign({}, t.types[0], {\n            loc: t.loc,\n            range: t.range\n          });\n          break;\n\n        case \"EnumDeclaration\":\n          \"flow\" === e.parser && t.body.range[0] === t.range[0] && t.body.range[1] === t.range[1] && (t.body.range = [t.id.range[1], t.range[1] - 1]), \"babel-flow\" === e.parser && (t.body.start = t.id.end, t.body.end = t.end - 1);\n      }\n    }), t;\n  },\n      ot = i(function (t, e) {\n    Object.defineProperty(e, \"__esModule\", {\n      value: !0\n    });\n\n    var s = !0,\n        i = function t(e) {\n      var s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      d(this, t), this.label = e, this.keyword = s.keyword, this.beforeExpr = !!s.beforeExpr, this.startsExpr = !!s.startsExpr, this.rightAssociative = !!s.rightAssociative, this.isLoop = !!s.isLoop, this.isAssign = !!s.isAssign, this.prefix = !!s.prefix, this.postfix = !!s.postfix, this.binop = null != s.binop ? s.binop : null, this.updateContext = null;\n    },\n        a = new Map();\n\n    function r(t) {\n      var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      e.keyword = t;\n      var s = new i(t, e);\n      return a.set(t, s), s;\n    }\n\n    function n(t, e) {\n      return new i(t, {\n        beforeExpr: s,\n        binop: e\n      });\n    }\n\n    var o = {\n      num: new i(\"num\", {\n        startsExpr: !0\n      }),\n      bigint: new i(\"bigint\", {\n        startsExpr: !0\n      }),\n      regexp: new i(\"regexp\", {\n        startsExpr: !0\n      }),\n      string: new i(\"string\", {\n        startsExpr: !0\n      }),\n      name: new i(\"name\", {\n        startsExpr: !0\n      }),\n      eof: new i(\"eof\"),\n      bracketL: new i(\"[\", {\n        beforeExpr: s,\n        startsExpr: !0\n      }),\n      bracketR: new i(\"]\"),\n      braceL: new i(\"{\", {\n        beforeExpr: s,\n        startsExpr: !0\n      }),\n      braceBarL: new i(\"{|\", {\n        beforeExpr: s,\n        startsExpr: !0\n      }),\n      braceR: new i(\"}\"),\n      braceBarR: new i(\"|}\"),\n      parenL: new i(\"(\", {\n        beforeExpr: s,\n        startsExpr: !0\n      }),\n      parenR: new i(\")\"),\n      comma: new i(\",\", {\n        beforeExpr: s\n      }),\n      semi: new i(\";\", {\n        beforeExpr: s\n      }),\n      colon: new i(\":\", {\n        beforeExpr: s\n      }),\n      doubleColon: new i(\"::\", {\n        beforeExpr: s\n      }),\n      dot: new i(\".\"),\n      question: new i(\"?\", {\n        beforeExpr: s\n      }),\n      questionDot: new i(\"?.\"),\n      arrow: new i(\"=>\", {\n        beforeExpr: s\n      }),\n      template: new i(\"template\"),\n      ellipsis: new i(\"...\", {\n        beforeExpr: s\n      }),\n      backQuote: new i(\"`\", {\n        startsExpr: !0\n      }),\n      dollarBraceL: new i(\"${\", {\n        beforeExpr: s,\n        startsExpr: !0\n      }),\n      at: new i(\"@\"),\n      hash: new i(\"#\", {\n        startsExpr: !0\n      }),\n      interpreterDirective: new i(\"#!...\"),\n      eq: new i(\"=\", {\n        beforeExpr: s,\n        isAssign: !0\n      }),\n      assign: new i(\"_=\", {\n        beforeExpr: s,\n        isAssign: !0\n      }),\n      incDec: new i(\"++/--\", {\n        prefix: !0,\n        postfix: !0,\n        startsExpr: !0\n      }),\n      bang: new i(\"!\", {\n        beforeExpr: s,\n        prefix: !0,\n        startsExpr: !0\n      }),\n      tilde: new i(\"~\", {\n        beforeExpr: s,\n        prefix: !0,\n        startsExpr: !0\n      }),\n      pipeline: n(\"|>\", 0),\n      nullishCoalescing: n(\"??\", 1),\n      logicalOR: n(\"||\", 2),\n      logicalAND: n(\"&&\", 3),\n      bitwiseOR: n(\"|\", 4),\n      bitwiseXOR: n(\"^\", 5),\n      bitwiseAND: n(\"&\", 6),\n      equality: n(\"==/!=/===/!==\", 7),\n      relational: n(\"</>/<=/>=\", 8),\n      bitShift: n(\"<</>>/>>>\", 9),\n      plusMin: new i(\"+/-\", {\n        beforeExpr: s,\n        binop: 10,\n        prefix: !0,\n        startsExpr: !0\n      }),\n      modulo: new i(\"%\", {\n        beforeExpr: s,\n        binop: 11,\n        startsExpr: !0\n      }),\n      star: n(\"*\", 11),\n      slash: n(\"/\", 11),\n      exponent: new i(\"**\", {\n        beforeExpr: s,\n        binop: 12,\n        rightAssociative: !0\n      }),\n      _break: r(\"break\"),\n      _case: r(\"case\", {\n        beforeExpr: s\n      }),\n      _catch: r(\"catch\"),\n      _continue: r(\"continue\"),\n      _debugger: r(\"debugger\"),\n      _default: r(\"default\", {\n        beforeExpr: s\n      }),\n      _do: r(\"do\", {\n        isLoop: !0,\n        beforeExpr: s\n      }),\n      _else: r(\"else\", {\n        beforeExpr: s\n      }),\n      _finally: r(\"finally\"),\n      _for: r(\"for\", {\n        isLoop: !0\n      }),\n      _function: r(\"function\", {\n        startsExpr: !0\n      }),\n      _if: r(\"if\"),\n      _return: r(\"return\", {\n        beforeExpr: s\n      }),\n      _switch: r(\"switch\"),\n      _throw: r(\"throw\", {\n        beforeExpr: s,\n        prefix: !0,\n        startsExpr: !0\n      }),\n      _try: r(\"try\"),\n      _var: r(\"var\"),\n      _const: r(\"const\"),\n      _while: r(\"while\", {\n        isLoop: !0\n      }),\n      _with: r(\"with\"),\n      _new: r(\"new\", {\n        beforeExpr: s,\n        startsExpr: !0\n      }),\n      _this: r(\"this\", {\n        startsExpr: !0\n      }),\n      _super: r(\"super\", {\n        startsExpr: !0\n      }),\n      _class: r(\"class\", {\n        startsExpr: !0\n      }),\n      _extends: r(\"extends\", {\n        beforeExpr: s\n      }),\n      _export: r(\"export\"),\n      _import: r(\"import\", {\n        startsExpr: !0\n      }),\n      _null: r(\"null\", {\n        startsExpr: !0\n      }),\n      _true: r(\"true\", {\n        startsExpr: !0\n      }),\n      _false: r(\"false\", {\n        startsExpr: !0\n      }),\n      _in: r(\"in\", {\n        beforeExpr: s,\n        binop: 8\n      }),\n      _instanceof: r(\"instanceof\", {\n        beforeExpr: s,\n        binop: 8\n      }),\n      _typeof: r(\"typeof\", {\n        beforeExpr: s,\n        prefix: !0,\n        startsExpr: !0\n      }),\n      _void: r(\"void\", {\n        beforeExpr: s,\n        prefix: !0,\n        startsExpr: !0\n      }),\n      _delete: r(\"delete\", {\n        beforeExpr: s,\n        prefix: !0,\n        startsExpr: !0\n      })\n    },\n        h = 2,\n        u = 4,\n        l = 8,\n        c = 513 | h;\n\n    function p(t, e) {\n      return h | (t ? u : 0) | (e ? l : 0);\n    }\n\n    function f(t) {\n      return null != t && \"Property\" === t.type && \"init\" === t.kind && !1 === t.method;\n    }\n\n    var v = /\\r\\n?|[\\n\\u2028\\u2029]/,\n        E = new RegExp(v.source, \"g\");\n\n    function C(t) {\n      switch (t) {\n        case 10:\n        case 13:\n        case 8232:\n        case 8233:\n          return !0;\n\n        default:\n          return !1;\n      }\n    }\n\n    var A = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n    function w(t) {\n      switch (t) {\n        case 9:\n        case 11:\n        case 12:\n        case 32:\n        case 160:\n        case 5760:\n        case 8192:\n        case 8193:\n        case 8194:\n        case 8195:\n        case 8196:\n        case 8197:\n        case 8198:\n        case 8199:\n        case 8200:\n        case 8201:\n        case 8202:\n        case 8239:\n        case 8287:\n        case 12288:\n        case 65279:\n          return !0;\n\n        default:\n          return !1;\n      }\n    }\n\n    var T = function t(e, s, i, a) {\n      d(this, t), this.token = e, this.isExpr = !!s, this.preserveSpace = !!i, this.override = a;\n    },\n        F = {\n      braceStatement: new T(\"{\", !1),\n      braceExpression: new T(\"{\", !0),\n      templateQuasi: new T(\"${\", !1),\n      parenStatement: new T(\"(\", !1),\n      parenExpression: new T(\"(\", !0),\n      template: new T(\"`\", !0, !0, function (t) {\n        return t.readTmplToken();\n      }),\n      functionExpression: new T(\"function\", !0),\n      functionStatement: new T(\"function\", !1)\n    };\n\n    o.parenR.updateContext = o.braceR.updateContext = function () {\n      if (1 !== this.state.context.length) {\n        var t = this.state.context.pop();\n        t === F.braceStatement && \"function\" === this.curContext().token && (t = this.state.context.pop()), this.state.exprAllowed = !t.isExpr;\n      } else this.state.exprAllowed = !0;\n    }, o.name.updateContext = function (t) {\n      var e = !1;\n      t !== o.dot && (\"of\" === this.state.value && !this.state.exprAllowed || \"yield\" === this.state.value && this.scope.inGenerator) && (e = !0), this.state.exprAllowed = e, this.state.isIterator && (this.state.isIterator = !1);\n    }, o.braceL.updateContext = function (t) {\n      this.state.context.push(this.braceIsBlock(t) ? F.braceStatement : F.braceExpression), this.state.exprAllowed = !0;\n    }, o.dollarBraceL.updateContext = function () {\n      this.state.context.push(F.templateQuasi), this.state.exprAllowed = !0;\n    }, o.parenL.updateContext = function (t) {\n      var e = t === o._if || t === o._for || t === o._with || t === o._while;\n      this.state.context.push(e ? F.parenStatement : F.parenExpression), this.state.exprAllowed = !0;\n    }, o.incDec.updateContext = function () {}, o._function.updateContext = o._class.updateContext = function (t) {\n      !t.beforeExpr || t === o.semi || t === o._else || t === o._return && v.test(this.input.slice(this.state.lastTokEnd, this.state.start)) || (t === o.colon || t === o.braceL) && this.curContext() === F.b_stat ? this.state.context.push(F.functionStatement) : this.state.context.push(F.functionExpression), this.state.exprAllowed = !1;\n    }, o.backQuote.updateContext = function () {\n      this.curContext() === F.template ? this.state.context.pop() : this.state.context.push(F.template), this.state.exprAllowed = !1;\n    };\n\n    var N = [\"eval\", \"arguments\"],\n        S = new Set([\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"]),\n        I = new Set(N),\n        L = function (t, e) {\n      return e && \"await\" === t || \"enum\" === t;\n    };\n\n    function B(t, e) {\n      return L(t, e) || S.has(t);\n    }\n\n    function O(t) {\n      return I.has(t);\n    }\n\n    function M(t, e) {\n      return B(t, e) || O(t);\n    }\n\n    var R = /^in(stanceof)?$/,\n        _ = \"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-Ᶎꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭧꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\",\n        j = \"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿\",\n        q = new RegExp(\"[\" + _ + \"]\"),\n        U = new RegExp(\"[\" + _ + j + \"]\");\n    _ = j = null;\n    var V = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541],\n        z = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];\n\n    function W(t, e) {\n      for (var s = 65536, i = 0, a = e.length; i < a; i += 2) {\n        if ((s += e[i]) > t) return !1;\n        if ((s += e[i + 1]) >= t) return !0;\n      }\n\n      return !1;\n    }\n\n    function K(t) {\n      return t < 65 ? 36 === t : t <= 90 || (t < 97 ? 95 === t : t <= 122 || (t <= 65535 ? t >= 170 && q.test(String.fromCharCode(t)) : W(t, V)));\n    }\n\n    function X(t) {\n      return t < 48 ? 36 === t : t < 58 || !(t < 65) && (t <= 90 || (t < 97 ? 95 === t : t <= 122 || (t <= 65535 ? t >= 170 && U.test(String.fromCharCode(t)) : W(t, V) || W(t, z))));\n    }\n\n    var J = [\"any\", \"bool\", \"boolean\", \"empty\", \"false\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\", \"interface\", \"extends\", \"_\"];\n\n    function H(t) {\n      return \"type\" === t.importKind || \"typeof\" === t.importKind;\n    }\n\n    function G(t) {\n      return (t.type === o.name || !!t.type.keyword) && \"from\" !== t.value;\n    }\n\n    var Q = {\n      const: \"declare export var\",\n      let: \"declare export var\",\n      type: \"export type\",\n      interface: \"export interface\"\n    };\n    var $ = /\\*?\\s*@((?:no)?flow)\\b/,\n        Y = {\n      quot: '\"',\n      amp: \"&\",\n      apos: \"'\",\n      lt: \"<\",\n      gt: \">\",\n      nbsp: \" \",\n      iexcl: \"¡\",\n      cent: \"¢\",\n      pound: \"£\",\n      curren: \"¤\",\n      yen: \"¥\",\n      brvbar: \"¦\",\n      sect: \"§\",\n      uml: \"¨\",\n      copy: \"©\",\n      ordf: \"ª\",\n      laquo: \"«\",\n      not: \"¬\",\n      shy: \"­\",\n      reg: \"®\",\n      macr: \"¯\",\n      deg: \"°\",\n      plusmn: \"±\",\n      sup2: \"²\",\n      sup3: \"³\",\n      acute: \"´\",\n      micro: \"µ\",\n      para: \"¶\",\n      middot: \"·\",\n      cedil: \"¸\",\n      sup1: \"¹\",\n      ordm: \"º\",\n      raquo: \"»\",\n      frac14: \"¼\",\n      frac12: \"½\",\n      frac34: \"¾\",\n      iquest: \"¿\",\n      Agrave: \"À\",\n      Aacute: \"Á\",\n      Acirc: \"Â\",\n      Atilde: \"Ã\",\n      Auml: \"Ä\",\n      Aring: \"Å\",\n      AElig: \"Æ\",\n      Ccedil: \"Ç\",\n      Egrave: \"È\",\n      Eacute: \"É\",\n      Ecirc: \"Ê\",\n      Euml: \"Ë\",\n      Igrave: \"Ì\",\n      Iacute: \"Í\",\n      Icirc: \"Î\",\n      Iuml: \"Ï\",\n      ETH: \"Ð\",\n      Ntilde: \"Ñ\",\n      Ograve: \"Ò\",\n      Oacute: \"Ó\",\n      Ocirc: \"Ô\",\n      Otilde: \"Õ\",\n      Ouml: \"Ö\",\n      times: \"×\",\n      Oslash: \"Ø\",\n      Ugrave: \"Ù\",\n      Uacute: \"Ú\",\n      Ucirc: \"Û\",\n      Uuml: \"Ü\",\n      Yacute: \"Ý\",\n      THORN: \"Þ\",\n      szlig: \"ß\",\n      agrave: \"à\",\n      aacute: \"á\",\n      acirc: \"â\",\n      atilde: \"ã\",\n      auml: \"ä\",\n      aring: \"å\",\n      aelig: \"æ\",\n      ccedil: \"ç\",\n      egrave: \"è\",\n      eacute: \"é\",\n      ecirc: \"ê\",\n      euml: \"ë\",\n      igrave: \"ì\",\n      iacute: \"í\",\n      icirc: \"î\",\n      iuml: \"ï\",\n      eth: \"ð\",\n      ntilde: \"ñ\",\n      ograve: \"ò\",\n      oacute: \"ó\",\n      ocirc: \"ô\",\n      otilde: \"õ\",\n      ouml: \"ö\",\n      divide: \"÷\",\n      oslash: \"ø\",\n      ugrave: \"ù\",\n      uacute: \"ú\",\n      ucirc: \"û\",\n      uuml: \"ü\",\n      yacute: \"ý\",\n      thorn: \"þ\",\n      yuml: \"ÿ\",\n      OElig: \"Œ\",\n      oelig: \"œ\",\n      Scaron: \"Š\",\n      scaron: \"š\",\n      Yuml: \"Ÿ\",\n      fnof: \"ƒ\",\n      circ: \"ˆ\",\n      tilde: \"˜\",\n      Alpha: \"Α\",\n      Beta: \"Β\",\n      Gamma: \"Γ\",\n      Delta: \"Δ\",\n      Epsilon: \"Ε\",\n      Zeta: \"Ζ\",\n      Eta: \"Η\",\n      Theta: \"Θ\",\n      Iota: \"Ι\",\n      Kappa: \"Κ\",\n      Lambda: \"Λ\",\n      Mu: \"Μ\",\n      Nu: \"Ν\",\n      Xi: \"Ξ\",\n      Omicron: \"Ο\",\n      Pi: \"Π\",\n      Rho: \"Ρ\",\n      Sigma: \"Σ\",\n      Tau: \"Τ\",\n      Upsilon: \"Υ\",\n      Phi: \"Φ\",\n      Chi: \"Χ\",\n      Psi: \"Ψ\",\n      Omega: \"Ω\",\n      alpha: \"α\",\n      beta: \"β\",\n      gamma: \"γ\",\n      delta: \"δ\",\n      epsilon: \"ε\",\n      zeta: \"ζ\",\n      eta: \"η\",\n      theta: \"θ\",\n      iota: \"ι\",\n      kappa: \"κ\",\n      lambda: \"λ\",\n      mu: \"μ\",\n      nu: \"ν\",\n      xi: \"ξ\",\n      omicron: \"ο\",\n      pi: \"π\",\n      rho: \"ρ\",\n      sigmaf: \"ς\",\n      sigma: \"σ\",\n      tau: \"τ\",\n      upsilon: \"υ\",\n      phi: \"φ\",\n      chi: \"χ\",\n      psi: \"ψ\",\n      omega: \"ω\",\n      thetasym: \"ϑ\",\n      upsih: \"ϒ\",\n      piv: \"ϖ\",\n      ensp: \" \",\n      emsp: \" \",\n      thinsp: \" \",\n      zwnj: \"‌\",\n      zwj: \"‍\",\n      lrm: \"‎\",\n      rlm: \"‏\",\n      ndash: \"–\",\n      mdash: \"—\",\n      lsquo: \"‘\",\n      rsquo: \"’\",\n      sbquo: \"‚\",\n      ldquo: \"“\",\n      rdquo: \"”\",\n      bdquo: \"„\",\n      dagger: \"†\",\n      Dagger: \"‡\",\n      bull: \"•\",\n      hellip: \"…\",\n      permil: \"‰\",\n      prime: \"′\",\n      Prime: \"″\",\n      lsaquo: \"‹\",\n      rsaquo: \"›\",\n      oline: \"‾\",\n      frasl: \"⁄\",\n      euro: \"€\",\n      image: \"ℑ\",\n      weierp: \"℘\",\n      real: \"ℜ\",\n      trade: \"™\",\n      alefsym: \"ℵ\",\n      larr: \"←\",\n      uarr: \"↑\",\n      rarr: \"→\",\n      darr: \"↓\",\n      harr: \"↔\",\n      crarr: \"↵\",\n      lArr: \"⇐\",\n      uArr: \"⇑\",\n      rArr: \"⇒\",\n      dArr: \"⇓\",\n      hArr: \"⇔\",\n      forall: \"∀\",\n      part: \"∂\",\n      exist: \"∃\",\n      empty: \"∅\",\n      nabla: \"∇\",\n      isin: \"∈\",\n      notin: \"∉\",\n      ni: \"∋\",\n      prod: \"∏\",\n      sum: \"∑\",\n      minus: \"−\",\n      lowast: \"∗\",\n      radic: \"√\",\n      prop: \"∝\",\n      infin: \"∞\",\n      ang: \"∠\",\n      and: \"∧\",\n      or: \"∨\",\n      cap: \"∩\",\n      cup: \"∪\",\n      int: \"∫\",\n      there4: \"∴\",\n      sim: \"∼\",\n      cong: \"≅\",\n      asymp: \"≈\",\n      ne: \"≠\",\n      equiv: \"≡\",\n      le: \"≤\",\n      ge: \"≥\",\n      sub: \"⊂\",\n      sup: \"⊃\",\n      nsub: \"⊄\",\n      sube: \"⊆\",\n      supe: \"⊇\",\n      oplus: \"⊕\",\n      otimes: \"⊗\",\n      perp: \"⊥\",\n      sdot: \"⋅\",\n      lceil: \"⌈\",\n      rceil: \"⌉\",\n      lfloor: \"⌊\",\n      rfloor: \"⌋\",\n      lang: \"〈\",\n      rang: \"〉\",\n      loz: \"◊\",\n      spades: \"♠\",\n      clubs: \"♣\",\n      hearts: \"♥\",\n      diams: \"♦\"\n    },\n        Z = /^[\\da-fA-F]+$/,\n        tt = /^\\d+$/;\n\n    function et(t) {\n      return !!t && (\"JSXOpeningFragment\" === t.type || \"JSXClosingFragment\" === t.type);\n    }\n\n    function st(t) {\n      if (\"JSXIdentifier\" === t.type) return t.name;\n      if (\"JSXNamespacedName\" === t.type) return t.namespace.name + \":\" + t.name.name;\n      if (\"JSXMemberExpression\" === t.type) return st(t.object) + \".\" + st(t.property);\n      throw new Error(\"Node had unexpected type: \" + t.type);\n    }\n\n    F.j_oTag = new T(\"<tag\", !1), F.j_cTag = new T(\"</tag\", !1), F.j_expr = new T(\"<tag>...</tag>\", !0, !0), o.jsxName = new i(\"jsxName\"), o.jsxText = new i(\"jsxText\", {\n      beforeExpr: !0\n    }), o.jsxTagStart = new i(\"jsxTagStart\", {\n      startsExpr: !0\n    }), o.jsxTagEnd = new i(\"jsxTagEnd\"), o.jsxTagStart.updateContext = function () {\n      this.state.context.push(F.j_expr), this.state.context.push(F.j_oTag), this.state.exprAllowed = !1;\n    }, o.jsxTagEnd.updateContext = function (t) {\n      var e = this.state.context.pop();\n      e === F.j_oTag && t === o.slash || e === F.j_cTag ? (this.state.context.pop(), this.state.exprAllowed = this.curContext() === F.j_expr) : this.state.exprAllowed = !0;\n    };\n\n    var it = function t(e) {\n      d(this, t), this.var = [], this.lexical = [], this.functions = [], this.flags = e;\n    },\n        at = function () {\n      function t(e, s) {\n        d(this, t), this.scopeStack = [], this.undefinedExports = new Map(), this.raise = e, this.inModule = s;\n      }\n\n      return m(t, [{\n        key: \"createScope\",\n        value: function (t) {\n          return new it(t);\n        }\n      }, {\n        key: \"enter\",\n        value: function (t) {\n          this.scopeStack.push(this.createScope(t));\n        }\n      }, {\n        key: \"exit\",\n        value: function () {\n          this.scopeStack.pop();\n        }\n      }, {\n        key: \"treatFunctionsAsVarInScope\",\n        value: function (t) {\n          return !!(t.flags & h || !this.inModule && 1 & t.flags);\n        }\n      }, {\n        key: \"declareName\",\n        value: function (t, e, s) {\n          var i = this.currentScope();\n          if (8 & e || 16 & e) this.checkRedeclarationInScope(i, t, e, s), 16 & e ? i.functions.push(t) : i.lexical.push(t), 8 & e && this.maybeExportDefined(i, t);else if (4 & e) for (var a = this.scopeStack.length - 1; a >= 0 && (i = this.scopeStack[a], this.checkRedeclarationInScope(i, t, e, s), i.var.push(t), this.maybeExportDefined(i, t), !(i.flags & c)); --a);\n          this.inModule && 1 & i.flags && this.undefinedExports.delete(t);\n        }\n      }, {\n        key: \"maybeExportDefined\",\n        value: function (t, e) {\n          this.inModule && 1 & t.flags && this.undefinedExports.delete(e);\n        }\n      }, {\n        key: \"checkRedeclarationInScope\",\n        value: function (t, e, s, i) {\n          this.isRedeclaredInScope(t, e, s) && this.raise(i, \"Identifier '\".concat(e, \"' has already been declared\"));\n        }\n      }, {\n        key: \"isRedeclaredInScope\",\n        value: function (t, e, s) {\n          return !!(1 & s) && (8 & s ? t.lexical.indexOf(e) > -1 || t.functions.indexOf(e) > -1 || t.var.indexOf(e) > -1 : 16 & s ? t.lexical.indexOf(e) > -1 || !this.treatFunctionsAsVarInScope(t) && t.var.indexOf(e) > -1 : t.lexical.indexOf(e) > -1 && !(32 & t.flags && t.lexical[0] === e) || !this.treatFunctionsAsVarInScope(t) && t.functions.indexOf(e) > -1);\n        }\n      }, {\n        key: \"checkLocalExport\",\n        value: function (t) {\n          -1 === this.scopeStack[0].lexical.indexOf(t.name) && -1 === this.scopeStack[0].var.indexOf(t.name) && -1 === this.scopeStack[0].functions.indexOf(t.name) && this.undefinedExports.set(t.name, t.start);\n        }\n      }, {\n        key: \"currentScope\",\n        value: function () {\n          return this.scopeStack[this.scopeStack.length - 1];\n        }\n      }, {\n        key: \"currentVarScope\",\n        value: function () {\n          for (var t = this.scopeStack.length - 1;; t--) {\n            var e = this.scopeStack[t];\n            if (e.flags & c) return e;\n          }\n        }\n      }, {\n        key: \"currentThisScope\",\n        value: function () {\n          for (var t = this.scopeStack.length - 1;; t--) {\n            var e = this.scopeStack[t];\n            if ((e.flags & c || 256 & e.flags) && !(16 & e.flags)) return e;\n          }\n        }\n      }, {\n        key: \"inFunction\",\n        get: function () {\n          return (this.currentVarScope().flags & h) > 0;\n        }\n      }, {\n        key: \"inGenerator\",\n        get: function () {\n          return (this.currentVarScope().flags & l) > 0;\n        }\n      }, {\n        key: \"inAsync\",\n        get: function () {\n          return (this.currentVarScope().flags & u) > 0;\n        }\n      }, {\n        key: \"allowSuper\",\n        get: function () {\n          return (64 & this.currentThisScope().flags) > 0;\n        }\n      }, {\n        key: \"allowDirectSuper\",\n        get: function () {\n          return (128 & this.currentThisScope().flags) > 0;\n        }\n      }, {\n        key: \"inNonArrowFunction\",\n        get: function () {\n          return (this.currentThisScope().flags & h) > 0;\n        }\n      }, {\n        key: \"treatFunctionsAsVar\",\n        get: function () {\n          return this.treatFunctionsAsVarInScope(this.currentScope());\n        }\n      }]), t;\n    }(),\n        rt = function (t) {\n      function e() {\n        var t, s;\n        d(this, e);\n\n        for (var i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];\n\n        return (s = g(this, (t = D(e)).call.apply(t, [this].concat(a)))).types = [], s.enums = [], s.constEnums = [], s.classes = [], s.exportOnlyBindings = [], s;\n      }\n\n      return y(e, t), e;\n    }(it),\n        nt = function (t) {\n      function e() {\n        return d(this, e), g(this, D(e).apply(this, arguments));\n      }\n\n      return y(e, t), m(e, [{\n        key: \"createScope\",\n        value: function (t) {\n          return new rt(t);\n        }\n      }, {\n        key: \"declareName\",\n        value: function (t, s, i) {\n          var a = this.currentScope();\n          if (1024 & s) return this.maybeExportDefined(a, t), void a.exportOnlyBindings.push(t);\n          k(D(e.prototype), \"declareName\", this).apply(this, arguments), 2 & s && (1 & s || (this.checkRedeclarationInScope(a, t, s, i), this.maybeExportDefined(a, t)), a.types.push(t)), 256 & s && a.enums.push(t), 512 & s && a.constEnums.push(t), 128 & s && a.classes.push(t);\n        }\n      }, {\n        key: \"isRedeclaredInScope\",\n        value: function (t, s, i) {\n          if (t.enums.indexOf(s) > -1) {\n            if (256 & i) {\n              var a = !!(512 & i),\n                  r = t.constEnums.indexOf(s) > -1;\n              return a !== r;\n            }\n\n            return !0;\n          }\n\n          return 128 & i && t.classes.indexOf(s) > -1 ? t.lexical.indexOf(s) > -1 && !!(1 & i) : !!(2 & i && t.types.indexOf(s) > -1) || k(D(e.prototype), \"isRedeclaredInScope\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"checkLocalExport\",\n        value: function (t) {\n          -1 === this.scopeStack[0].types.indexOf(t.name) && -1 === this.scopeStack[0].exportOnlyBindings.indexOf(t.name) && k(D(e.prototype), \"checkLocalExport\", this).call(this, t);\n        }\n      }]), e;\n    }(at);\n\n    function ot(t) {\n      if (null == t) throw new Error(\"Unexpected \".concat(t, \" value.\"));\n      return t;\n    }\n\n    function ht(t) {\n      if (!t) throw new Error(\"Assert fail\");\n    }\n\n    o.placeholder = new i(\"%%\", {\n      startsExpr: !0\n    });\n\n    function ut(t, e) {\n      return t.some(function (t) {\n        return Array.isArray(t) ? t[0] === e : t === e;\n      });\n    }\n\n    function lt(t, e, s) {\n      var i = t.find(function (t) {\n        return Array.isArray(t) ? t[0] === e : t === e;\n      });\n      return i && Array.isArray(i) ? i[1][s] : null;\n    }\n\n    var ct = [\"minimal\", \"smart\", \"fsharp\"];\n    var pt = {\n      estree: function (t) {\n        return function (t) {\n          function e() {\n            return d(this, e), g(this, D(e).apply(this, arguments));\n          }\n\n          return y(e, t), m(e, [{\n            key: \"estreeParseRegExpLiteral\",\n            value: function (t) {\n              var e = t.pattern,\n                  s = t.flags,\n                  i = null;\n\n              try {\n                i = new RegExp(e, s);\n              } catch (t) {}\n\n              var a = this.estreeParseLiteral(i);\n              return a.regex = {\n                pattern: e,\n                flags: s\n              }, a;\n            }\n          }, {\n            key: \"estreeParseLiteral\",\n            value: function (t) {\n              return this.parseLiteral(t, \"Literal\");\n            }\n          }, {\n            key: \"directiveToStmt\",\n            value: function (t) {\n              var e = t.value,\n                  s = this.startNodeAt(t.start, t.loc.start),\n                  i = this.startNodeAt(e.start, e.loc.start);\n              return i.value = e.value, i.raw = e.extra.raw, s.expression = this.finishNodeAt(i, \"Literal\", e.end, e.loc.end), s.directive = e.extra.raw.slice(1, -1), this.finishNodeAt(s, \"ExpressionStatement\", t.end, t.loc.end);\n            }\n          }, {\n            key: \"initFunction\",\n            value: function (t, s) {\n              k(D(e.prototype), \"initFunction\", this).call(this, t, s), t.expression = !1;\n            }\n          }, {\n            key: \"checkDeclaration\",\n            value: function (t) {\n              f(t) ? this.checkDeclaration(t.value) : k(D(e.prototype), \"checkDeclaration\", this).call(this, t);\n            }\n          }, {\n            key: \"checkGetterSetterParams\",\n            value: function (t) {\n              var e = t,\n                  s = \"get\" === e.kind ? 0 : 1,\n                  i = e.start;\n              e.value.params.length !== s ? \"get\" === e.kind ? this.raise(i, \"getter must not have any formal parameters\") : this.raise(i, \"setter must have exactly one formal parameter\") : \"set\" === e.kind && \"RestElement\" === e.value.params[0].type && this.raise(i, \"setter function argument must not be a rest parameter\");\n            }\n          }, {\n            key: \"checkLVal\",\n            value: function (t) {\n              var s = this,\n                  i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 64,\n                  a = arguments.length > 2 ? arguments[2] : void 0,\n                  r = arguments.length > 3 ? arguments[3] : void 0,\n                  n = arguments.length > 4 ? arguments[4] : void 0;\n\n              switch (t.type) {\n                case \"ObjectPattern\":\n                  t.properties.forEach(function (t) {\n                    s.checkLVal(\"Property\" === t.type ? t.value : t, i, a, \"object destructuring pattern\", n);\n                  });\n                  break;\n\n                default:\n                  k(D(e.prototype), \"checkLVal\", this).call(this, t, i, a, r, n);\n              }\n            }\n          }, {\n            key: \"checkDuplicatedProto\",\n            value: function (t, e) {\n              if (!(\"SpreadElement\" === t.type || t.computed || t.method || t.shorthand)) {\n                var s = t.key;\n                \"__proto__\" === (\"Identifier\" === s.type ? s.name : String(s.value)) && \"init\" === t.kind && (e.used && !e.start && (e.start = s.start), e.used = !0);\n              }\n            }\n          }, {\n            key: \"isStrictBody\",\n            value: function (t) {\n              if (\"BlockStatement\" === t.body.type && t.body.body.length > 0) for (var e = 0, s = t.body.body; e < s.length; e++) {\n                var i = s[e];\n                if (\"ExpressionStatement\" !== i.type || \"Literal\" !== i.expression.type) break;\n                if (\"use strict\" === i.expression.value) return !0;\n              }\n              return !1;\n            }\n          }, {\n            key: \"isValidDirective\",\n            value: function (t) {\n              return !(\"ExpressionStatement\" !== t.type || \"Literal\" !== t.expression.type || \"string\" != typeof t.expression.value || t.expression.extra && t.expression.extra.parenthesized);\n            }\n          }, {\n            key: \"stmtToDirective\",\n            value: function (t) {\n              var s = k(D(e.prototype), \"stmtToDirective\", this).call(this, t),\n                  i = t.expression.value;\n              return s.value.value = i, s;\n            }\n          }, {\n            key: \"parseBlockBody\",\n            value: function (t, s, i, a) {\n              var r = this;\n              k(D(e.prototype), \"parseBlockBody\", this).call(this, t, s, i, a);\n              var n = t.directives.map(function (t) {\n                return r.directiveToStmt(t);\n              });\n              t.body = n.concat(t.body), delete t.directives;\n            }\n          }, {\n            key: \"pushClassMethod\",\n            value: function (t, e, s, i, a, r) {\n              this.parseMethod(e, s, i, a, r, \"ClassMethod\", !0), e.typeParameters && (e.value.typeParameters = e.typeParameters, delete e.typeParameters), t.body.push(e);\n            }\n          }, {\n            key: \"parseExprAtom\",\n            value: function (t) {\n              switch (this.state.type) {\n                case o.regexp:\n                  return this.estreeParseRegExpLiteral(this.state.value);\n\n                case o.num:\n                case o.string:\n                  return this.estreeParseLiteral(this.state.value);\n\n                case o._null:\n                  return this.estreeParseLiteral(null);\n\n                case o._true:\n                  return this.estreeParseLiteral(!0);\n\n                case o._false:\n                  return this.estreeParseLiteral(!1);\n\n                default:\n                  return k(D(e.prototype), \"parseExprAtom\", this).call(this, t);\n              }\n            }\n          }, {\n            key: \"parseLiteral\",\n            value: function (t, s, i, a) {\n              var r = k(D(e.prototype), \"parseLiteral\", this).call(this, t, s, i, a);\n              return r.raw = r.extra.raw, delete r.extra, r;\n            }\n          }, {\n            key: \"parseFunctionBody\",\n            value: function (t, s) {\n              var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n              k(D(e.prototype), \"parseFunctionBody\", this).call(this, t, s, i), t.expression = \"BlockStatement\" !== t.body.type;\n            }\n          }, {\n            key: \"parseMethod\",\n            value: function (t, s, i, a, r, n) {\n              var o = arguments.length > 6 && void 0 !== arguments[6] && arguments[6],\n                  h = this.startNode();\n              return h.kind = t.kind, (h = k(D(e.prototype), \"parseMethod\", this).call(this, h, s, i, a, r, n, o)).type = \"FunctionExpression\", delete h.kind, t.value = h, n = \"ClassMethod\" === n ? \"MethodDefinition\" : n, this.finishNode(t, n);\n            }\n          }, {\n            key: \"parseObjectMethod\",\n            value: function (t, s, i, a, r) {\n              var n = k(D(e.prototype), \"parseObjectMethod\", this).call(this, t, s, i, a, r);\n              return n && (n.type = \"Property\", \"method\" === n.kind && (n.kind = \"init\"), n.shorthand = !1), n;\n            }\n          }, {\n            key: \"parseObjectProperty\",\n            value: function (t, s, i, a, r) {\n              var n = k(D(e.prototype), \"parseObjectProperty\", this).call(this, t, s, i, a, r);\n              return n && (n.kind = \"init\", n.type = \"Property\"), n;\n            }\n          }, {\n            key: \"toAssignable\",\n            value: function (t, s, i) {\n              return f(t) ? (this.toAssignable(t.value, s, i), t) : k(D(e.prototype), \"toAssignable\", this).call(this, t, s, i);\n            }\n          }, {\n            key: \"toAssignableObjectExpressionProp\",\n            value: function (t, s, i) {\n              if (\"get\" === t.kind || \"set\" === t.kind) throw this.raise(t.key.start, \"Object pattern can't contain getter or setter\");\n              if (t.method) throw this.raise(t.key.start, \"Object pattern can't contain methods\");\n              k(D(e.prototype), \"toAssignableObjectExpressionProp\", this).call(this, t, s, i);\n            }\n          }]), e;\n        }(t);\n      },\n      jsx: function (t) {\n        return function (t) {\n          function e() {\n            return d(this, e), g(this, D(e).apply(this, arguments));\n          }\n\n          return y(e, t), m(e, [{\n            key: \"jsxReadToken\",\n            value: function () {\n              for (var t = \"\", s = this.state.pos;;) {\n                if (this.state.pos >= this.length) throw this.raise(this.state.start, \"Unterminated JSX contents\");\n                var i = this.input.charCodeAt(this.state.pos);\n\n                switch (i) {\n                  case 60:\n                  case 123:\n                    return this.state.pos === this.state.start ? 60 === i && this.state.exprAllowed ? (++this.state.pos, this.finishToken(o.jsxTagStart)) : k(D(e.prototype), \"getTokenFromCode\", this).call(this, i) : (t += this.input.slice(s, this.state.pos), this.finishToken(o.jsxText, t));\n\n                  case 38:\n                    t += this.input.slice(s, this.state.pos), t += this.jsxReadEntity(), s = this.state.pos;\n                    break;\n\n                  default:\n                    C(i) ? (t += this.input.slice(s, this.state.pos), t += this.jsxReadNewLine(!0), s = this.state.pos) : ++this.state.pos;\n                }\n              }\n            }\n          }, {\n            key: \"jsxReadNewLine\",\n            value: function (t) {\n              var e,\n                  s = this.input.charCodeAt(this.state.pos);\n              return ++this.state.pos, 13 === s && 10 === this.input.charCodeAt(this.state.pos) ? (++this.state.pos, e = t ? \"\\n\" : \"\\r\\n\") : e = String.fromCharCode(s), ++this.state.curLine, this.state.lineStart = this.state.pos, e;\n            }\n          }, {\n            key: \"jsxReadString\",\n            value: function (t) {\n              for (var e = \"\", s = ++this.state.pos;;) {\n                if (this.state.pos >= this.length) throw this.raise(this.state.start, \"Unterminated string constant\");\n                var i = this.input.charCodeAt(this.state.pos);\n                if (i === t) break;\n                38 === i ? (e += this.input.slice(s, this.state.pos), e += this.jsxReadEntity(), s = this.state.pos) : C(i) ? (e += this.input.slice(s, this.state.pos), e += this.jsxReadNewLine(!1), s = this.state.pos) : ++this.state.pos;\n              }\n\n              return e += this.input.slice(s, this.state.pos++), this.finishToken(o.string, e);\n            }\n          }, {\n            key: \"jsxReadEntity\",\n            value: function () {\n              for (var t, e = \"\", s = 0, i = this.input[this.state.pos], a = ++this.state.pos; this.state.pos < this.length && s++ < 10;) {\n                if (\";\" === (i = this.input[this.state.pos++])) {\n                  \"#\" === e[0] ? \"x\" === e[1] ? (e = e.substr(2), Z.test(e) && (t = String.fromCodePoint(parseInt(e, 16)))) : (e = e.substr(1), tt.test(e) && (t = String.fromCodePoint(parseInt(e, 10)))) : t = Y[e];\n                  break;\n                }\n\n                e += i;\n              }\n\n              return t || (this.state.pos = a, \"&\");\n            }\n          }, {\n            key: \"jsxReadWord\",\n            value: function () {\n              var t,\n                  e = this.state.pos;\n\n              do {\n                t = this.input.charCodeAt(++this.state.pos);\n              } while (X(t) || 45 === t);\n\n              return this.finishToken(o.jsxName, this.input.slice(e, this.state.pos));\n            }\n          }, {\n            key: \"jsxParseIdentifier\",\n            value: function () {\n              var t = this.startNode();\n              return this.match(o.jsxName) ? t.name = this.state.value : this.state.type.keyword ? t.name = this.state.type.keyword : this.unexpected(), this.next(), this.finishNode(t, \"JSXIdentifier\");\n            }\n          }, {\n            key: \"jsxParseNamespacedName\",\n            value: function () {\n              var t = this.state.start,\n                  e = this.state.startLoc,\n                  s = this.jsxParseIdentifier();\n              if (!this.eat(o.colon)) return s;\n              var i = this.startNodeAt(t, e);\n              return i.namespace = s, i.name = this.jsxParseIdentifier(), this.finishNode(i, \"JSXNamespacedName\");\n            }\n          }, {\n            key: \"jsxParseElementName\",\n            value: function () {\n              var t = this.state.start,\n                  e = this.state.startLoc,\n                  s = this.jsxParseNamespacedName();\n              if (\"JSXNamespacedName\" === s.type) return s;\n\n              for (; this.eat(o.dot);) {\n                var i = this.startNodeAt(t, e);\n                i.object = s, i.property = this.jsxParseIdentifier(), s = this.finishNode(i, \"JSXMemberExpression\");\n              }\n\n              return s;\n            }\n          }, {\n            key: \"jsxParseAttributeValue\",\n            value: function () {\n              var t;\n\n              switch (this.state.type) {\n                case o.braceL:\n                  return t = this.startNode(), this.next(), \"JSXEmptyExpression\" === (t = this.jsxParseExpressionContainer(t)).expression.type && this.raise(t.start, \"JSX attributes must only be assigned a non-empty expression\"), t;\n\n                case o.jsxTagStart:\n                case o.string:\n                  return this.parseExprAtom();\n\n                default:\n                  throw this.raise(this.state.start, \"JSX value should be either an expression or a quoted JSX text\");\n              }\n            }\n          }, {\n            key: \"jsxParseEmptyExpression\",\n            value: function () {\n              var t = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n              return this.finishNodeAt(t, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n            }\n          }, {\n            key: \"jsxParseSpreadChild\",\n            value: function (t) {\n              return this.next(), t.expression = this.parseExpression(), this.expect(o.braceR), this.finishNode(t, \"JSXSpreadChild\");\n            }\n          }, {\n            key: \"jsxParseExpressionContainer\",\n            value: function (t) {\n              return this.match(o.braceR) ? t.expression = this.jsxParseEmptyExpression() : t.expression = this.parseExpression(), this.expect(o.braceR), this.finishNode(t, \"JSXExpressionContainer\");\n            }\n          }, {\n            key: \"jsxParseAttribute\",\n            value: function () {\n              var t = this.startNode();\n              return this.eat(o.braceL) ? (this.expect(o.ellipsis), t.argument = this.parseMaybeAssign(), this.expect(o.braceR), this.finishNode(t, \"JSXSpreadAttribute\")) : (t.name = this.jsxParseNamespacedName(), t.value = this.eat(o.eq) ? this.jsxParseAttributeValue() : null, this.finishNode(t, \"JSXAttribute\"));\n            }\n          }, {\n            key: \"jsxParseOpeningElementAt\",\n            value: function (t, e) {\n              var s = this.startNodeAt(t, e);\n              return this.match(o.jsxTagEnd) ? (this.expect(o.jsxTagEnd), this.finishNode(s, \"JSXOpeningFragment\")) : (s.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(s));\n            }\n          }, {\n            key: \"jsxParseOpeningElementAfterName\",\n            value: function (t) {\n              for (var e = []; !this.match(o.slash) && !this.match(o.jsxTagEnd);) e.push(this.jsxParseAttribute());\n\n              return t.attributes = e, t.selfClosing = this.eat(o.slash), this.expect(o.jsxTagEnd), this.finishNode(t, \"JSXOpeningElement\");\n            }\n          }, {\n            key: \"jsxParseClosingElementAt\",\n            value: function (t, e) {\n              var s = this.startNodeAt(t, e);\n              return this.match(o.jsxTagEnd) ? (this.expect(o.jsxTagEnd), this.finishNode(s, \"JSXClosingFragment\")) : (s.name = this.jsxParseElementName(), this.expect(o.jsxTagEnd), this.finishNode(s, \"JSXClosingElement\"));\n            }\n          }, {\n            key: \"jsxParseElementAt\",\n            value: function (t, e) {\n              var s = this.startNodeAt(t, e),\n                  i = [],\n                  a = this.jsxParseOpeningElementAt(t, e),\n                  r = null;\n\n              if (!a.selfClosing) {\n                t: for (;;) switch (this.state.type) {\n                  case o.jsxTagStart:\n                    if (t = this.state.start, e = this.state.startLoc, this.next(), this.eat(o.slash)) {\n                      r = this.jsxParseClosingElementAt(t, e);\n                      break t;\n                    }\n\n                    i.push(this.jsxParseElementAt(t, e));\n                    break;\n\n                  case o.jsxText:\n                    i.push(this.parseExprAtom());\n                    break;\n\n                  case o.braceL:\n                    var n = this.startNode();\n                    this.next(), this.match(o.ellipsis) ? i.push(this.jsxParseSpreadChild(n)) : i.push(this.jsxParseExpressionContainer(n));\n                    break;\n\n                  default:\n                    throw this.unexpected();\n                }\n\n                et(a) && !et(r) ? this.raise(r.start, \"Expected corresponding JSX closing tag for <>\") : !et(a) && et(r) ? this.raise(r.start, \"Expected corresponding JSX closing tag for <\" + st(a.name) + \">\") : et(a) || et(r) || st(r.name) !== st(a.name) && this.raise(r.start, \"Expected corresponding JSX closing tag for <\" + st(a.name) + \">\");\n              }\n\n              if (et(a) ? (s.openingFragment = a, s.closingFragment = r) : (s.openingElement = a, s.closingElement = r), s.children = i, this.isRelational(\"<\")) throw this.raise(this.state.start, \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\");\n              return et(a) ? this.finishNode(s, \"JSXFragment\") : this.finishNode(s, \"JSXElement\");\n            }\n          }, {\n            key: \"jsxParseElement\",\n            value: function () {\n              var t = this.state.start,\n                  e = this.state.startLoc;\n              return this.next(), this.jsxParseElementAt(t, e);\n            }\n          }, {\n            key: \"parseExprAtom\",\n            value: function (t) {\n              return this.match(o.jsxText) ? this.parseLiteral(this.state.value, \"JSXText\") : this.match(o.jsxTagStart) ? this.jsxParseElement() : this.isRelational(\"<\") && 33 !== this.input.charCodeAt(this.state.pos) ? (this.finishToken(o.jsxTagStart), this.jsxParseElement()) : k(D(e.prototype), \"parseExprAtom\", this).call(this, t);\n            }\n          }, {\n            key: \"getTokenFromCode\",\n            value: function (t) {\n              if (this.state.inPropertyName) return k(D(e.prototype), \"getTokenFromCode\", this).call(this, t);\n              var s = this.curContext();\n              if (s === F.j_expr) return this.jsxReadToken();\n\n              if (s === F.j_oTag || s === F.j_cTag) {\n                if (K(t)) return this.jsxReadWord();\n                if (62 === t) return ++this.state.pos, this.finishToken(o.jsxTagEnd);\n                if ((34 === t || 39 === t) && s === F.j_oTag) return this.jsxReadString(t);\n              }\n\n              return 60 === t && this.state.exprAllowed && 33 !== this.input.charCodeAt(this.state.pos + 1) ? (++this.state.pos, this.finishToken(o.jsxTagStart)) : k(D(e.prototype), \"getTokenFromCode\", this).call(this, t);\n            }\n          }, {\n            key: \"updateContext\",\n            value: function (t) {\n              if (this.match(o.braceL)) {\n                var s = this.curContext();\n                s === F.j_oTag ? this.state.context.push(F.braceExpression) : s === F.j_expr ? this.state.context.push(F.templateQuasi) : k(D(e.prototype), \"updateContext\", this).call(this, t), this.state.exprAllowed = !0;\n              } else {\n                if (!this.match(o.slash) || t !== o.jsxTagStart) return k(D(e.prototype), \"updateContext\", this).call(this, t);\n                this.state.context.length -= 2, this.state.context.push(F.j_cTag), this.state.exprAllowed = !1;\n              }\n            }\n          }]), e;\n        }(t);\n      },\n      flow: function (t) {\n        return function (t) {\n          function e(t, s) {\n            var i;\n            return d(this, e), (i = g(this, D(e).call(this, t, s))).flowPragma = void 0, i;\n          }\n\n          return y(e, t), m(e, [{\n            key: \"shouldParseTypes\",\n            value: function () {\n              return this.getPluginOption(\"flow\", \"all\") || \"flow\" === this.flowPragma;\n            }\n          }, {\n            key: \"shouldParseEnums\",\n            value: function () {\n              return !!this.getPluginOption(\"flow\", \"enums\");\n            }\n          }, {\n            key: \"finishToken\",\n            value: function (t, s) {\n              return t !== o.string && t !== o.semi && t !== o.interpreterDirective && void 0 === this.flowPragma && (this.flowPragma = null), k(D(e.prototype), \"finishToken\", this).call(this, t, s);\n            }\n          }, {\n            key: \"addComment\",\n            value: function (t) {\n              if (void 0 === this.flowPragma) {\n                var s = $.exec(t.value);\n                if (s) {\n                  if (\"flow\" === s[1]) this.flowPragma = \"flow\";else {\n                    if (\"noflow\" !== s[1]) throw new Error(\"Unexpected flow pragma\");\n                    this.flowPragma = \"noflow\";\n                  }\n                } else ;\n              }\n\n              return k(D(e.prototype), \"addComment\", this).call(this, t);\n            }\n          }, {\n            key: \"flowParseTypeInitialiser\",\n            value: function (t) {\n              var e = this.state.inType;\n              this.state.inType = !0, this.expect(t || o.colon);\n              var s = this.flowParseType();\n              return this.state.inType = e, s;\n            }\n          }, {\n            key: \"flowParsePredicate\",\n            value: function () {\n              var t = this.startNode(),\n                  e = this.state.startLoc,\n                  s = this.state.start;\n              this.expect(o.modulo);\n              var i = this.state.startLoc;\n              return this.expectContextual(\"checks\"), e.line === i.line && e.column === i.column - 1 || this.raise(s, \"Spaces between ´%´ and ´checks´ are not allowed here.\"), this.eat(o.parenL) ? (t.value = this.parseExpression(), this.expect(o.parenR), this.finishNode(t, \"DeclaredPredicate\")) : this.finishNode(t, \"InferredPredicate\");\n            }\n          }, {\n            key: \"flowParseTypeAndPredicateInitialiser\",\n            value: function () {\n              var t = this.state.inType;\n              this.state.inType = !0, this.expect(o.colon);\n              var e = null,\n                  s = null;\n              return this.match(o.modulo) ? (this.state.inType = t, s = this.flowParsePredicate()) : (e = this.flowParseType(), this.state.inType = t, this.match(o.modulo) && (s = this.flowParsePredicate())), [e, s];\n            }\n          }, {\n            key: \"flowParseDeclareClass\",\n            value: function (t) {\n              return this.next(), this.flowParseInterfaceish(t, !0), this.finishNode(t, \"DeclareClass\");\n            }\n          }, {\n            key: \"flowParseDeclareFunction\",\n            value: function (t) {\n              this.next();\n              var e = t.id = this.parseIdentifier(),\n                  s = this.startNode(),\n                  i = this.startNode();\n              this.isRelational(\"<\") ? s.typeParameters = this.flowParseTypeParameterDeclaration() : s.typeParameters = null, this.expect(o.parenL);\n              var a = this.flowParseFunctionTypeParams();\n              s.params = a.params, s.rest = a.rest, this.expect(o.parenR);\n              var r = P(this.flowParseTypeAndPredicateInitialiser(), 2);\n              return s.returnType = r[0], t.predicate = r[1], i.typeAnnotation = this.finishNode(s, \"FunctionTypeAnnotation\"), e.typeAnnotation = this.finishNode(i, \"TypeAnnotation\"), this.resetEndLocation(e), this.semicolon(), this.finishNode(t, \"DeclareFunction\");\n            }\n          }, {\n            key: \"flowParseDeclare\",\n            value: function (t, e) {\n              if (this.match(o._class)) return this.flowParseDeclareClass(t);\n              if (this.match(o._function)) return this.flowParseDeclareFunction(t);\n              if (this.match(o._var)) return this.flowParseDeclareVariable(t);\n              if (this.eatContextual(\"module\")) return this.match(o.dot) ? this.flowParseDeclareModuleExports(t) : (e && this.raise(this.state.lastTokStart, \"`declare module` cannot be used inside another `declare module`\"), this.flowParseDeclareModule(t));\n              if (this.isContextual(\"type\")) return this.flowParseDeclareTypeAlias(t);\n              if (this.isContextual(\"opaque\")) return this.flowParseDeclareOpaqueType(t);\n              if (this.isContextual(\"interface\")) return this.flowParseDeclareInterface(t);\n              if (this.match(o._export)) return this.flowParseDeclareExportDeclaration(t, e);\n              throw this.unexpected();\n            }\n          }, {\n            key: \"flowParseDeclareVariable\",\n            value: function (t) {\n              return this.next(), t.id = this.flowParseTypeAnnotatableIdentifier(!0), this.scope.declareName(t.id.name, 5, t.id.start), this.semicolon(), this.finishNode(t, \"DeclareVariable\");\n            }\n          }, {\n            key: \"flowParseDeclareModule\",\n            value: function (t) {\n              var e = this;\n              this.scope.enter(0), this.match(o.string) ? t.id = this.parseExprAtom() : t.id = this.parseIdentifier();\n              var s = t.body = this.startNode(),\n                  i = s.body = [];\n\n              for (this.expect(o.braceL); !this.match(o.braceR);) {\n                var a = this.startNode();\n                this.match(o._import) ? (this.next(), this.isContextual(\"type\") || this.match(o._typeof) || this.raise(this.state.lastTokStart, \"Imports within a `declare module` body must always be `import type` or `import typeof`\"), this.parseImport(a)) : (this.expectContextual(\"declare\", \"Only declares and type imports are allowed inside declare module\"), a = this.flowParseDeclare(a, !0)), i.push(a);\n              }\n\n              this.scope.exit(), this.expect(o.braceR), this.finishNode(s, \"BlockStatement\");\n              var r = null,\n                  n = !1,\n                  h = \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\";\n              return i.forEach(function (t) {\n                !function (t) {\n                  return \"DeclareExportAllDeclaration\" === t.type || \"DeclareExportDeclaration\" === t.type && (!t.declaration || \"TypeAlias\" !== t.declaration.type && \"InterfaceDeclaration\" !== t.declaration.type);\n                }(t) ? \"DeclareModuleExports\" === t.type && (n && e.raise(t.start, \"Duplicate `declare module.exports` statement\"), \"ES\" === r && e.raise(t.start, h), r = \"CommonJS\", n = !0) : (\"CommonJS\" === r && e.raise(t.start, h), r = \"ES\");\n              }), t.kind = r || \"CommonJS\", this.finishNode(t, \"DeclareModule\");\n            }\n          }, {\n            key: \"flowParseDeclareExportDeclaration\",\n            value: function (t, e) {\n              if (this.expect(o._export), this.eat(o._default)) return this.match(o._function) || this.match(o._class) ? t.declaration = this.flowParseDeclare(this.startNode()) : (t.declaration = this.flowParseType(), this.semicolon()), t.default = !0, this.finishNode(t, \"DeclareExportDeclaration\");\n\n              if (this.match(o._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !e) {\n                var s = this.state.value,\n                    i = Q[s];\n                this.unexpected(this.state.start, \"`declare export \".concat(s, \"` is not supported. Use `\").concat(i, \"` instead\"));\n              }\n\n              if (this.match(o._var) || this.match(o._function) || this.match(o._class) || this.isContextual(\"opaque\")) return t.declaration = this.flowParseDeclare(this.startNode()), t.default = !1, this.finishNode(t, \"DeclareExportDeclaration\");\n              if (this.match(o.star) || this.match(o.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) return \"ExportNamedDeclaration\" === (t = this.parseExport(t)).type && (t.type = \"ExportDeclaration\", t.default = !1, delete t.exportKind), t.type = \"Declare\" + t.type, t;\n              throw this.unexpected();\n            }\n          }, {\n            key: \"flowParseDeclareModuleExports\",\n            value: function (t) {\n              return this.next(), this.expectContextual(\"exports\"), t.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(t, \"DeclareModuleExports\");\n            }\n          }, {\n            key: \"flowParseDeclareTypeAlias\",\n            value: function (t) {\n              return this.next(), this.flowParseTypeAlias(t), t.type = \"DeclareTypeAlias\", t;\n            }\n          }, {\n            key: \"flowParseDeclareOpaqueType\",\n            value: function (t) {\n              return this.next(), this.flowParseOpaqueType(t, !0), t.type = \"DeclareOpaqueType\", t;\n            }\n          }, {\n            key: \"flowParseDeclareInterface\",\n            value: function (t) {\n              return this.next(), this.flowParseInterfaceish(t), this.finishNode(t, \"DeclareInterface\");\n            }\n          }, {\n            key: \"flowParseInterfaceish\",\n            value: function (t) {\n              var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n              if (t.id = this.flowParseRestrictedIdentifier(!e), this.scope.declareName(t.id.name, e ? 17 : 9, t.id.start), this.isRelational(\"<\") ? t.typeParameters = this.flowParseTypeParameterDeclaration() : t.typeParameters = null, t.extends = [], t.implements = [], t.mixins = [], this.eat(o._extends)) do {\n                t.extends.push(this.flowParseInterfaceExtends());\n              } while (!e && this.eat(o.comma));\n\n              if (this.isContextual(\"mixins\")) {\n                this.next();\n\n                do {\n                  t.mixins.push(this.flowParseInterfaceExtends());\n                } while (this.eat(o.comma));\n              }\n\n              if (this.isContextual(\"implements\")) {\n                this.next();\n\n                do {\n                  t.implements.push(this.flowParseInterfaceExtends());\n                } while (this.eat(o.comma));\n              }\n\n              t.body = this.flowParseObjectType({\n                allowStatic: e,\n                allowExact: !1,\n                allowSpread: !1,\n                allowProto: e,\n                allowInexact: !1\n              });\n            }\n          }, {\n            key: \"flowParseInterfaceExtends\",\n            value: function () {\n              var t = this.startNode();\n              return t.id = this.flowParseQualifiedTypeIdentifier(), this.isRelational(\"<\") ? t.typeParameters = this.flowParseTypeParameterInstantiation() : t.typeParameters = null, this.finishNode(t, \"InterfaceExtends\");\n            }\n          }, {\n            key: \"flowParseInterface\",\n            value: function (t) {\n              return this.flowParseInterfaceish(t), this.finishNode(t, \"InterfaceDeclaration\");\n            }\n          }, {\n            key: \"checkNotUnderscore\",\n            value: function (t) {\n              \"_\" === t && this.raise(this.state.start, \"`_` is only allowed as a type argument to call or new\");\n            }\n          }, {\n            key: \"checkReservedType\",\n            value: function (t, e) {\n              J.indexOf(t) > -1 && this.raise(e, \"Cannot overwrite reserved type \".concat(t));\n            }\n          }, {\n            key: \"flowParseRestrictedIdentifier\",\n            value: function (t) {\n              return this.checkReservedType(this.state.value, this.state.start), this.parseIdentifier(t);\n            }\n          }, {\n            key: \"flowParseTypeAlias\",\n            value: function (t) {\n              return t.id = this.flowParseRestrictedIdentifier(), this.scope.declareName(t.id.name, 9, t.id.start), this.isRelational(\"<\") ? t.typeParameters = this.flowParseTypeParameterDeclaration() : t.typeParameters = null, t.right = this.flowParseTypeInitialiser(o.eq), this.semicolon(), this.finishNode(t, \"TypeAlias\");\n            }\n          }, {\n            key: \"flowParseOpaqueType\",\n            value: function (t, e) {\n              return this.expectContextual(\"type\"), t.id = this.flowParseRestrictedIdentifier(!0), this.scope.declareName(t.id.name, 9, t.id.start), this.isRelational(\"<\") ? t.typeParameters = this.flowParseTypeParameterDeclaration() : t.typeParameters = null, t.supertype = null, this.match(o.colon) && (t.supertype = this.flowParseTypeInitialiser(o.colon)), t.impltype = null, e || (t.impltype = this.flowParseTypeInitialiser(o.eq)), this.semicolon(), this.finishNode(t, \"OpaqueType\");\n            }\n          }, {\n            key: \"flowParseTypeParameter\",\n            value: function () {\n              var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n                  e = this.state.start,\n                  s = this.startNode(),\n                  i = this.flowParseVariance(),\n                  a = this.flowParseTypeAnnotatableIdentifier();\n              return s.name = a.name, s.variance = i, s.bound = a.typeAnnotation, this.match(o.eq) ? (this.eat(o.eq), s.default = this.flowParseType()) : t && this.raise(e, \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\"), this.finishNode(s, \"TypeParameter\");\n            }\n          }, {\n            key: \"flowParseTypeParameterDeclaration\",\n            value: function () {\n              var t = this.state.inType,\n                  e = this.startNode();\n              e.params = [], this.state.inType = !0, this.isRelational(\"<\") || this.match(o.jsxTagStart) ? this.next() : this.unexpected();\n              var s = !1;\n\n              do {\n                var i = this.flowParseTypeParameter(s);\n                e.params.push(i), i.default && (s = !0), this.isRelational(\">\") || this.expect(o.comma);\n              } while (!this.isRelational(\">\"));\n\n              return this.expectRelational(\">\"), this.state.inType = t, this.finishNode(e, \"TypeParameterDeclaration\");\n            }\n          }, {\n            key: \"flowParseTypeParameterInstantiation\",\n            value: function () {\n              var t = this.startNode(),\n                  e = this.state.inType;\n              t.params = [], this.state.inType = !0, this.expectRelational(\"<\");\n              var s = this.state.noAnonFunctionType;\n\n              for (this.state.noAnonFunctionType = !1; !this.isRelational(\">\");) t.params.push(this.flowParseType()), this.isRelational(\">\") || this.expect(o.comma);\n\n              return this.state.noAnonFunctionType = s, this.expectRelational(\">\"), this.state.inType = e, this.finishNode(t, \"TypeParameterInstantiation\");\n            }\n          }, {\n            key: \"flowParseTypeParameterInstantiationCallOrNew\",\n            value: function () {\n              var t = this.startNode(),\n                  e = this.state.inType;\n\n              for (t.params = [], this.state.inType = !0, this.expectRelational(\"<\"); !this.isRelational(\">\");) t.params.push(this.flowParseTypeOrImplicitInstantiation()), this.isRelational(\">\") || this.expect(o.comma);\n\n              return this.expectRelational(\">\"), this.state.inType = e, this.finishNode(t, \"TypeParameterInstantiation\");\n            }\n          }, {\n            key: \"flowParseInterfaceType\",\n            value: function () {\n              var t = this.startNode();\n              if (this.expectContextual(\"interface\"), t.extends = [], this.eat(o._extends)) do {\n                t.extends.push(this.flowParseInterfaceExtends());\n              } while (this.eat(o.comma));\n              return t.body = this.flowParseObjectType({\n                allowStatic: !1,\n                allowExact: !1,\n                allowSpread: !1,\n                allowProto: !1,\n                allowInexact: !1\n              }), this.finishNode(t, \"InterfaceTypeAnnotation\");\n            }\n          }, {\n            key: \"flowParseObjectPropertyKey\",\n            value: function () {\n              return this.match(o.num) || this.match(o.string) ? this.parseExprAtom() : this.parseIdentifier(!0);\n            }\n          }, {\n            key: \"flowParseObjectTypeIndexer\",\n            value: function (t, e, s) {\n              return t.static = e, this.lookahead().type === o.colon ? (t.id = this.flowParseObjectPropertyKey(), t.key = this.flowParseTypeInitialiser()) : (t.id = null, t.key = this.flowParseType()), this.expect(o.bracketR), t.value = this.flowParseTypeInitialiser(), t.variance = s, this.finishNode(t, \"ObjectTypeIndexer\");\n            }\n          }, {\n            key: \"flowParseObjectTypeInternalSlot\",\n            value: function (t, e) {\n              return t.static = e, t.id = this.flowParseObjectPropertyKey(), this.expect(o.bracketR), this.expect(o.bracketR), this.isRelational(\"<\") || this.match(o.parenL) ? (t.method = !0, t.optional = !1, t.value = this.flowParseObjectTypeMethodish(this.startNodeAt(t.start, t.loc.start))) : (t.method = !1, this.eat(o.question) && (t.optional = !0), t.value = this.flowParseTypeInitialiser()), this.finishNode(t, \"ObjectTypeInternalSlot\");\n            }\n          }, {\n            key: \"flowParseObjectTypeMethodish\",\n            value: function (t) {\n              for (t.params = [], t.rest = null, t.typeParameters = null, this.isRelational(\"<\") && (t.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(o.parenL); !this.match(o.parenR) && !this.match(o.ellipsis);) t.params.push(this.flowParseFunctionTypeParam()), this.match(o.parenR) || this.expect(o.comma);\n\n              return this.eat(o.ellipsis) && (t.rest = this.flowParseFunctionTypeParam()), this.expect(o.parenR), t.returnType = this.flowParseTypeInitialiser(), this.finishNode(t, \"FunctionTypeAnnotation\");\n            }\n          }, {\n            key: \"flowParseObjectTypeCallProperty\",\n            value: function (t, e) {\n              var s = this.startNode();\n              return t.static = e, t.value = this.flowParseObjectTypeMethodish(s), this.finishNode(t, \"ObjectTypeCallProperty\");\n            }\n          }, {\n            key: \"flowParseObjectType\",\n            value: function (t) {\n              var e = t.allowStatic,\n                  s = t.allowExact,\n                  i = t.allowSpread,\n                  a = t.allowProto,\n                  r = t.allowInexact,\n                  n = this.state.inType;\n              this.state.inType = !0;\n              var h,\n                  u,\n                  l = this.startNode();\n              l.callProperties = [], l.properties = [], l.indexers = [], l.internalSlots = [];\n              var c = !1;\n\n              for (s && this.match(o.braceBarL) ? (this.expect(o.braceBarL), h = o.braceBarR, u = !0) : (this.expect(o.braceL), h = o.braceR, u = !1), l.exact = u; !this.match(h);) {\n                var p = !1,\n                    d = null,\n                    f = null,\n                    m = this.startNode();\n\n                if (a && this.isContextual(\"proto\")) {\n                  var y = this.lookahead();\n                  y.type !== o.colon && y.type !== o.question && (this.next(), d = this.state.start, e = !1);\n                }\n\n                if (e && this.isContextual(\"static\")) {\n                  var D = this.lookahead();\n                  D.type !== o.colon && D.type !== o.question && (this.next(), p = !0);\n                }\n\n                var v = this.flowParseVariance();\n                if (this.eat(o.bracketL)) null != d && this.unexpected(d), this.eat(o.bracketL) ? (v && this.unexpected(v.start), l.internalSlots.push(this.flowParseObjectTypeInternalSlot(m, p))) : l.indexers.push(this.flowParseObjectTypeIndexer(m, p, v));else if (this.match(o.parenL) || this.isRelational(\"<\")) null != d && this.unexpected(d), v && this.unexpected(v.start), l.callProperties.push(this.flowParseObjectTypeCallProperty(m, p));else {\n                  var x,\n                      g = \"init\";\n\n                  if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n                    var k = this.lookahead();\n                    k.type !== o.name && k.type !== o.string && k.type !== o.num || (g = this.state.value, this.next());\n                  }\n\n                  var P = this.flowParseObjectTypeProperty(m, p, d, v, g, i, null !== (x = r) && void 0 !== x ? x : !u);\n                  null === P ? (c = !0, f = this.state.lastTokStart) : l.properties.push(P);\n                }\n                this.flowObjectTypeSemicolon(), !f || this.match(o.braceR) || this.match(o.braceBarR) || this.raise(f, \"Explicit inexact syntax must appear at the end of an inexact object\");\n              }\n\n              this.expect(h), i && (l.inexact = c);\n              var b = this.finishNode(l, \"ObjectTypeAnnotation\");\n              return this.state.inType = n, b;\n            }\n          }, {\n            key: \"flowParseObjectTypeProperty\",\n            value: function (t, e, s, i, a, r, n) {\n              if (this.eat(o.ellipsis)) return this.match(o.comma) || this.match(o.semi) || this.match(o.braceR) || this.match(o.braceBarR) ? (r ? n || this.raise(this.state.lastTokStart, \"Explicit inexact syntax cannot appear inside an explicit exact object type\") : this.raise(this.state.lastTokStart, \"Explicit inexact syntax cannot appear in class or interface definitions\"), i && this.raise(i.start, \"Explicit inexact syntax cannot have variance\"), null) : (r || this.raise(this.state.lastTokStart, \"Spread operator cannot appear in class or interface definitions\"), null != s && this.unexpected(s), i && this.raise(i.start, \"Spread properties cannot have variance\"), t.argument = this.flowParseType(), this.finishNode(t, \"ObjectTypeSpreadProperty\"));\n              t.key = this.flowParseObjectPropertyKey(), t.static = e, t.proto = null != s, t.kind = a;\n              var h = !1;\n              return this.isRelational(\"<\") || this.match(o.parenL) ? (t.method = !0, null != s && this.unexpected(s), i && this.unexpected(i.start), t.value = this.flowParseObjectTypeMethodish(this.startNodeAt(t.start, t.loc.start)), \"get\" !== a && \"set\" !== a || this.flowCheckGetterSetterParams(t)) : (\"init\" !== a && this.unexpected(), t.method = !1, this.eat(o.question) && (h = !0), t.value = this.flowParseTypeInitialiser(), t.variance = i), t.optional = h, this.finishNode(t, \"ObjectTypeProperty\");\n            }\n          }, {\n            key: \"flowCheckGetterSetterParams\",\n            value: function (t) {\n              var e = \"get\" === t.kind ? 0 : 1,\n                  s = t.start;\n              t.value.params.length + (t.value.rest ? 1 : 0) !== e && (\"get\" === t.kind ? this.raise(s, \"getter must not have any formal parameters\") : this.raise(s, \"setter must have exactly one formal parameter\")), \"set\" === t.kind && t.value.rest && this.raise(s, \"setter function argument must not be a rest parameter\");\n            }\n          }, {\n            key: \"flowObjectTypeSemicolon\",\n            value: function () {\n              this.eat(o.semi) || this.eat(o.comma) || this.match(o.braceR) || this.match(o.braceBarR) || this.unexpected();\n            }\n          }, {\n            key: \"flowParseQualifiedTypeIdentifier\",\n            value: function (t, e, s) {\n              t = t || this.state.start, e = e || this.state.startLoc;\n\n              for (var i = s || this.parseIdentifier(); this.eat(o.dot);) {\n                var a = this.startNodeAt(t, e);\n                a.qualification = i, a.id = this.parseIdentifier(), i = this.finishNode(a, \"QualifiedTypeIdentifier\");\n              }\n\n              return i;\n            }\n          }, {\n            key: \"flowParseGenericType\",\n            value: function (t, e, s) {\n              var i = this.startNodeAt(t, e);\n              return i.typeParameters = null, i.id = this.flowParseQualifiedTypeIdentifier(t, e, s), this.isRelational(\"<\") && (i.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(i, \"GenericTypeAnnotation\");\n            }\n          }, {\n            key: \"flowParseTypeofType\",\n            value: function () {\n              var t = this.startNode();\n              return this.expect(o._typeof), t.argument = this.flowParsePrimaryType(), this.finishNode(t, \"TypeofTypeAnnotation\");\n            }\n          }, {\n            key: \"flowParseTupleType\",\n            value: function () {\n              var t = this.startNode();\n\n              for (t.types = [], this.expect(o.bracketL); this.state.pos < this.length && !this.match(o.bracketR) && (t.types.push(this.flowParseType()), !this.match(o.bracketR));) this.expect(o.comma);\n\n              return this.expect(o.bracketR), this.finishNode(t, \"TupleTypeAnnotation\");\n            }\n          }, {\n            key: \"flowParseFunctionTypeParam\",\n            value: function () {\n              var t = null,\n                  e = !1,\n                  s = null,\n                  i = this.startNode(),\n                  a = this.lookahead();\n              return a.type === o.colon || a.type === o.question ? (t = this.parseIdentifier(), this.eat(o.question) && (e = !0), s = this.flowParseTypeInitialiser()) : s = this.flowParseType(), i.name = t, i.optional = e, i.typeAnnotation = s, this.finishNode(i, \"FunctionTypeParam\");\n            }\n          }, {\n            key: \"reinterpretTypeAsFunctionTypeParam\",\n            value: function (t) {\n              var e = this.startNodeAt(t.start, t.loc.start);\n              return e.name = null, e.optional = !1, e.typeAnnotation = t, this.finishNode(e, \"FunctionTypeParam\");\n            }\n          }, {\n            key: \"flowParseFunctionTypeParams\",\n            value: function () {\n              for (var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = null; !this.match(o.parenR) && !this.match(o.ellipsis);) t.push(this.flowParseFunctionTypeParam()), this.match(o.parenR) || this.expect(o.comma);\n\n              return this.eat(o.ellipsis) && (e = this.flowParseFunctionTypeParam()), {\n                params: t,\n                rest: e\n              };\n            }\n          }, {\n            key: \"flowIdentToTypeAnnotation\",\n            value: function (t, e, s, i) {\n              switch (i.name) {\n                case \"any\":\n                  return this.finishNode(s, \"AnyTypeAnnotation\");\n\n                case \"bool\":\n                case \"boolean\":\n                  return this.finishNode(s, \"BooleanTypeAnnotation\");\n\n                case \"mixed\":\n                  return this.finishNode(s, \"MixedTypeAnnotation\");\n\n                case \"empty\":\n                  return this.finishNode(s, \"EmptyTypeAnnotation\");\n\n                case \"number\":\n                  return this.finishNode(s, \"NumberTypeAnnotation\");\n\n                case \"string\":\n                  return this.finishNode(s, \"StringTypeAnnotation\");\n\n                default:\n                  return this.checkNotUnderscore(i.name), this.flowParseGenericType(t, e, i);\n              }\n            }\n          }, {\n            key: \"flowParsePrimaryType\",\n            value: function () {\n              var t,\n                  s,\n                  i = this.state.start,\n                  a = this.state.startLoc,\n                  r = this.startNode(),\n                  n = !1,\n                  h = this.state.noAnonFunctionType;\n\n              switch (this.state.type) {\n                case o.name:\n                  return this.isContextual(\"interface\") ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(i, a, r, this.parseIdentifier());\n\n                case o.braceL:\n                  return this.flowParseObjectType({\n                    allowStatic: !1,\n                    allowExact: !1,\n                    allowSpread: !0,\n                    allowProto: !1,\n                    allowInexact: !0\n                  });\n\n                case o.braceBarL:\n                  return this.flowParseObjectType({\n                    allowStatic: !1,\n                    allowExact: !0,\n                    allowSpread: !0,\n                    allowProto: !1,\n                    allowInexact: !1\n                  });\n\n                case o.bracketL:\n                  return this.state.noAnonFunctionType = !1, s = this.flowParseTupleType(), this.state.noAnonFunctionType = h, s;\n\n                case o.relational:\n                  if (\"<\" === this.state.value) return r.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(o.parenL), t = this.flowParseFunctionTypeParams(), r.params = t.params, r.rest = t.rest, this.expect(o.parenR), this.expect(o.arrow), r.returnType = this.flowParseType(), this.finishNode(r, \"FunctionTypeAnnotation\");\n                  break;\n\n                case o.parenL:\n                  if (this.next(), !this.match(o.parenR) && !this.match(o.ellipsis)) if (this.match(o.name)) {\n                    var u = this.lookahead().type;\n                    n = u !== o.question && u !== o.colon;\n                  } else n = !0;\n\n                  if (n) {\n                    if (this.state.noAnonFunctionType = !1, s = this.flowParseType(), this.state.noAnonFunctionType = h, this.state.noAnonFunctionType || !(this.match(o.comma) || this.match(o.parenR) && this.lookahead().type === o.arrow)) return this.expect(o.parenR), s;\n                    this.eat(o.comma);\n                  }\n\n                  return t = s ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(s)]) : this.flowParseFunctionTypeParams(), r.params = t.params, r.rest = t.rest, this.expect(o.parenR), this.expect(o.arrow), r.returnType = this.flowParseType(), r.typeParameters = null, this.finishNode(r, \"FunctionTypeAnnotation\");\n\n                case o.string:\n                  return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n                case o._true:\n                case o._false:\n                  return r.value = this.match(o._true), this.next(), this.finishNode(r, \"BooleanLiteralTypeAnnotation\");\n\n                case o.plusMin:\n                  if (\"-\" === this.state.value) {\n                    if (this.next(), this.match(o.num)) return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", r.start, r.loc.start);\n                    if (this.match(o.bigint)) return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", r.start, r.loc.start);\n                    throw this.raise(this.state.start, 'Unexpected token, expected \"number\" or \"bigint\"');\n                  }\n\n                  this.unexpected();\n\n                case o.num:\n                  return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n                case o.bigint:\n                  return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n                case o._void:\n                  return this.next(), this.finishNode(r, \"VoidTypeAnnotation\");\n\n                case o._null:\n                  return this.next(), this.finishNode(r, \"NullLiteralTypeAnnotation\");\n\n                case o._this:\n                  return this.next(), this.finishNode(r, \"ThisTypeAnnotation\");\n\n                case o.star:\n                  return this.next(), this.finishNode(r, \"ExistsTypeAnnotation\");\n\n                default:\n                  if (\"typeof\" === this.state.type.keyword) return this.flowParseTypeofType();\n\n                  if (this.state.type.keyword) {\n                    var l = this.state.type.label;\n                    return this.next(), k(D(e.prototype), \"createIdentifier\", this).call(this, r, l);\n                  }\n\n              }\n\n              throw this.unexpected();\n            }\n          }, {\n            key: \"flowParsePostfixType\",\n            value: function () {\n              for (var t = this.state.start, e = this.state.startLoc, s = this.flowParsePrimaryType(); this.match(o.bracketL) && !this.canInsertSemicolon();) {\n                var i = this.startNodeAt(t, e);\n                i.elementType = s, this.expect(o.bracketL), this.expect(o.bracketR), s = this.finishNode(i, \"ArrayTypeAnnotation\");\n              }\n\n              return s;\n            }\n          }, {\n            key: \"flowParsePrefixType\",\n            value: function () {\n              var t = this.startNode();\n              return this.eat(o.question) ? (t.typeAnnotation = this.flowParsePrefixType(), this.finishNode(t, \"NullableTypeAnnotation\")) : this.flowParsePostfixType();\n            }\n          }, {\n            key: \"flowParseAnonFunctionWithoutParens\",\n            value: function () {\n              var t = this.flowParsePrefixType();\n\n              if (!this.state.noAnonFunctionType && this.eat(o.arrow)) {\n                var e = this.startNodeAt(t.start, t.loc.start);\n                return e.params = [this.reinterpretTypeAsFunctionTypeParam(t)], e.rest = null, e.returnType = this.flowParseType(), e.typeParameters = null, this.finishNode(e, \"FunctionTypeAnnotation\");\n              }\n\n              return t;\n            }\n          }, {\n            key: \"flowParseIntersectionType\",\n            value: function () {\n              var t = this.startNode();\n              this.eat(o.bitwiseAND);\n              var e = this.flowParseAnonFunctionWithoutParens();\n\n              for (t.types = [e]; this.eat(o.bitwiseAND);) t.types.push(this.flowParseAnonFunctionWithoutParens());\n\n              return 1 === t.types.length ? e : this.finishNode(t, \"IntersectionTypeAnnotation\");\n            }\n          }, {\n            key: \"flowParseUnionType\",\n            value: function () {\n              var t = this.startNode();\n              this.eat(o.bitwiseOR);\n              var e = this.flowParseIntersectionType();\n\n              for (t.types = [e]; this.eat(o.bitwiseOR);) t.types.push(this.flowParseIntersectionType());\n\n              return 1 === t.types.length ? e : this.finishNode(t, \"UnionTypeAnnotation\");\n            }\n          }, {\n            key: \"flowParseType\",\n            value: function () {\n              var t = this.state.inType;\n              this.state.inType = !0;\n              var e = this.flowParseUnionType();\n              return this.state.inType = t, this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType, e;\n            }\n          }, {\n            key: \"flowParseTypeOrImplicitInstantiation\",\n            value: function () {\n              if (this.state.type === o.name && \"_\" === this.state.value) {\n                var t = this.state.start,\n                    e = this.state.startLoc,\n                    s = this.parseIdentifier();\n                return this.flowParseGenericType(t, e, s);\n              }\n\n              return this.flowParseType();\n            }\n          }, {\n            key: \"flowParseTypeAnnotation\",\n            value: function () {\n              var t = this.startNode();\n              return t.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(t, \"TypeAnnotation\");\n            }\n          }, {\n            key: \"flowParseTypeAnnotatableIdentifier\",\n            value: function (t) {\n              var e = t ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n              return this.match(o.colon) && (e.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(e)), e;\n            }\n          }, {\n            key: \"typeCastToParameter\",\n            value: function (t) {\n              return t.expression.typeAnnotation = t.typeAnnotation, this.resetEndLocation(t.expression, t.typeAnnotation.end, t.typeAnnotation.loc.end), t.expression;\n            }\n          }, {\n            key: \"flowParseVariance\",\n            value: function () {\n              var t = null;\n              return this.match(o.plusMin) && (t = this.startNode(), \"+\" === this.state.value ? t.kind = \"plus\" : t.kind = \"minus\", this.next(), this.finishNode(t, \"Variance\")), t;\n            }\n          }, {\n            key: \"parseFunctionBody\",\n            value: function (t, s) {\n              var i = this,\n                  a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n              return s ? this.forwardNoArrowParamsConversionAt(t, function () {\n                return k(D(e.prototype), \"parseFunctionBody\", i).call(i, t, !0, a);\n              }) : k(D(e.prototype), \"parseFunctionBody\", this).call(this, t, !1, a);\n            }\n          }, {\n            key: \"parseFunctionBodyAndFinish\",\n            value: function (t, s) {\n              var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n\n              if (this.match(o.colon)) {\n                var a = this.startNode(),\n                    r = this.flowParseTypeAndPredicateInitialiser(),\n                    n = P(r, 2);\n                a.typeAnnotation = n[0], t.predicate = n[1], t.returnType = a.typeAnnotation ? this.finishNode(a, \"TypeAnnotation\") : null;\n              }\n\n              k(D(e.prototype), \"parseFunctionBodyAndFinish\", this).call(this, t, s, i);\n            }\n          }, {\n            key: \"parseStatement\",\n            value: function (t, s) {\n              if (this.state.strict && this.match(o.name) && \"interface\" === this.state.value) {\n                var i = this.startNode();\n                return this.next(), this.flowParseInterface(i);\n              }\n\n              if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n                var a = this.startNode();\n                return this.next(), this.flowParseEnumDeclaration(a);\n              }\n\n              var r = k(D(e.prototype), \"parseStatement\", this).call(this, t, s);\n              return void 0 !== this.flowPragma || this.isValidDirective(r) || (this.flowPragma = null), r;\n            }\n          }, {\n            key: \"parseExpressionStatement\",\n            value: function (t, s) {\n              if (\"Identifier\" === s.type) if (\"declare\" === s.name) {\n                if (this.match(o._class) || this.match(o.name) || this.match(o._function) || this.match(o._var) || this.match(o._export)) return this.flowParseDeclare(t);\n              } else if (this.match(o.name)) {\n                if (\"interface\" === s.name) return this.flowParseInterface(t);\n                if (\"type\" === s.name) return this.flowParseTypeAlias(t);\n                if (\"opaque\" === s.name) return this.flowParseOpaqueType(t, !1);\n              }\n              return k(D(e.prototype), \"parseExpressionStatement\", this).call(this, t, s);\n            }\n          }, {\n            key: \"shouldParseExportDeclaration\",\n            value: function () {\n              return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || k(D(e.prototype), \"shouldParseExportDeclaration\", this).call(this);\n            }\n          }, {\n            key: \"isExportDefaultSpecifier\",\n            value: function () {\n              return (!this.match(o.name) || !(\"type\" === this.state.value || \"interface\" === this.state.value || \"opaque\" === this.state.value || this.shouldParseEnums() && \"enum\" === this.state.value)) && k(D(e.prototype), \"isExportDefaultSpecifier\", this).call(this);\n            }\n          }, {\n            key: \"parseExportDefaultExpression\",\n            value: function () {\n              if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n                var t = this.startNode();\n                return this.next(), this.flowParseEnumDeclaration(t);\n              }\n\n              return k(D(e.prototype), \"parseExportDefaultExpression\", this).call(this);\n            }\n          }, {\n            key: \"parseConditional\",\n            value: function (t, s, i, a, r) {\n              var n = this;\n              if (!this.match(o.question)) return t;\n\n              if (r) {\n                var h = this.tryParse(function () {\n                  return k(D(e.prototype), \"parseConditional\", n).call(n, t, s, i, a);\n                });\n                return h.node ? (h.error && (this.state = h.failState), h.node) : (r.start = h.error.pos || this.state.start, t);\n              }\n\n              this.expect(o.question);\n              var u = this.state.clone(),\n                  l = this.state.noArrowAt,\n                  c = this.startNodeAt(i, a),\n                  p = this.tryParseConditionalConsequent(),\n                  d = p.consequent,\n                  f = p.failed,\n                  m = P(this.getArrowLikeExpressions(d), 2),\n                  y = m[0],\n                  v = m[1];\n\n              if (f || v.length > 0) {\n                var x = b(l);\n\n                if (v.length > 0) {\n                  this.state = u, this.state.noArrowAt = x;\n\n                  for (var g = 0; g < v.length; g++) x.push(v[g].start);\n\n                  var E = this.tryParseConditionalConsequent();\n                  d = E.consequent, f = E.failed;\n                  var C = P(this.getArrowLikeExpressions(d), 2);\n                  y = C[0], v = C[1];\n                }\n\n                if (f && y.length > 1 && this.raise(u.start, \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\"), f && 1 === y.length) {\n                  this.state = u, this.state.noArrowAt = x.concat(y[0].start);\n                  var A = this.tryParseConditionalConsequent();\n                  d = A.consequent, f = A.failed;\n                }\n              }\n\n              return this.getArrowLikeExpressions(d, !0), this.state.noArrowAt = l, this.expect(o.colon), c.test = t, c.consequent = d, c.alternate = this.forwardNoArrowParamsConversionAt(c, function () {\n                return n.parseMaybeAssign(s, void 0, void 0, void 0);\n              }), this.finishNode(c, \"ConditionalExpression\");\n            }\n          }, {\n            key: \"tryParseConditionalConsequent\",\n            value: function () {\n              this.state.noArrowParamsConversionAt.push(this.state.start);\n              var t = this.parseMaybeAssign(),\n                  e = !this.match(o.colon);\n              return this.state.noArrowParamsConversionAt.pop(), {\n                consequent: t,\n                failed: e\n              };\n            }\n          }, {\n            key: \"getArrowLikeExpressions\",\n            value: function (t, e) {\n              for (var s = this, i = [t], a = []; 0 !== i.length;) {\n                var r = i.pop();\n                \"ArrowFunctionExpression\" === r.type ? (r.typeParameters || !r.returnType ? this.finishArrowValidation(r) : a.push(r), i.push(r.body)) : \"ConditionalExpression\" === r.type && (i.push(r.consequent), i.push(r.alternate));\n              }\n\n              return e ? (a.forEach(function (t) {\n                return s.finishArrowValidation(t);\n              }), [a, []]) : function (t, e) {\n                for (var s = [], i = [], a = 0; a < t.length; a++) (e(t[a], a, t) ? s : i).push(t[a]);\n\n                return [s, i];\n              }(a, function (t) {\n                return t.params.every(function (t) {\n                  return s.isAssignable(t, !0);\n                });\n              });\n            }\n          }, {\n            key: \"finishArrowValidation\",\n            value: function (t) {\n              var s;\n              this.toAssignableList(t.params, !0, \"arrow function parameters\", null === (s = t.extra) || void 0 === s ? void 0 : s.trailingComma), this.scope.enter(16 | p(!1, !1)), k(D(e.prototype), \"checkParams\", this).call(this, t, !1, !0), this.scope.exit();\n            }\n          }, {\n            key: \"forwardNoArrowParamsConversionAt\",\n            value: function (t, e) {\n              var s;\n              return -1 !== this.state.noArrowParamsConversionAt.indexOf(t.start) ? (this.state.noArrowParamsConversionAt.push(this.state.start), s = e(), this.state.noArrowParamsConversionAt.pop()) : s = e(), s;\n            }\n          }, {\n            key: \"parseParenItem\",\n            value: function (t, s, i) {\n              if (t = k(D(e.prototype), \"parseParenItem\", this).call(this, t, s, i), this.eat(o.question) && (t.optional = !0, this.resetEndLocation(t)), this.match(o.colon)) {\n                var a = this.startNodeAt(s, i);\n                return a.expression = t, a.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(a, \"TypeCastExpression\");\n              }\n\n              return t;\n            }\n          }, {\n            key: \"assertModuleNodeAllowed\",\n            value: function (t) {\n              \"ImportDeclaration\" === t.type && (\"type\" === t.importKind || \"typeof\" === t.importKind) || \"ExportNamedDeclaration\" === t.type && \"type\" === t.exportKind || \"ExportAllDeclaration\" === t.type && \"type\" === t.exportKind || k(D(e.prototype), \"assertModuleNodeAllowed\", this).call(this, t);\n            }\n          }, {\n            key: \"parseExport\",\n            value: function (t) {\n              var s = k(D(e.prototype), \"parseExport\", this).call(this, t);\n              return \"ExportNamedDeclaration\" !== s.type && \"ExportAllDeclaration\" !== s.type || (s.exportKind = s.exportKind || \"value\"), s;\n            }\n          }, {\n            key: \"parseExportDeclaration\",\n            value: function (t) {\n              if (this.isContextual(\"type\")) {\n                t.exportKind = \"type\";\n                var s = this.startNode();\n                return this.next(), this.match(o.braceL) ? (t.specifiers = this.parseExportSpecifiers(), this.parseExportFrom(t), null) : this.flowParseTypeAlias(s);\n              }\n\n              if (this.isContextual(\"opaque\")) {\n                t.exportKind = \"type\";\n                var i = this.startNode();\n                return this.next(), this.flowParseOpaqueType(i, !1);\n              }\n\n              if (this.isContextual(\"interface\")) {\n                t.exportKind = \"type\";\n                var a = this.startNode();\n                return this.next(), this.flowParseInterface(a);\n              }\n\n              if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n                t.exportKind = \"value\";\n                var r = this.startNode();\n                return this.next(), this.flowParseEnumDeclaration(r);\n              }\n\n              return k(D(e.prototype), \"parseExportDeclaration\", this).call(this, t);\n            }\n          }, {\n            key: \"eatExportStar\",\n            value: function (t) {\n              return !!k(D(e.prototype), \"eatExportStar\", this).apply(this, arguments) || !(!this.isContextual(\"type\") || this.lookahead().type !== o.star) && (t.exportKind = \"type\", this.next(), this.next(), !0);\n            }\n          }, {\n            key: \"maybeParseExportNamespaceSpecifier\",\n            value: function (t) {\n              var s = this.state.start,\n                  i = k(D(e.prototype), \"maybeParseExportNamespaceSpecifier\", this).call(this, t);\n              return i && \"type\" === t.exportKind && this.unexpected(s), i;\n            }\n          }, {\n            key: \"parseClassId\",\n            value: function (t, s, i) {\n              k(D(e.prototype), \"parseClassId\", this).call(this, t, s, i), this.isRelational(\"<\") && (t.typeParameters = this.flowParseTypeParameterDeclaration());\n            }\n          }, {\n            key: \"getTokenFromCode\",\n            value: function (t) {\n              var s = this.input.charCodeAt(this.state.pos + 1);\n              return 123 === t && 124 === s ? this.finishOp(o.braceBarL, 2) : !this.state.inType || 62 !== t && 60 !== t ? function (t, e) {\n                return 64 === t && 64 === e;\n              }(t, s) ? (this.state.isIterator = !0, k(D(e.prototype), \"readWord\", this).call(this)) : k(D(e.prototype), \"getTokenFromCode\", this).call(this, t) : this.finishOp(o.relational, 1);\n            }\n          }, {\n            key: \"isAssignable\",\n            value: function (t, e) {\n              var s = this;\n\n              switch (t.type) {\n                case \"Identifier\":\n                case \"ObjectPattern\":\n                case \"ArrayPattern\":\n                case \"AssignmentPattern\":\n                  return !0;\n\n                case \"ObjectExpression\":\n                  var i = t.properties.length - 1;\n                  return t.properties.every(function (t, e) {\n                    return \"ObjectMethod\" !== t.type && (e === i || \"SpreadElement\" === t.type) && s.isAssignable(t);\n                  });\n\n                case \"ObjectProperty\":\n                  return this.isAssignable(t.value);\n\n                case \"SpreadElement\":\n                  return this.isAssignable(t.argument);\n\n                case \"ArrayExpression\":\n                  return t.elements.every(function (t) {\n                    return s.isAssignable(t);\n                  });\n\n                case \"AssignmentExpression\":\n                  return \"=\" === t.operator;\n\n                case \"ParenthesizedExpression\":\n                case \"TypeCastExpression\":\n                  return this.isAssignable(t.expression);\n\n                case \"MemberExpression\":\n                case \"OptionalMemberExpression\":\n                  return !e;\n\n                default:\n                  return !1;\n              }\n            }\n          }, {\n            key: \"toAssignable\",\n            value: function (t, s, i) {\n              return \"TypeCastExpression\" === t.type ? k(D(e.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(t), s, i) : k(D(e.prototype), \"toAssignable\", this).call(this, t, s, i);\n            }\n          }, {\n            key: \"toAssignableList\",\n            value: function (t, s, i, a) {\n              for (var r = 0; r < t.length; r++) {\n                var n = t[r];\n                n && \"TypeCastExpression\" === n.type && (t[r] = this.typeCastToParameter(n));\n              }\n\n              return k(D(e.prototype), \"toAssignableList\", this).call(this, t, s, i, a);\n            }\n          }, {\n            key: \"toReferencedList\",\n            value: function (t, e) {\n              for (var s = 0; s < t.length; s++) {\n                var i = t[s];\n                !i || \"TypeCastExpression\" !== i.type || i.extra && i.extra.parenthesized || !(t.length > 1) && e || this.raise(i.typeAnnotation.start, \"The type cast expression is expected to be wrapped with parenthesis\");\n              }\n\n              return t;\n            }\n          }, {\n            key: \"checkLVal\",\n            value: function (t) {\n              var s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 64,\n                  i = arguments.length > 2 ? arguments[2] : void 0,\n                  a = arguments.length > 3 ? arguments[3] : void 0;\n              if (\"TypeCastExpression\" !== t.type) return k(D(e.prototype), \"checkLVal\", this).call(this, t, s, i, a);\n            }\n          }, {\n            key: \"parseClassProperty\",\n            value: function (t) {\n              return this.match(o.colon) && (t.typeAnnotation = this.flowParseTypeAnnotation()), k(D(e.prototype), \"parseClassProperty\", this).call(this, t);\n            }\n          }, {\n            key: \"parseClassPrivateProperty\",\n            value: function (t) {\n              return this.match(o.colon) && (t.typeAnnotation = this.flowParseTypeAnnotation()), k(D(e.prototype), \"parseClassPrivateProperty\", this).call(this, t);\n            }\n          }, {\n            key: \"isClassMethod\",\n            value: function () {\n              return this.isRelational(\"<\") || k(D(e.prototype), \"isClassMethod\", this).call(this);\n            }\n          }, {\n            key: \"isClassProperty\",\n            value: function () {\n              return this.match(o.colon) || k(D(e.prototype), \"isClassProperty\", this).call(this);\n            }\n          }, {\n            key: \"isNonstaticConstructor\",\n            value: function (t) {\n              return !this.match(o.colon) && k(D(e.prototype), \"isNonstaticConstructor\", this).call(this, t);\n            }\n          }, {\n            key: \"pushClassMethod\",\n            value: function (t, s, i, a, r, n) {\n              s.variance && this.unexpected(s.variance.start), delete s.variance, this.isRelational(\"<\") && (s.typeParameters = this.flowParseTypeParameterDeclaration()), k(D(e.prototype), \"pushClassMethod\", this).call(this, t, s, i, a, r, n);\n            }\n          }, {\n            key: \"pushClassPrivateMethod\",\n            value: function (t, s, i, a) {\n              s.variance && this.unexpected(s.variance.start), delete s.variance, this.isRelational(\"<\") && (s.typeParameters = this.flowParseTypeParameterDeclaration()), k(D(e.prototype), \"pushClassPrivateMethod\", this).call(this, t, s, i, a);\n            }\n          }, {\n            key: \"parseClassSuper\",\n            value: function (t) {\n              if (k(D(e.prototype), \"parseClassSuper\", this).call(this, t), t.superClass && this.isRelational(\"<\") && (t.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(\"implements\")) {\n                this.next();\n                var s = t.implements = [];\n\n                do {\n                  var i = this.startNode();\n                  i.id = this.flowParseRestrictedIdentifier(!0), this.isRelational(\"<\") ? i.typeParameters = this.flowParseTypeParameterInstantiation() : i.typeParameters = null, s.push(this.finishNode(i, \"ClassImplements\"));\n                } while (this.eat(o.comma));\n              }\n            }\n          }, {\n            key: \"parsePropertyName\",\n            value: function (t) {\n              var s = this.flowParseVariance(),\n                  i = k(D(e.prototype), \"parsePropertyName\", this).call(this, t);\n              return t.variance = s, i;\n            }\n          }, {\n            key: \"parseObjPropValue\",\n            value: function (t, s, i, a, r, n, h, u) {\n              var l;\n              t.variance && this.unexpected(t.variance.start), delete t.variance, this.isRelational(\"<\") && (l = this.flowParseTypeParameterDeclaration(), this.match(o.parenL) || this.unexpected()), k(D(e.prototype), \"parseObjPropValue\", this).call(this, t, s, i, a, r, n, h, u), l && ((t.value || t).typeParameters = l);\n            }\n          }, {\n            key: \"parseAssignableListItemTypes\",\n            value: function (t) {\n              return this.eat(o.question) && (\"Identifier\" !== t.type && this.raise(t.start, \"A binding pattern parameter cannot be optional in an implementation signature.\"), t.optional = !0), this.match(o.colon) && (t.typeAnnotation = this.flowParseTypeAnnotation()), this.resetEndLocation(t), t;\n            }\n          }, {\n            key: \"parseMaybeDefault\",\n            value: function (t, s, i) {\n              var a = k(D(e.prototype), \"parseMaybeDefault\", this).call(this, t, s, i);\n              return \"AssignmentPattern\" === a.type && a.typeAnnotation && a.right.start < a.typeAnnotation.start && this.raise(a.typeAnnotation.start, \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\"), a;\n            }\n          }, {\n            key: \"shouldParseDefaultImport\",\n            value: function (t) {\n              return H(t) ? G(this.state) : k(D(e.prototype), \"shouldParseDefaultImport\", this).call(this, t);\n            }\n          }, {\n            key: \"parseImportSpecifierLocal\",\n            value: function (t, e, s, i) {\n              e.local = H(t) ? this.flowParseRestrictedIdentifier(!0) : this.parseIdentifier(), this.checkLVal(e.local, 9, void 0, i), t.specifiers.push(this.finishNode(e, s));\n            }\n          }, {\n            key: \"maybeParseDefaultImportSpecifier\",\n            value: function (t) {\n              t.importKind = \"value\";\n              var s = null;\n\n              if (this.match(o._typeof) ? s = \"typeof\" : this.isContextual(\"type\") && (s = \"type\"), s) {\n                var i = this.lookahead();\n                \"type\" === s && i.type === o.star && this.unexpected(i.start), (G(i) || i.type === o.braceL || i.type === o.star) && (this.next(), t.importKind = s);\n              }\n\n              return k(D(e.prototype), \"maybeParseDefaultImportSpecifier\", this).call(this, t);\n            }\n          }, {\n            key: \"parseImportSpecifier\",\n            value: function (t) {\n              var e = this.startNode(),\n                  s = this.state.start,\n                  i = this.parseIdentifier(!0),\n                  a = null;\n              \"type\" === i.name ? a = \"type\" : \"typeof\" === i.name && (a = \"typeof\");\n              var r = !1;\n\n              if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n                var n = this.parseIdentifier(!0);\n                null === a || this.match(o.name) || this.state.type.keyword ? (e.imported = i, e.importKind = null, e.local = this.parseIdentifier()) : (e.imported = n, e.importKind = a, e.local = n.__clone());\n              } else null !== a && (this.match(o.name) || this.state.type.keyword) ? (e.imported = this.parseIdentifier(!0), e.importKind = a, this.eatContextual(\"as\") ? e.local = this.parseIdentifier() : (r = !0, e.local = e.imported.__clone())) : (r = !0, e.imported = i, e.importKind = null, e.local = e.imported.__clone());\n\n              var h = H(t),\n                  u = H(e);\n              h && u && this.raise(s, \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\"), (h || u) && this.checkReservedType(e.local.name, e.local.start), !r || h || u || this.checkReservedWord(e.local.name, e.start, !0, !0), this.checkLVal(e.local, 9, void 0, \"import specifier\"), t.specifiers.push(this.finishNode(e, \"ImportSpecifier\"));\n            }\n          }, {\n            key: \"parseFunctionParams\",\n            value: function (t, s) {\n              var i = t.kind;\n              \"get\" !== i && \"set\" !== i && this.isRelational(\"<\") && (t.typeParameters = this.flowParseTypeParameterDeclaration()), k(D(e.prototype), \"parseFunctionParams\", this).call(this, t, s);\n            }\n          }, {\n            key: \"parseVarId\",\n            value: function (t, s) {\n              k(D(e.prototype), \"parseVarId\", this).call(this, t, s), this.match(o.colon) && (t.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(t.id));\n            }\n          }, {\n            key: \"parseAsyncArrowFromCallExpression\",\n            value: function (t, s) {\n              if (this.match(o.colon)) {\n                var i = this.state.noAnonFunctionType;\n                this.state.noAnonFunctionType = !0, t.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = i;\n              }\n\n              return k(D(e.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, t, s);\n            }\n          }, {\n            key: \"shouldParseAsyncArrow\",\n            value: function () {\n              return this.match(o.colon) || k(D(e.prototype), \"shouldParseAsyncArrow\", this).call(this);\n            }\n          }, {\n            key: \"parseMaybeAssign\",\n            value: function (t, s, i, a) {\n              var r,\n                  n = this,\n                  h = null;\n\n              if (this.hasPlugin(\"jsx\") && (this.match(o.jsxTagStart) || this.isRelational(\"<\"))) {\n                if (h = this.state.clone(), !(r = this.tryParse(function () {\n                  return k(D(e.prototype), \"parseMaybeAssign\", n).call(n, t, s, i, a);\n                }, h)).error) return r.node;\n                var u = this.state.context;\n                u[u.length - 1] === F.j_oTag ? u.length -= 2 : u[u.length - 1] === F.j_expr && (u.length -= 1);\n              }\n\n              if (r && r.error || this.isRelational(\"<\")) {\n                var l;\n                h = h || this.state.clone();\n                var c = this.tryParse(function () {\n                  l = n.flowParseTypeParameterDeclaration();\n                  var r = n.forwardNoArrowParamsConversionAt(l, function () {\n                    return k(D(e.prototype), \"parseMaybeAssign\", n).call(n, t, s, i, a);\n                  });\n                  return r.typeParameters = l, n.resetStartLocationFromNode(r, l), r;\n                }, h),\n                    p = c.node && \"ArrowFunctionExpression\" === c.node.type ? c.node : null;\n                if (!c.error && p) return p;\n                if (r && r.node) return this.state = r.failState, r.node;\n                if (p) return this.state = c.failState, p;\n                if (r && r.thrown) throw r.error;\n                if (c.thrown) throw c.error;\n                throw this.raise(l.start, \"Expected an arrow function after this type parameter declaration\");\n              }\n\n              return k(D(e.prototype), \"parseMaybeAssign\", this).call(this, t, s, i, a);\n            }\n          }, {\n            key: \"parseArrow\",\n            value: function (t) {\n              var s = this;\n\n              if (this.match(o.colon)) {\n                var i = this.tryParse(function () {\n                  var e = s.state.noAnonFunctionType;\n                  s.state.noAnonFunctionType = !0;\n                  var i = s.startNode(),\n                      a = P(s.flowParseTypeAndPredicateInitialiser(), 2);\n                  return i.typeAnnotation = a[0], t.predicate = a[1], s.state.noAnonFunctionType = e, s.canInsertSemicolon() && s.unexpected(), s.match(o.arrow) || s.unexpected(), i;\n                });\n                if (i.thrown) return null;\n                i.error && (this.state = i.failState), t.returnType = i.node.typeAnnotation ? this.finishNode(i.node, \"TypeAnnotation\") : null;\n              }\n\n              return k(D(e.prototype), \"parseArrow\", this).call(this, t);\n            }\n          }, {\n            key: \"shouldParseArrow\",\n            value: function () {\n              return this.match(o.colon) || k(D(e.prototype), \"shouldParseArrow\", this).call(this);\n            }\n          }, {\n            key: \"setArrowFunctionParameters\",\n            value: function (t, s) {\n              -1 !== this.state.noArrowParamsConversionAt.indexOf(t.start) ? t.params = s : k(D(e.prototype), \"setArrowFunctionParameters\", this).call(this, t, s);\n            }\n          }, {\n            key: \"checkParams\",\n            value: function (t, s, i) {\n              if (!i || -1 === this.state.noArrowParamsConversionAt.indexOf(t.start)) return k(D(e.prototype), \"checkParams\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"parseParenAndDistinguishExpression\",\n            value: function (t) {\n              return k(D(e.prototype), \"parseParenAndDistinguishExpression\", this).call(this, t && -1 === this.state.noArrowAt.indexOf(this.state.start));\n            }\n          }, {\n            key: \"parseSubscripts\",\n            value: function (t, s, i, a) {\n              var r = this;\n\n              if (\"Identifier\" === t.type && \"async\" === t.name && -1 !== this.state.noArrowAt.indexOf(s)) {\n                this.next();\n                var n = this.startNodeAt(s, i);\n                n.callee = t, n.arguments = this.parseCallExpressionArguments(o.parenR, !1), t = this.finishNode(n, \"CallExpression\");\n              } else if (\"Identifier\" === t.type && \"async\" === t.name && this.isRelational(\"<\")) {\n                var h = this.state.clone(),\n                    u = this.tryParse(function (t) {\n                  return r.parseAsyncArrowWithTypeParameters(s, i) || t();\n                }, h);\n                if (!u.error && !u.aborted) return u.node;\n                var l = this.tryParse(function () {\n                  return k(D(e.prototype), \"parseSubscripts\", r).call(r, t, s, i, a);\n                }, h);\n                if (l.node && !l.error) return l.node;\n                if (u.node) return this.state = u.failState, u.node;\n                if (l.node) return this.state = l.failState, l.node;\n                throw u.error || l.error;\n              }\n\n              return k(D(e.prototype), \"parseSubscripts\", this).call(this, t, s, i, a);\n            }\n          }, {\n            key: \"parseSubscript\",\n            value: function (t, s, i, a, r) {\n              var n = this;\n\n              if (this.match(o.questionDot) && this.isLookaheadRelational(\"<\")) {\n                if (this.expectPlugin(\"optionalChaining\"), r.optionalChainMember = !0, a) return r.stop = !0, t;\n                this.next();\n                var h = this.startNodeAt(s, i);\n                return h.callee = t, h.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(o.parenL), h.arguments = this.parseCallExpressionArguments(o.parenR, !1), h.optional = !0, this.finishCallExpression(h, !0);\n              }\n\n              if (!a && this.shouldParseTypes() && this.isRelational(\"<\")) {\n                var u = this.startNodeAt(s, i);\n                u.callee = t;\n                var l = this.tryParse(function () {\n                  return u.typeArguments = n.flowParseTypeParameterInstantiationCallOrNew(), n.expect(o.parenL), u.arguments = n.parseCallExpressionArguments(o.parenR, !1), r.optionalChainMember && (u.optional = !1), n.finishCallExpression(u, r.optionalChainMember);\n                });\n                if (l.node) return l.error && (this.state = l.failState), l.node;\n              }\n\n              return k(D(e.prototype), \"parseSubscript\", this).call(this, t, s, i, a, r);\n            }\n          }, {\n            key: \"parseNewArguments\",\n            value: function (t) {\n              var s = this,\n                  i = null;\n              this.shouldParseTypes() && this.isRelational(\"<\") && (i = this.tryParse(function () {\n                return s.flowParseTypeParameterInstantiationCallOrNew();\n              }).node), t.typeArguments = i, k(D(e.prototype), \"parseNewArguments\", this).call(this, t);\n            }\n          }, {\n            key: \"parseAsyncArrowWithTypeParameters\",\n            value: function (t, e) {\n              var s = this.startNodeAt(t, e);\n              if (this.parseFunctionParams(s), this.parseArrow(s)) return this.parseArrowExpression(s, void 0, !0);\n            }\n          }, {\n            key: \"readToken_mult_modulo\",\n            value: function (t) {\n              var s = this.input.charCodeAt(this.state.pos + 1);\n              if (42 === t && 47 === s && this.state.hasFlowComment) return this.state.hasFlowComment = !1, this.state.pos += 2, void this.nextToken();\n              k(D(e.prototype), \"readToken_mult_modulo\", this).call(this, t);\n            }\n          }, {\n            key: \"readToken_pipe_amp\",\n            value: function (t) {\n              var s = this.input.charCodeAt(this.state.pos + 1);\n              124 !== t || 125 !== s ? k(D(e.prototype), \"readToken_pipe_amp\", this).call(this, t) : this.finishOp(o.braceBarR, 2);\n            }\n          }, {\n            key: \"parseTopLevel\",\n            value: function (t, s) {\n              var i = k(D(e.prototype), \"parseTopLevel\", this).call(this, t, s);\n              return this.state.hasFlowComment && this.raise(this.state.pos, \"Unterminated flow-comment\"), i;\n            }\n          }, {\n            key: \"skipBlockComment\",\n            value: function () {\n              if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) return this.state.hasFlowComment && this.unexpected(null, \"Cannot have a flow comment inside another flow comment\"), this.hasFlowCommentCompletion(), this.state.pos += this.skipFlowComment(), void (this.state.hasFlowComment = !0);\n\n              if (this.state.hasFlowComment) {\n                var t = this.input.indexOf(\"*-/\", this.state.pos += 2);\n                if (-1 === t) throw this.raise(this.state.pos - 2, \"Unterminated comment\");\n                this.state.pos = t + 3;\n              } else k(D(e.prototype), \"skipBlockComment\", this).call(this);\n            }\n          }, {\n            key: \"skipFlowComment\",\n            value: function () {\n              for (var t = this.state.pos, e = 2; -1 !== [32, 9].indexOf(this.input.charCodeAt(t + e));) e++;\n\n              var s = this.input.charCodeAt(e + t),\n                  i = this.input.charCodeAt(e + t + 1);\n              return 58 === s && 58 === i ? e + 2 : \"flow-include\" === this.input.slice(e + t, e + t + 12) ? e + 12 : 58 === s && 58 !== i && e;\n            }\n          }, {\n            key: \"hasFlowCommentCompletion\",\n            value: function () {\n              if (-1 === this.input.indexOf(\"*/\", this.state.pos)) throw this.raise(this.state.pos, \"Unterminated comment\");\n            }\n          }, {\n            key: \"flowEnumErrorBooleanMemberNotInitialized\",\n            value: function (t, e) {\n              var s = e.enumName,\n                  i = e.memberName;\n              this.raise(t, \"Boolean enum members need to be initialized. Use either `\".concat(i, \" = true,` \") + \"or `\".concat(i, \" = false,` in enum `\").concat(s, \"`.\"));\n            }\n          }, {\n            key: \"flowEnumErrorInvalidMemberName\",\n            value: function (t, e) {\n              var s = e.enumName,\n                  i = e.memberName,\n                  a = i[0].toUpperCase() + i.slice(1);\n              this.raise(t, \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \" + \"`\".concat(i, \"`, consider using `\").concat(a, \"`, in enum `\").concat(s, \"`.\"));\n            }\n          }, {\n            key: \"flowEnumErrorDuplicateMemberName\",\n            value: function (t, e) {\n              var s = e.enumName,\n                  i = e.memberName;\n              this.raise(t, \"Enum member names need to be unique, but the name `\".concat(i, \"` has already been used \") + \"before in enum `\".concat(s, \"`.\"));\n            }\n          }, {\n            key: \"flowEnumErrorInconsistentMemberValues\",\n            value: function (t, e) {\n              var s = e.enumName;\n              this.raise(t, \"Enum `\".concat(s, \"` has inconsistent member initializers. Either use no initializers, or \") + \"consistently use literals (either booleans, numbers, or strings) for all member initializers.\");\n            }\n          }, {\n            key: \"flowEnumErrorInvalidExplicitType\",\n            value: function (t, e) {\n              var s = e.enumName,\n                  i = e.suppliedType,\n                  a = \"Use one of `boolean`, `number`, `string`, or `symbol` in \" + \"enum `\".concat(s, \"`.\"),\n                  r = null === i ? \"Supplied enum type is not valid. \".concat(a) : \"Enum type `\".concat(i, \"` is not valid. \").concat(a);\n              return this.raise(t, r);\n            }\n          }, {\n            key: \"flowEnumErrorInvalidMemberInitializer\",\n            value: function (t, e) {\n              var s = e.enumName,\n                  i = e.explicitType,\n                  a = e.memberName,\n                  r = null;\n\n              switch (i) {\n                case \"boolean\":\n                case \"number\":\n                case \"string\":\n                  r = \"Enum `\".concat(s, \"` has type `\").concat(i, \"`, so the initializer of \") + \"`\".concat(a, \"` needs to be a \").concat(i, \" literal.\");\n                  break;\n\n                case \"symbol\":\n                  r = \"Symbol enum members cannot be initialized. Use `\".concat(a, \",` in \") + \"enum `\".concat(s, \"`.\");\n                  break;\n\n                default:\n                  r = \"The enum member initializer for `\".concat(a, \"` needs to be a literal (either \") + \"a boolean, number, or string) in enum `\".concat(s, \"`.\");\n              }\n\n              return this.raise(t, r);\n            }\n          }, {\n            key: \"flowEnumErrorNumberMemberNotInitialized\",\n            value: function (t, e) {\n              var s = e.enumName,\n                  i = e.memberName;\n              this.raise(t, \"Number enum members need to be initialized, e.g. `\".concat(i, \" = 1` in enum `\").concat(s, \"`.\"));\n            }\n          }, {\n            key: \"flowEnumErrorStringMemberInconsistentlyInitailized\",\n            value: function (t, e) {\n              var s = e.enumName;\n              this.raise(t, \"String enum members need to consistently either all use initializers, or use no initializers, \" + \"in enum `\".concat(s, \"`.\"));\n            }\n          }, {\n            key: \"flowEnumMemberInit\",\n            value: function () {\n              var t = this,\n                  e = this.state.start,\n                  s = function () {\n                return t.match(o.comma) || t.match(o.braceR);\n              };\n\n              switch (this.state.type) {\n                case o.num:\n                  var i = this.parseLiteral(this.state.value, \"NumericLiteral\");\n                  return s() ? {\n                    type: \"number\",\n                    pos: i.start,\n                    value: i\n                  } : {\n                    type: \"invalid\",\n                    pos: e\n                  };\n\n                case o.string:\n                  var a = this.parseLiteral(this.state.value, \"StringLiteral\");\n                  return s() ? {\n                    type: \"string\",\n                    pos: a.start,\n                    value: a\n                  } : {\n                    type: \"invalid\",\n                    pos: e\n                  };\n\n                case o._true:\n                case o._false:\n                  var r = this.parseBooleanLiteral();\n                  return s() ? {\n                    type: \"boolean\",\n                    pos: r.start,\n                    value: r\n                  } : {\n                    type: \"invalid\",\n                    pos: e\n                  };\n\n                default:\n                  return {\n                    type: \"invalid\",\n                    pos: e\n                  };\n              }\n            }\n          }, {\n            key: \"flowEnumMemberRaw\",\n            value: function () {\n              var t = this.state.start;\n              return {\n                id: this.parseIdentifier(!0),\n                init: this.eat(o.eq) ? this.flowEnumMemberInit() : {\n                  type: \"none\",\n                  pos: t\n                }\n              };\n            }\n          }, {\n            key: \"flowEnumCheckExplicitTypeMismatch\",\n            value: function (t, e, s) {\n              var i = e.explicitType;\n              null !== i && i !== s && this.flowEnumErrorInvalidMemberInitializer(t, e);\n            }\n          }, {\n            key: \"flowEnumMembers\",\n            value: function (t) {\n              for (var e = t.enumName, s = t.explicitType, i = new Set(), a = {\n                booleanMembers: [],\n                numberMembers: [],\n                stringMembers: [],\n                defaultedMembers: []\n              }; !this.match(o.braceR);) {\n                var r = this.startNode(),\n                    n = this.flowEnumMemberRaw(),\n                    h = n.id,\n                    u = n.init,\n                    l = h.name;\n\n                if (\"\" !== l) {\n                  /^[a-z]/.test(l) && this.flowEnumErrorInvalidMemberName(h.start, {\n                    enumName: e,\n                    memberName: l\n                  }), i.has(l) && this.flowEnumErrorDuplicateMemberName(h.start, {\n                    enumName: e,\n                    memberName: l\n                  }), i.add(l);\n                  var c = {\n                    enumName: e,\n                    explicitType: s,\n                    memberName: l\n                  };\n\n                  switch (r.id = h, u.type) {\n                    case \"boolean\":\n                      this.flowEnumCheckExplicitTypeMismatch(u.pos, c, \"boolean\"), r.init = u.value, a.booleanMembers.push(this.finishNode(r, \"EnumBooleanMember\"));\n                      break;\n\n                    case \"number\":\n                      this.flowEnumCheckExplicitTypeMismatch(u.pos, c, \"number\"), r.init = u.value, a.numberMembers.push(this.finishNode(r, \"EnumNumberMember\"));\n                      break;\n\n                    case \"string\":\n                      this.flowEnumCheckExplicitTypeMismatch(u.pos, c, \"string\"), r.init = u.value, a.stringMembers.push(this.finishNode(r, \"EnumStringMember\"));\n                      break;\n\n                    case \"invalid\":\n                      throw this.flowEnumErrorInvalidMemberInitializer(u.pos, c);\n\n                    case \"none\":\n                      switch (s) {\n                        case \"boolean\":\n                          this.flowEnumErrorBooleanMemberNotInitialized(u.pos, c);\n                          break;\n\n                        case \"number\":\n                          this.flowEnumErrorNumberMemberNotInitialized(u.pos, c);\n                          break;\n\n                        default:\n                          a.defaultedMembers.push(this.finishNode(r, \"EnumDefaultedMember\"));\n                      }\n\n                  }\n\n                  this.match(o.braceR) || this.expect(o.comma);\n                }\n              }\n\n              return a;\n            }\n          }, {\n            key: \"flowEnumStringBody\",\n            value: function (t, e, s, i) {\n              var a = i.enumName;\n              if (0 === e.length) t.members = s;else if (0 === s.length) t.members = e;else if (s.length > e.length) {\n                t.members = s;\n\n                for (var r = 0; r < e.length; r++) {\n                  var n = e[r];\n                  this.flowEnumErrorStringMemberInconsistentlyInitailized(n.start, {\n                    enumName: a\n                  });\n                }\n              } else {\n                t.members = e;\n\n                for (var o = 0; o < s.length; o++) {\n                  var h = s[o];\n                  this.flowEnumErrorStringMemberInconsistentlyInitailized(h.start, {\n                    enumName: a\n                  });\n                }\n              }\n              return this.finishNode(t, \"EnumStringBody\");\n            }\n          }, {\n            key: \"flowEnumParseExplicitType\",\n            value: function (t) {\n              var e = t.enumName;\n\n              if (this.eatContextual(\"of\")) {\n                if (!this.match(o.name)) throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n                  enumName: e,\n                  suppliedType: null\n                });\n                var s = this.state.value;\n                return this.next(), \"boolean\" !== s && \"number\" !== s && \"string\" !== s && \"symbol\" !== s && this.flowEnumErrorInvalidExplicitType(this.state.start, {\n                  enumName: e,\n                  suppliedType: s\n                }), s;\n              }\n\n              return null;\n            }\n          }, {\n            key: \"flowParseEnumDeclaration\",\n            value: function (t) {\n              var e = this,\n                  s = this.parseIdentifier();\n              t.id = s;\n              var i = s.name,\n                  a = this.flowEnumParseExplicitType({\n                enumName: i\n              });\n              this.expect(o.braceL);\n              var r = this.startNode(),\n                  n = this.flowEnumMembers({\n                enumName: i,\n                explicitType: a\n              });\n\n              switch (a) {\n                case \"boolean\":\n                  r.explicitType = !0, r.members = n.booleanMembers, t.body = this.finishNode(r, \"EnumBooleanBody\");\n                  break;\n\n                case \"number\":\n                  r.explicitType = !0, r.members = n.numberMembers, t.body = this.finishNode(r, \"EnumNumberBody\");\n                  break;\n\n                case \"string\":\n                  r.explicitType = !0, t.body = this.flowEnumStringBody(r, n.stringMembers, n.defaultedMembers, {\n                    enumName: i\n                  });\n                  break;\n\n                case \"symbol\":\n                  r.members = n.defaultedMembers, t.body = this.finishNode(r, \"EnumSymbolBody\");\n                  break;\n\n                default:\n                  var h = function () {\n                    return r.members = [], e.finishNode(r, \"EnumStringBody\");\n                  };\n\n                  r.explicitType = !1;\n                  var u = n.booleanMembers.length,\n                      l = n.numberMembers.length,\n                      c = n.stringMembers.length,\n                      p = n.defaultedMembers.length;\n                  if (u || l || c || p) {\n                    if (u || l) {\n                      if (!l && !c && u >= p) {\n                        r.members = n.booleanMembers, t.body = this.finishNode(r, \"EnumBooleanBody\");\n\n                        for (var d = 0, f = n.defaultedMembers; d < f.length; d++) {\n                          var m = f[d];\n                          this.flowEnumErrorBooleanMemberNotInitialized(m.start, {\n                            enumName: i,\n                            memberName: m.id.name\n                          });\n                        }\n                      } else if (!u && !c && l >= p) {\n                        r.members = n.numberMembers, t.body = this.finishNode(r, \"EnumNumberBody\");\n\n                        for (var y = 0, D = n.defaultedMembers; y < D.length; y++) {\n                          var v = D[y];\n                          this.flowEnumErrorNumberMemberNotInitialized(v.start, {\n                            enumName: i,\n                            memberName: v.id.name\n                          });\n                        }\n                      } else t.body = h(), this.flowEnumErrorInconsistentMemberValues(s.start, {\n                        enumName: i\n                      });\n                    } else t.body = this.flowEnumStringBody(r, n.stringMembers, n.defaultedMembers, {\n                      enumName: i\n                    });\n                  } else t.body = h();\n              }\n\n              return this.expect(o.braceR), this.finishNode(t, \"EnumDeclaration\");\n            }\n          }]), e;\n        }(t);\n      },\n      typescript: function (t) {\n        return function (t) {\n          function e() {\n            return d(this, e), g(this, D(e).apply(this, arguments));\n          }\n\n          return y(e, t), m(e, [{\n            key: \"getScopeHandler\",\n            value: function () {\n              return nt;\n            }\n          }, {\n            key: \"tsIsIdentifier\",\n            value: function () {\n              return this.match(o.name);\n            }\n          }, {\n            key: \"tsNextTokenCanFollowModifier\",\n            value: function () {\n              return this.next(), !(this.hasPrecedingLineBreak() || this.match(o.parenL) || this.match(o.parenR) || this.match(o.colon) || this.match(o.eq) || this.match(o.question) || this.match(o.bang));\n            }\n          }, {\n            key: \"tsParseModifier\",\n            value: function (t) {\n              if (this.match(o.name)) {\n                var e = this.state.value;\n                return -1 !== t.indexOf(e) && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)) ? e : void 0;\n              }\n            }\n          }, {\n            key: \"tsParseModifiers\",\n            value: function (t) {\n              for (var e = Object.create(null);;) {\n                var s = this.state.start,\n                    i = this.tsParseModifier(t);\n                if (!i) break;\n                Object.hasOwnProperty.call(e, i) && this.raise(s, \"Duplicate modifier: '\".concat(i, \"'\")), e[i] = !0;\n              }\n\n              return e;\n            }\n          }, {\n            key: \"tsIsListTerminator\",\n            value: function (t) {\n              switch (t) {\n                case \"EnumMembers\":\n                case \"TypeMembers\":\n                  return this.match(o.braceR);\n\n                case \"HeritageClauseElement\":\n                  return this.match(o.braceL);\n\n                case \"TupleElementTypes\":\n                  return this.match(o.bracketR);\n\n                case \"TypeParametersOrArguments\":\n                  return this.isRelational(\">\");\n              }\n\n              throw new Error(\"Unreachable\");\n            }\n          }, {\n            key: \"tsParseList\",\n            value: function (t, e) {\n              for (var s = []; !this.tsIsListTerminator(t);) s.push(e());\n\n              return s;\n            }\n          }, {\n            key: \"tsParseDelimitedList\",\n            value: function (t, e) {\n              return ot(this.tsParseDelimitedListWorker(t, e, !0));\n            }\n          }, {\n            key: \"tsParseDelimitedListWorker\",\n            value: function (t, e, s) {\n              for (var i = []; !this.tsIsListTerminator(t);) {\n                var a = e();\n                if (null == a) return;\n\n                if (i.push(a), !this.eat(o.comma)) {\n                  if (this.tsIsListTerminator(t)) break;\n                  return void (s && this.expect(o.comma));\n                }\n              }\n\n              return i;\n            }\n          }, {\n            key: \"tsParseBracketedList\",\n            value: function (t, e, s, i) {\n              i || (s ? this.expect(o.bracketL) : this.expectRelational(\"<\"));\n              var a = this.tsParseDelimitedList(t, e);\n              return s ? this.expect(o.bracketR) : this.expectRelational(\">\"), a;\n            }\n          }, {\n            key: \"tsParseImportType\",\n            value: function () {\n              var t = this.startNode();\n              return this.expect(o._import), this.expect(o.parenL), this.match(o.string) || this.raise(this.state.start, \"Argument in a type import must be a string literal\"), t.argument = this.parseExprAtom(), this.expect(o.parenR), this.eat(o.dot) && (t.qualifier = this.tsParseEntityName(!0)), this.isRelational(\"<\") && (t.typeParameters = this.tsParseTypeArguments()), this.finishNode(t, \"TSImportType\");\n            }\n          }, {\n            key: \"tsParseEntityName\",\n            value: function (t) {\n              for (var e = this.parseIdentifier(); this.eat(o.dot);) {\n                var s = this.startNodeAtNode(e);\n                s.left = e, s.right = this.parseIdentifier(t), e = this.finishNode(s, \"TSQualifiedName\");\n              }\n\n              return e;\n            }\n          }, {\n            key: \"tsParseTypeReference\",\n            value: function () {\n              var t = this.startNode();\n              return t.typeName = this.tsParseEntityName(!1), !this.hasPrecedingLineBreak() && this.isRelational(\"<\") && (t.typeParameters = this.tsParseTypeArguments()), this.finishNode(t, \"TSTypeReference\");\n            }\n          }, {\n            key: \"tsParseThisTypePredicate\",\n            value: function (t) {\n              this.next();\n              var e = this.startNodeAtNode(t);\n              return e.parameterName = t, e.typeAnnotation = this.tsParseTypeAnnotation(!1), this.finishNode(e, \"TSTypePredicate\");\n            }\n          }, {\n            key: \"tsParseThisTypeNode\",\n            value: function () {\n              var t = this.startNode();\n              return this.next(), this.finishNode(t, \"TSThisType\");\n            }\n          }, {\n            key: \"tsParseTypeQuery\",\n            value: function () {\n              var t = this.startNode();\n              return this.expect(o._typeof), this.match(o._import) ? t.exprName = this.tsParseImportType() : t.exprName = this.tsParseEntityName(!0), this.finishNode(t, \"TSTypeQuery\");\n            }\n          }, {\n            key: \"tsParseTypeParameter\",\n            value: function () {\n              var t = this.startNode();\n              return t.name = this.parseIdentifierName(t.start), t.constraint = this.tsEatThenParseType(o._extends), t.default = this.tsEatThenParseType(o.eq), this.finishNode(t, \"TSTypeParameter\");\n            }\n          }, {\n            key: \"tsTryParseTypeParameters\",\n            value: function () {\n              if (this.isRelational(\"<\")) return this.tsParseTypeParameters();\n            }\n          }, {\n            key: \"tsParseTypeParameters\",\n            value: function () {\n              var t = this.startNode();\n              return this.isRelational(\"<\") || this.match(o.jsxTagStart) ? this.next() : this.unexpected(), t.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), !1, !0), this.finishNode(t, \"TSTypeParameterDeclaration\");\n            }\n          }, {\n            key: \"tsTryNextParseConstantContext\",\n            value: function () {\n              return this.lookahead().type === o._const ? (this.next(), this.tsParseTypeReference()) : null;\n            }\n          }, {\n            key: \"tsFillSignature\",\n            value: function (t, e) {\n              var s = t === o.arrow;\n              e.typeParameters = this.tsTryParseTypeParameters(), this.expect(o.parenL), e.parameters = this.tsParseBindingListForSignature(), s ? e.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(t) : this.match(t) && (e.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(t));\n            }\n          }, {\n            key: \"tsParseBindingListForSignature\",\n            value: function () {\n              var t = this;\n              return this.parseBindingList(o.parenR, 41).map(function (e) {\n                return \"Identifier\" !== e.type && \"RestElement\" !== e.type && \"ObjectPattern\" !== e.type && \"ArrayPattern\" !== e.type && t.raise(e.start, \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern,\" + \"instead got \".concat(e.type)), e;\n              });\n            }\n          }, {\n            key: \"tsParseTypeMemberSemicolon\",\n            value: function () {\n              this.eat(o.comma) || this.semicolon();\n            }\n          }, {\n            key: \"tsParseSignatureMember\",\n            value: function (t, e) {\n              return this.tsFillSignature(o.colon, e), this.tsParseTypeMemberSemicolon(), this.finishNode(e, t);\n            }\n          }, {\n            key: \"tsIsUnambiguouslyIndexSignature\",\n            value: function () {\n              return this.next(), this.eat(o.name) && this.match(o.colon);\n            }\n          }, {\n            key: \"tsTryParseIndexSignature\",\n            value: function (t) {\n              if (this.match(o.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))) {\n                this.expect(o.bracketL);\n                var e = this.parseIdentifier();\n                e.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(e), this.expect(o.bracketR), t.parameters = [e];\n                var s = this.tsTryParseTypeAnnotation();\n                return s && (t.typeAnnotation = s), this.tsParseTypeMemberSemicolon(), this.finishNode(t, \"TSIndexSignature\");\n              }\n            }\n          }, {\n            key: \"tsParsePropertyOrMethodSignature\",\n            value: function (t, e) {\n              this.eat(o.question) && (t.optional = !0);\n              var s = t;\n\n              if (e || !this.match(o.parenL) && !this.isRelational(\"<\")) {\n                var i = s;\n                e && (i.readonly = !0);\n                var a = this.tsTryParseTypeAnnotation();\n                return a && (i.typeAnnotation = a), this.tsParseTypeMemberSemicolon(), this.finishNode(i, \"TSPropertySignature\");\n              }\n\n              var r = s;\n              return this.tsFillSignature(o.colon, r), this.tsParseTypeMemberSemicolon(), this.finishNode(r, \"TSMethodSignature\");\n            }\n          }, {\n            key: \"tsParseTypeMember\",\n            value: function () {\n              var t = this.startNode();\n              if (this.match(o.parenL) || this.isRelational(\"<\")) return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", t);\n\n              if (this.match(o._new)) {\n                var e = this.startNode();\n                return this.next(), this.match(o.parenL) || this.isRelational(\"<\") ? this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", t) : (t.key = this.createIdentifier(e, \"new\"), this.tsParsePropertyOrMethodSignature(t, !1));\n              }\n\n              var s = !!this.tsParseModifier([\"readonly\"]),\n                  i = this.tsTryParseIndexSignature(t);\n              return i ? (s && (t.readonly = !0), i) : (this.parsePropertyName(t), this.tsParsePropertyOrMethodSignature(t, s));\n            }\n          }, {\n            key: \"tsParseTypeLiteral\",\n            value: function () {\n              var t = this.startNode();\n              return t.members = this.tsParseObjectTypeMembers(), this.finishNode(t, \"TSTypeLiteral\");\n            }\n          }, {\n            key: \"tsParseObjectTypeMembers\",\n            value: function () {\n              this.expect(o.braceL);\n              var t = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n              return this.expect(o.braceR), t;\n            }\n          }, {\n            key: \"tsIsStartOfMappedType\",\n            value: function () {\n              return this.next(), this.eat(o.plusMin) ? this.isContextual(\"readonly\") : (this.isContextual(\"readonly\") && this.next(), !!this.match(o.bracketL) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(o._in))));\n            }\n          }, {\n            key: \"tsParseMappedTypeParameter\",\n            value: function () {\n              var t = this.startNode();\n              return t.name = this.parseIdentifierName(t.start), t.constraint = this.tsExpectThenParseType(o._in), this.finishNode(t, \"TSTypeParameter\");\n            }\n          }, {\n            key: \"tsParseMappedType\",\n            value: function () {\n              var t = this.startNode();\n              return this.expect(o.braceL), this.match(o.plusMin) ? (t.readonly = this.state.value, this.next(), this.expectContextual(\"readonly\")) : this.eatContextual(\"readonly\") && (t.readonly = !0), this.expect(o.bracketL), t.typeParameter = this.tsParseMappedTypeParameter(), this.expect(o.bracketR), this.match(o.plusMin) ? (t.optional = this.state.value, this.next(), this.expect(o.question)) : this.eat(o.question) && (t.optional = !0), t.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(o.braceR), this.finishNode(t, \"TSMappedType\");\n            }\n          }, {\n            key: \"tsParseTupleType\",\n            value: function () {\n              var t = this,\n                  e = this.startNode();\n              e.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), !0, !1);\n              var s = !1;\n              return e.elementTypes.forEach(function (e) {\n                \"TSOptionalType\" === e.type ? s = !0 : s && \"TSRestType\" !== e.type && t.raise(e.start, \"A required element cannot follow an optional element.\");\n              }), this.finishNode(e, \"TSTupleType\");\n            }\n          }, {\n            key: \"tsParseTupleElementType\",\n            value: function () {\n              if (this.match(o.ellipsis)) {\n                var t = this.startNode();\n                return this.next(), t.typeAnnotation = this.tsParseType(), this.checkCommaAfterRest(93), this.finishNode(t, \"TSRestType\");\n              }\n\n              var e = this.tsParseType();\n\n              if (this.eat(o.question)) {\n                var s = this.startNodeAtNode(e);\n                return s.typeAnnotation = e, this.finishNode(s, \"TSOptionalType\");\n              }\n\n              return e;\n            }\n          }, {\n            key: \"tsParseParenthesizedType\",\n            value: function () {\n              var t = this.startNode();\n              return this.expect(o.parenL), t.typeAnnotation = this.tsParseType(), this.expect(o.parenR), this.finishNode(t, \"TSParenthesizedType\");\n            }\n          }, {\n            key: \"tsParseFunctionOrConstructorType\",\n            value: function (t) {\n              var e = this.startNode();\n              return \"TSConstructorType\" === t && this.expect(o._new), this.tsFillSignature(o.arrow, e), this.finishNode(e, t);\n            }\n          }, {\n            key: \"tsParseLiteralTypeNode\",\n            value: function () {\n              var t = this,\n                  e = this.startNode();\n              return e.literal = function () {\n                switch (t.state.type) {\n                  case o.num:\n                  case o.string:\n                  case o._true:\n                  case o._false:\n                    return t.parseExprAtom();\n\n                  default:\n                    throw t.unexpected();\n                }\n              }(), this.finishNode(e, \"TSLiteralType\");\n            }\n          }, {\n            key: \"tsParseTemplateLiteralType\",\n            value: function () {\n              var t = this.startNode(),\n                  e = this.parseTemplate(!1);\n              return e.expressions.length > 0 && this.raise(e.expressions[0].start, \"Template literal types cannot have any substitution\"), t.literal = e, this.finishNode(t, \"TSLiteralType\");\n            }\n          }, {\n            key: \"tsParseNonArrayType\",\n            value: function () {\n              switch (this.state.type) {\n                case o.name:\n                case o._void:\n                case o._null:\n                  var t = this.match(o._void) ? \"TSVoidKeyword\" : this.match(o._null) ? \"TSNullKeyword\" : function (t) {\n                    switch (t) {\n                      case \"any\":\n                        return \"TSAnyKeyword\";\n\n                      case \"boolean\":\n                        return \"TSBooleanKeyword\";\n\n                      case \"bigint\":\n                        return \"TSBigIntKeyword\";\n\n                      case \"never\":\n                        return \"TSNeverKeyword\";\n\n                      case \"number\":\n                        return \"TSNumberKeyword\";\n\n                      case \"object\":\n                        return \"TSObjectKeyword\";\n\n                      case \"string\":\n                        return \"TSStringKeyword\";\n\n                      case \"symbol\":\n                        return \"TSSymbolKeyword\";\n\n                      case \"undefined\":\n                        return \"TSUndefinedKeyword\";\n\n                      case \"unknown\":\n                        return \"TSUnknownKeyword\";\n\n                      default:\n                        return;\n                    }\n                  }(this.state.value);\n\n                  if (void 0 !== t && 46 !== this.lookaheadCharCode()) {\n                    var e = this.startNode();\n                    return this.next(), this.finishNode(e, t);\n                  }\n\n                  return this.tsParseTypeReference();\n\n                case o.string:\n                case o.num:\n                case o._true:\n                case o._false:\n                  return this.tsParseLiteralTypeNode();\n\n                case o.plusMin:\n                  if (\"-\" === this.state.value) {\n                    var s = this.startNode();\n                    if (this.lookahead().type !== o.num) throw this.unexpected();\n                    return s.literal = this.parseMaybeUnary(), this.finishNode(s, \"TSLiteralType\");\n                  }\n\n                  break;\n\n                case o._this:\n                  var i = this.tsParseThisTypeNode();\n                  return this.isContextual(\"is\") && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(i) : i;\n\n                case o._typeof:\n                  return this.tsParseTypeQuery();\n\n                case o._import:\n                  return this.tsParseImportType();\n\n                case o.braceL:\n                  return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n                case o.bracketL:\n                  return this.tsParseTupleType();\n\n                case o.parenL:\n                  return this.tsParseParenthesizedType();\n\n                case o.backQuote:\n                  return this.tsParseTemplateLiteralType();\n              }\n\n              throw this.unexpected();\n            }\n          }, {\n            key: \"tsParseArrayTypeOrHigher\",\n            value: function () {\n              for (var t = this.tsParseNonArrayType(); !this.hasPrecedingLineBreak() && this.eat(o.bracketL);) if (this.match(o.bracketR)) {\n                var e = this.startNodeAtNode(t);\n                e.elementType = t, this.expect(o.bracketR), t = this.finishNode(e, \"TSArrayType\");\n              } else {\n                var s = this.startNodeAtNode(t);\n                s.objectType = t, s.indexType = this.tsParseType(), this.expect(o.bracketR), t = this.finishNode(s, \"TSIndexedAccessType\");\n              }\n\n              return t;\n            }\n          }, {\n            key: \"tsParseTypeOperator\",\n            value: function (t) {\n              var e = this.startNode();\n              return this.expectContextual(t), e.operator = t, e.typeAnnotation = this.tsParseTypeOperatorOrHigher(), \"readonly\" === t && this.tsCheckTypeAnnotationForReadOnly(e), this.finishNode(e, \"TSTypeOperator\");\n            }\n          }, {\n            key: \"tsCheckTypeAnnotationForReadOnly\",\n            value: function (t) {\n              switch (t.typeAnnotation.type) {\n                case \"TSTupleType\":\n                case \"TSArrayType\":\n                  return;\n\n                default:\n                  this.raise(t.start, \"'readonly' type modifier is only permitted on array and tuple literal types.\");\n              }\n            }\n          }, {\n            key: \"tsParseInferType\",\n            value: function () {\n              var t = this.startNode();\n              this.expectContextual(\"infer\");\n              var e = this.startNode();\n              return e.name = this.parseIdentifierName(e.start), t.typeParameter = this.finishNode(e, \"TSTypeParameter\"), this.finishNode(t, \"TSInferType\");\n            }\n          }, {\n            key: \"tsParseTypeOperatorOrHigher\",\n            value: function () {\n              var t = this,\n                  e = [\"keyof\", \"unique\", \"readonly\"].find(function (e) {\n                return t.isContextual(e);\n              });\n              return e ? this.tsParseTypeOperator(e) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n            }\n          }, {\n            key: \"tsParseUnionOrIntersectionType\",\n            value: function (t, e, s) {\n              this.eat(s);\n              var i = e();\n\n              if (this.match(s)) {\n                for (var a = [i]; this.eat(s);) a.push(e());\n\n                var r = this.startNodeAtNode(i);\n                r.types = a, i = this.finishNode(r, t);\n              }\n\n              return i;\n            }\n          }, {\n            key: \"tsParseIntersectionTypeOrHigher\",\n            value: function () {\n              return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), o.bitwiseAND);\n            }\n          }, {\n            key: \"tsParseUnionTypeOrHigher\",\n            value: function () {\n              return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), o.bitwiseOR);\n            }\n          }, {\n            key: \"tsIsStartOfFunctionType\",\n            value: function () {\n              return !!this.isRelational(\"<\") || this.match(o.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n            }\n          }, {\n            key: \"tsSkipParameterStart\",\n            value: function () {\n              if (this.match(o.name) || this.match(o._this)) return this.next(), !0;\n\n              if (this.match(o.braceL)) {\n                var t = 1;\n\n                for (this.next(); t > 0;) this.match(o.braceL) ? ++t : this.match(o.braceR) && --t, this.next();\n\n                return !0;\n              }\n\n              if (this.match(o.bracketL)) {\n                var e = 1;\n\n                for (this.next(); e > 0;) this.match(o.bracketL) ? ++e : this.match(o.bracketR) && --e, this.next();\n\n                return !0;\n              }\n\n              return !1;\n            }\n          }, {\n            key: \"tsIsUnambiguouslyStartOfFunctionType\",\n            value: function () {\n              if (this.next(), this.match(o.parenR) || this.match(o.ellipsis)) return !0;\n\n              if (this.tsSkipParameterStart()) {\n                if (this.match(o.colon) || this.match(o.comma) || this.match(o.question) || this.match(o.eq)) return !0;\n                if (this.match(o.parenR) && (this.next(), this.match(o.arrow))) return !0;\n              }\n\n              return !1;\n            }\n          }, {\n            key: \"tsParseTypeOrTypePredicateAnnotation\",\n            value: function (t) {\n              var e = this;\n              return this.tsInType(function () {\n                var s = e.startNode();\n                e.expect(t);\n                var i = e.tsTryParse(e.tsParseTypePredicateAsserts.bind(e)),\n                    a = e.tsIsIdentifier() && e.tsTryParse(e.tsParseTypePredicatePrefix.bind(e));\n\n                if (!a) {\n                  if (!i) return e.tsParseTypeAnnotation(!1, s);\n                  var r = e.startNodeAtNode(s);\n                  return r.parameterName = e.parseIdentifier(), r.asserts = i, s.typeAnnotation = e.finishNode(r, \"TSTypePredicate\"), e.finishNode(s, \"TSTypeAnnotation\");\n                }\n\n                var n = e.tsParseTypeAnnotation(!1),\n                    o = e.startNodeAtNode(s);\n                return o.parameterName = a, o.typeAnnotation = n, o.asserts = i, s.typeAnnotation = e.finishNode(o, \"TSTypePredicate\"), e.finishNode(s, \"TSTypeAnnotation\");\n              });\n            }\n          }, {\n            key: \"tsTryParseTypeOrTypePredicateAnnotation\",\n            value: function () {\n              return this.match(o.colon) ? this.tsParseTypeOrTypePredicateAnnotation(o.colon) : void 0;\n            }\n          }, {\n            key: \"tsTryParseTypeAnnotation\",\n            value: function () {\n              return this.match(o.colon) ? this.tsParseTypeAnnotation() : void 0;\n            }\n          }, {\n            key: \"tsTryParseType\",\n            value: function () {\n              return this.tsEatThenParseType(o.colon);\n            }\n          }, {\n            key: \"tsParseTypePredicatePrefix\",\n            value: function () {\n              var t = this.parseIdentifier();\n              if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) return this.next(), t;\n            }\n          }, {\n            key: \"tsParseTypePredicateAsserts\",\n            value: function () {\n              return !!this.tsIsIdentifier() && !(\"asserts\" !== this.parseIdentifier().name || this.hasPrecedingLineBreak() || !this.tsIsIdentifier());\n            }\n          }, {\n            key: \"tsParseTypeAnnotation\",\n            value: function () {\n              var t = this,\n                  e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],\n                  s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.startNode();\n              return this.tsInType(function () {\n                e && t.expect(o.colon), s.typeAnnotation = t.tsParseType();\n              }), this.finishNode(s, \"TSTypeAnnotation\");\n            }\n          }, {\n            key: \"tsParseType\",\n            value: function () {\n              ht(this.state.inType);\n              var t = this.tsParseNonConditionalType();\n              if (this.hasPrecedingLineBreak() || !this.eat(o._extends)) return t;\n              var e = this.startNodeAtNode(t);\n              return e.checkType = t, e.extendsType = this.tsParseNonConditionalType(), this.expect(o.question), e.trueType = this.tsParseType(), this.expect(o.colon), e.falseType = this.tsParseType(), this.finishNode(e, \"TSConditionalType\");\n            }\n          }, {\n            key: \"tsParseNonConditionalType\",\n            value: function () {\n              return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType(\"TSFunctionType\") : this.match(o._new) ? this.tsParseFunctionOrConstructorType(\"TSConstructorType\") : this.tsParseUnionTypeOrHigher();\n            }\n          }, {\n            key: \"tsParseTypeAssertion\",\n            value: function () {\n              var t = this.startNode(),\n                  e = this.tsTryNextParseConstantContext();\n              return t.typeAnnotation = e || this.tsNextThenParseType(), this.expectRelational(\">\"), t.expression = this.parseMaybeUnary(), this.finishNode(t, \"TSTypeAssertion\");\n            }\n          }, {\n            key: \"tsParseHeritageClause\",\n            value: function (t) {\n              var e = this.state.start,\n                  s = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n              return s.length || this.raise(e, \"'\".concat(t, \"' list cannot be empty.\")), s;\n            }\n          }, {\n            key: \"tsParseExpressionWithTypeArguments\",\n            value: function () {\n              var t = this.startNode();\n              return t.expression = this.tsParseEntityName(!1), this.isRelational(\"<\") && (t.typeParameters = this.tsParseTypeArguments()), this.finishNode(t, \"TSExpressionWithTypeArguments\");\n            }\n          }, {\n            key: \"tsParseInterfaceDeclaration\",\n            value: function (t) {\n              t.id = this.parseIdentifier(), this.checkLVal(t.id, 130, void 0, \"typescript interface declaration\"), t.typeParameters = this.tsTryParseTypeParameters(), this.eat(o._extends) && (t.extends = this.tsParseHeritageClause(\"extends\"));\n              var e = this.startNode();\n              return e.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), t.body = this.finishNode(e, \"TSInterfaceBody\"), this.finishNode(t, \"TSInterfaceDeclaration\");\n            }\n          }, {\n            key: \"tsParseTypeAliasDeclaration\",\n            value: function (t) {\n              return t.id = this.parseIdentifier(), this.checkLVal(t.id, 2, void 0, \"typescript type alias\"), t.typeParameters = this.tsTryParseTypeParameters(), t.typeAnnotation = this.tsExpectThenParseType(o.eq), this.semicolon(), this.finishNode(t, \"TSTypeAliasDeclaration\");\n            }\n          }, {\n            key: \"tsInNoContext\",\n            value: function (t) {\n              var e = this.state.context;\n              this.state.context = [e[0]];\n\n              try {\n                return t();\n              } finally {\n                this.state.context = e;\n              }\n            }\n          }, {\n            key: \"tsInType\",\n            value: function (t) {\n              var e = this.state.inType;\n              this.state.inType = !0;\n\n              try {\n                return t();\n              } finally {\n                this.state.inType = e;\n              }\n            }\n          }, {\n            key: \"tsEatThenParseType\",\n            value: function (t) {\n              return this.match(t) ? this.tsNextThenParseType() : void 0;\n            }\n          }, {\n            key: \"tsExpectThenParseType\",\n            value: function (t) {\n              var e = this;\n              return this.tsDoThenParseType(function () {\n                return e.expect(t);\n              });\n            }\n          }, {\n            key: \"tsNextThenParseType\",\n            value: function () {\n              var t = this;\n              return this.tsDoThenParseType(function () {\n                return t.next();\n              });\n            }\n          }, {\n            key: \"tsDoThenParseType\",\n            value: function (t) {\n              var e = this;\n              return this.tsInType(function () {\n                return t(), e.tsParseType();\n              });\n            }\n          }, {\n            key: \"tsParseEnumMember\",\n            value: function () {\n              var t = this.startNode();\n              return t.id = this.match(o.string) ? this.parseExprAtom() : this.parseIdentifier(!0), this.eat(o.eq) && (t.initializer = this.parseMaybeAssign()), this.finishNode(t, \"TSEnumMember\");\n            }\n          }, {\n            key: \"tsParseEnumDeclaration\",\n            value: function (t, e) {\n              return e && (t.const = !0), t.id = this.parseIdentifier(), this.checkLVal(t.id, e ? 779 : 267, void 0, \"typescript enum declaration\"), this.expect(o.braceL), t.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this)), this.expect(o.braceR), this.finishNode(t, \"TSEnumDeclaration\");\n            }\n          }, {\n            key: \"tsParseModuleBlock\",\n            value: function () {\n              var t = this.startNode();\n              return this.scope.enter(0), this.expect(o.braceL), this.parseBlockOrModuleBlockBody(t.body = [], void 0, !0, o.braceR), this.scope.exit(), this.finishNode(t, \"TSModuleBlock\");\n            }\n          }, {\n            key: \"tsParseModuleOrNamespaceDeclaration\",\n            value: function (t) {\n              var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n\n              if (t.id = this.parseIdentifier(), e || this.checkLVal(t.id, 1024, null, \"module or namespace declaration\"), this.eat(o.dot)) {\n                var s = this.startNode();\n                this.tsParseModuleOrNamespaceDeclaration(s, !0), t.body = s;\n              } else this.scope.enter(512), t.body = this.tsParseModuleBlock(), this.scope.exit();\n\n              return this.finishNode(t, \"TSModuleDeclaration\");\n            }\n          }, {\n            key: \"tsParseAmbientExternalModuleDeclaration\",\n            value: function (t) {\n              return this.isContextual(\"global\") ? (t.global = !0, t.id = this.parseIdentifier()) : this.match(o.string) ? t.id = this.parseExprAtom() : this.unexpected(), this.match(o.braceL) ? (this.scope.enter(512), t.body = this.tsParseModuleBlock(), this.scope.exit()) : this.semicolon(), this.finishNode(t, \"TSModuleDeclaration\");\n            }\n          }, {\n            key: \"tsParseImportEqualsDeclaration\",\n            value: function (t, e) {\n              return t.isExport = e || !1, t.id = this.parseIdentifier(), this.expect(o.eq), t.moduleReference = this.tsParseModuleReference(), this.semicolon(), this.finishNode(t, \"TSImportEqualsDeclaration\");\n            }\n          }, {\n            key: \"tsIsExternalModuleReference\",\n            value: function () {\n              return this.isContextual(\"require\") && 40 === this.lookaheadCharCode();\n            }\n          }, {\n            key: \"tsParseModuleReference\",\n            value: function () {\n              return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(!1);\n            }\n          }, {\n            key: \"tsParseExternalModuleReference\",\n            value: function () {\n              var t = this.startNode();\n              if (this.expectContextual(\"require\"), this.expect(o.parenL), !this.match(o.string)) throw this.unexpected();\n              return t.expression = this.parseExprAtom(), this.expect(o.parenR), this.finishNode(t, \"TSExternalModuleReference\");\n            }\n          }, {\n            key: \"tsLookAhead\",\n            value: function (t) {\n              var e = this.state.clone(),\n                  s = t();\n              return this.state = e, s;\n            }\n          }, {\n            key: \"tsTryParseAndCatch\",\n            value: function (t) {\n              var e = this.tryParse(function (e) {\n                return t() || e();\n              });\n              if (!e.aborted && e.node) return e.error && (this.state = e.failState), e.node;\n            }\n          }, {\n            key: \"tsTryParse\",\n            value: function (t) {\n              var e = this.state.clone(),\n                  s = t();\n              return void 0 !== s && !1 !== s ? s : void (this.state = e);\n            }\n          }, {\n            key: \"tsTryParseDeclare\",\n            value: function (t) {\n              if (!this.isLineTerminator()) {\n                var e,\n                    s = this.state.type;\n\n                switch (this.isContextual(\"let\") && (s = o._var, e = \"let\"), s) {\n                  case o._function:\n                    return this.parseFunctionStatement(t, !1, !0);\n\n                  case o._class:\n                    return t.declare = !0, this.parseClass(t, !0, !1);\n\n                  case o._const:\n                    if (this.match(o._const) && this.isLookaheadContextual(\"enum\")) return this.expect(o._const), this.expectContextual(\"enum\"), this.tsParseEnumDeclaration(t, !0);\n\n                  case o._var:\n                    return e = e || this.state.value, this.parseVarStatement(t, e);\n\n                  case o.name:\n                    var i = this.state.value;\n                    return \"global\" === i ? this.tsParseAmbientExternalModuleDeclaration(t) : this.tsParseDeclaration(t, i, !0);\n                }\n              }\n            }\n          }, {\n            key: \"tsTryParseExportDeclaration\",\n            value: function () {\n              return this.tsParseDeclaration(this.startNode(), this.state.value, !0);\n            }\n          }, {\n            key: \"tsParseExpressionStatement\",\n            value: function (t, e) {\n              switch (e.name) {\n                case \"declare\":\n                  var s = this.tsTryParseDeclare(t);\n                  if (s) return s.declare = !0, s;\n                  break;\n\n                case \"global\":\n                  if (this.match(o.braceL)) {\n                    this.scope.enter(512);\n                    var i = t;\n                    return i.global = !0, i.id = e, i.body = this.tsParseModuleBlock(), this.scope.exit(), this.finishNode(i, \"TSModuleDeclaration\");\n                  }\n\n                  break;\n\n                default:\n                  return this.tsParseDeclaration(t, e.name, !1);\n              }\n            }\n          }, {\n            key: \"tsParseDeclaration\",\n            value: function (t, e, s) {\n              switch (e) {\n                case \"abstract\":\n                  if (this.tsCheckLineTerminatorAndMatch(o._class, s)) {\n                    var i = t;\n                    return i.abstract = !0, s && (this.next(), this.match(o._class) || this.unexpected(null, o._class)), this.parseClass(i, !0, !1);\n                  }\n\n                  break;\n\n                case \"enum\":\n                  if (s || this.match(o.name)) return s && this.next(), this.tsParseEnumDeclaration(t, !1);\n                  break;\n\n                case \"interface\":\n                  if (this.tsCheckLineTerminatorAndMatch(o.name, s)) return s && this.next(), this.tsParseInterfaceDeclaration(t);\n                  break;\n\n                case \"module\":\n                  if (s && this.next(), this.match(o.string)) return this.tsParseAmbientExternalModuleDeclaration(t);\n                  if (this.tsCheckLineTerminatorAndMatch(o.name, s)) return this.tsParseModuleOrNamespaceDeclaration(t);\n                  break;\n\n                case \"namespace\":\n                  if (this.tsCheckLineTerminatorAndMatch(o.name, s)) return s && this.next(), this.tsParseModuleOrNamespaceDeclaration(t);\n                  break;\n\n                case \"type\":\n                  if (this.tsCheckLineTerminatorAndMatch(o.name, s)) return s && this.next(), this.tsParseTypeAliasDeclaration(t);\n              }\n            }\n          }, {\n            key: \"tsCheckLineTerminatorAndMatch\",\n            value: function (t, e) {\n              return (e || this.match(t)) && !this.isLineTerminator();\n            }\n          }, {\n            key: \"tsTryParseGenericAsyncArrowFunction\",\n            value: function (t, s) {\n              var i = this;\n\n              if (this.isRelational(\"<\")) {\n                var a = this.tsTryParseAndCatch(function () {\n                  var a = i.startNodeAt(t, s);\n                  return a.typeParameters = i.tsParseTypeParameters(), k(D(e.prototype), \"parseFunctionParams\", i).call(i, a), a.returnType = i.tsTryParseTypeOrTypePredicateAnnotation(), i.expect(o.arrow), a;\n                });\n                if (a) return this.parseArrowExpression(a, null, !0);\n              }\n            }\n          }, {\n            key: \"tsParseTypeArguments\",\n            value: function () {\n              var t = this,\n                  e = this.startNode();\n              return e.params = this.tsInType(function () {\n                return t.tsInNoContext(function () {\n                  return t.expectRelational(\"<\"), t.tsParseDelimitedList(\"TypeParametersOrArguments\", t.tsParseType.bind(t));\n                });\n              }), this.state.exprAllowed = !1, this.expectRelational(\">\"), this.finishNode(e, \"TSTypeParameterInstantiation\");\n            }\n          }, {\n            key: \"tsIsDeclarationStart\",\n            value: function () {\n              if (this.match(o.name)) switch (this.state.value) {\n                case \"abstract\":\n                case \"declare\":\n                case \"enum\":\n                case \"interface\":\n                case \"module\":\n                case \"namespace\":\n                case \"type\":\n                  return !0;\n              }\n              return !1;\n            }\n          }, {\n            key: \"isExportDefaultSpecifier\",\n            value: function () {\n              return !this.tsIsDeclarationStart() && k(D(e.prototype), \"isExportDefaultSpecifier\", this).call(this);\n            }\n          }, {\n            key: \"parseAssignableListItem\",\n            value: function (t, e) {\n              var s,\n                  i = this.state.start,\n                  a = this.state.startLoc,\n                  r = !1;\n              t && (s = this.parseAccessModifier(), r = !!this.tsParseModifier([\"readonly\"]));\n              var n = this.parseMaybeDefault();\n              this.parseAssignableListItemTypes(n);\n              var o = this.parseMaybeDefault(n.start, n.loc.start, n);\n\n              if (s || r) {\n                var h = this.startNodeAt(i, a);\n                return e.length && (h.decorators = e), s && (h.accessibility = s), r && (h.readonly = r), \"Identifier\" !== o.type && \"AssignmentPattern\" !== o.type && this.raise(h.start, \"A parameter property may not be declared using a binding pattern.\"), h.parameter = o, this.finishNode(h, \"TSParameterProperty\");\n              }\n\n              return e.length && (n.decorators = e), o;\n            }\n          }, {\n            key: \"parseFunctionBodyAndFinish\",\n            value: function (t, s) {\n              var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n              this.match(o.colon) && (t.returnType = this.tsParseTypeOrTypePredicateAnnotation(o.colon));\n              var a = \"FunctionDeclaration\" === s ? \"TSDeclareFunction\" : \"ClassMethod\" === s ? \"TSDeclareMethod\" : void 0;\n              a && !this.match(o.braceL) && this.isLineTerminator() ? this.finishNode(t, a) : k(D(e.prototype), \"parseFunctionBodyAndFinish\", this).call(this, t, s, i);\n            }\n          }, {\n            key: \"registerFunctionStatementId\",\n            value: function (t) {\n              !t.body && t.id ? this.checkLVal(t.id, 1024, null, \"function name\") : k(D(e.prototype), \"registerFunctionStatementId\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"parseSubscript\",\n            value: function (t, s, i, a, r) {\n              var n = this;\n\n              if (!this.hasPrecedingLineBreak() && this.match(o.bang)) {\n                this.state.exprAllowed = !1, this.next();\n                var h = this.startNodeAt(s, i);\n                return h.expression = t, this.finishNode(h, \"TSNonNullExpression\");\n              }\n\n              if (this.isRelational(\"<\")) {\n                var u = this.tsTryParseAndCatch(function () {\n                  if (!a && n.atPossibleAsync(t)) {\n                    var e = n.tsTryParseGenericAsyncArrowFunction(s, i);\n                    if (e) return e;\n                  }\n\n                  var h = n.startNodeAt(s, i);\n                  h.callee = t;\n                  var u = n.tsParseTypeArguments();\n\n                  if (u) {\n                    if (!a && n.eat(o.parenL)) return h.arguments = n.parseCallExpressionArguments(o.parenR, !1), h.typeParameters = u, n.finishCallExpression(h, r.optionalChainMember);\n                    if (n.match(o.backQuote)) return n.parseTaggedTemplateExpression(s, i, t, r, u);\n                  }\n\n                  n.unexpected();\n                });\n                if (u) return u;\n              }\n\n              return k(D(e.prototype), \"parseSubscript\", this).call(this, t, s, i, a, r);\n            }\n          }, {\n            key: \"parseNewArguments\",\n            value: function (t) {\n              var s = this;\n\n              if (this.isRelational(\"<\")) {\n                var i = this.tsTryParseAndCatch(function () {\n                  var t = s.tsParseTypeArguments();\n                  return s.match(o.parenL) || s.unexpected(), t;\n                });\n                i && (t.typeParameters = i);\n              }\n\n              k(D(e.prototype), \"parseNewArguments\", this).call(this, t);\n            }\n          }, {\n            key: \"parseExprOp\",\n            value: function (t, s, i, a, r) {\n              if (ot(o._in.binop) > a && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n                var n = this.startNodeAt(s, i);\n                n.expression = t;\n                var h = this.tsTryNextParseConstantContext();\n                return n.typeAnnotation = h || this.tsNextThenParseType(), this.finishNode(n, \"TSAsExpression\"), this.parseExprOp(n, s, i, a, r);\n              }\n\n              return k(D(e.prototype), \"parseExprOp\", this).call(this, t, s, i, a, r);\n            }\n          }, {\n            key: \"checkReservedWord\",\n            value: function (t, e, s, i) {}\n          }, {\n            key: \"checkDuplicateExports\",\n            value: function () {}\n          }, {\n            key: \"parseImport\",\n            value: function (t) {\n              return this.match(o.name) && this.lookahead().type === o.eq ? this.tsParseImportEqualsDeclaration(t) : k(D(e.prototype), \"parseImport\", this).call(this, t);\n            }\n          }, {\n            key: \"parseExport\",\n            value: function (t) {\n              if (this.match(o._import)) return this.expect(o._import), this.tsParseImportEqualsDeclaration(t, !0);\n\n              if (this.eat(o.eq)) {\n                var s = t;\n                return s.expression = this.parseExpression(), this.semicolon(), this.finishNode(s, \"TSExportAssignment\");\n              }\n\n              if (this.eatContextual(\"as\")) {\n                var i = t;\n                return this.expectContextual(\"namespace\"), i.id = this.parseIdentifier(), this.semicolon(), this.finishNode(i, \"TSNamespaceExportDeclaration\");\n              }\n\n              return k(D(e.prototype), \"parseExport\", this).call(this, t);\n            }\n          }, {\n            key: \"isAbstractClass\",\n            value: function () {\n              return this.isContextual(\"abstract\") && this.lookahead().type === o._class;\n            }\n          }, {\n            key: \"parseExportDefaultExpression\",\n            value: function () {\n              if (this.isAbstractClass()) {\n                var t = this.startNode();\n                return this.next(), this.parseClass(t, !0, !0), t.abstract = !0, t;\n              }\n\n              if (\"interface\" === this.state.value) {\n                var s = this.tsParseDeclaration(this.startNode(), this.state.value, !0);\n                if (s) return s;\n              }\n\n              return k(D(e.prototype), \"parseExportDefaultExpression\", this).call(this);\n            }\n          }, {\n            key: \"parseStatementContent\",\n            value: function (t, s) {\n              if (this.state.type === o._const) {\n                var i = this.lookahead();\n\n                if (i.type === o.name && \"enum\" === i.value) {\n                  var a = this.startNode();\n                  return this.expect(o._const), this.expectContextual(\"enum\"), this.tsParseEnumDeclaration(a, !0);\n                }\n              }\n\n              return k(D(e.prototype), \"parseStatementContent\", this).call(this, t, s);\n            }\n          }, {\n            key: \"parseAccessModifier\",\n            value: function () {\n              return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n            }\n          }, {\n            key: \"parseClassMember\",\n            value: function (t, s, i, a) {\n              var r = this.parseAccessModifier();\n              r && (s.accessibility = r), k(D(e.prototype), \"parseClassMember\", this).call(this, t, s, i, a);\n            }\n          }, {\n            key: \"parseClassMemberWithIsStatic\",\n            value: function (t, s, i, a, r) {\n              var n = this.tsParseModifiers([\"abstract\", \"readonly\", \"declare\"]);\n              Object.assign(s, n);\n              var o = this.tsTryParseIndexSignature(s);\n              if (o) return t.body.push(o), n.abstract && this.raise(s.start, \"Index signatures cannot have the 'abstract' modifier\"), a && this.raise(s.start, \"Index signatures cannot have the 'static' modifier\"), void (s.accessibility && this.raise(s.start, \"Index signatures cannot have an accessibility modifier ('\".concat(s.accessibility, \"')\")));\n              k(D(e.prototype), \"parseClassMemberWithIsStatic\", this).call(this, t, s, i, a, r);\n            }\n          }, {\n            key: \"parsePostMemberNameModifiers\",\n            value: function (t) {\n              this.eat(o.question) && (t.optional = !0), t.readonly && this.match(o.parenL) && this.raise(t.start, \"Class methods cannot have the 'readonly' modifier\"), t.declare && this.match(o.parenL) && this.raise(t.start, \"Class methods cannot have the 'declare' modifier\");\n            }\n          }, {\n            key: \"parseExpressionStatement\",\n            value: function (t, s) {\n              return (\"Identifier\" === s.type ? this.tsParseExpressionStatement(t, s) : void 0) || k(D(e.prototype), \"parseExpressionStatement\", this).call(this, t, s);\n            }\n          }, {\n            key: \"shouldParseExportDeclaration\",\n            value: function () {\n              return !!this.tsIsDeclarationStart() || k(D(e.prototype), \"shouldParseExportDeclaration\", this).call(this);\n            }\n          }, {\n            key: \"parseConditional\",\n            value: function (t, s, i, a, r) {\n              var n = this;\n              if (!r || !this.match(o.question)) return k(D(e.prototype), \"parseConditional\", this).call(this, t, s, i, a, r);\n              var h = this.tryParse(function () {\n                return k(D(e.prototype), \"parseConditional\", n).call(n, t, s, i, a);\n              });\n              return h.node ? (h.error && (this.state = h.failState), h.node) : (r.start = h.error.pos || this.state.start, t);\n            }\n          }, {\n            key: \"parseParenItem\",\n            value: function (t, s, i) {\n              if (t = k(D(e.prototype), \"parseParenItem\", this).call(this, t, s, i), this.eat(o.question) && (t.optional = !0, this.resetEndLocation(t)), this.match(o.colon)) {\n                var a = this.startNodeAt(s, i);\n                return a.expression = t, a.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(a, \"TSTypeCastExpression\");\n              }\n\n              return t;\n            }\n          }, {\n            key: \"parseExportDeclaration\",\n            value: function (t) {\n              var s,\n                  i = this.state.start,\n                  a = this.state.startLoc,\n                  r = this.eatContextual(\"declare\");\n              return this.match(o.name) && (s = this.tsTryParseExportDeclaration()), s || (s = k(D(e.prototype), \"parseExportDeclaration\", this).call(this, t)), s && r && (this.resetStartLocation(s, i, a), s.declare = !0), s;\n            }\n          }, {\n            key: \"parseClassId\",\n            value: function (t, s, i) {\n              if (s && !i || !this.isContextual(\"implements\")) {\n                k(D(e.prototype), \"parseClassId\", this).call(this, t, s, i, t.declare ? 1024 : 139);\n                var a = this.tsTryParseTypeParameters();\n                a && (t.typeParameters = a);\n              }\n            }\n          }, {\n            key: \"parseClassPropertyAnnotation\",\n            value: function (t) {\n              !t.optional && this.eat(o.bang) && (t.definite = !0);\n              var e = this.tsTryParseTypeAnnotation();\n              e && (t.typeAnnotation = e);\n            }\n          }, {\n            key: \"parseClassProperty\",\n            value: function (t) {\n              return this.parseClassPropertyAnnotation(t), t.declare && this.match(o.equal) && this.raise(this.state.start, \"'declare' class fields cannot have an initializer\"), k(D(e.prototype), \"parseClassProperty\", this).call(this, t);\n            }\n          }, {\n            key: \"parseClassPrivateProperty\",\n            value: function (t) {\n              return t.abstract && this.raise(t.start, \"Private elements cannot have the 'abstract' modifier.\"), t.accessibility && this.raise(t.start, \"Private elements cannot have an accessibility modifier ('\".concat(t.accessibility, \"')\")), this.parseClassPropertyAnnotation(t), k(D(e.prototype), \"parseClassPrivateProperty\", this).call(this, t);\n            }\n          }, {\n            key: \"pushClassMethod\",\n            value: function (t, s, i, a, r, n) {\n              var o = this.tsTryParseTypeParameters();\n              o && (s.typeParameters = o), k(D(e.prototype), \"pushClassMethod\", this).call(this, t, s, i, a, r, n);\n            }\n          }, {\n            key: \"pushClassPrivateMethod\",\n            value: function (t, s, i, a) {\n              var r = this.tsTryParseTypeParameters();\n              r && (s.typeParameters = r), k(D(e.prototype), \"pushClassPrivateMethod\", this).call(this, t, s, i, a);\n            }\n          }, {\n            key: \"parseClassSuper\",\n            value: function (t) {\n              k(D(e.prototype), \"parseClassSuper\", this).call(this, t), t.superClass && this.isRelational(\"<\") && (t.superTypeParameters = this.tsParseTypeArguments()), this.eatContextual(\"implements\") && (t.implements = this.tsParseHeritageClause(\"implements\"));\n            }\n          }, {\n            key: \"parseObjPropValue\",\n            value: function (t) {\n              var s,\n                  i = this.tsTryParseTypeParameters();\n              i && (t.typeParameters = i);\n\n              for (var a = arguments.length, r = new Array(a > 1 ? a - 1 : 0), n = 1; n < a; n++) r[n - 1] = arguments[n];\n\n              (s = k(D(e.prototype), \"parseObjPropValue\", this)).call.apply(s, [this, t].concat(r));\n            }\n          }, {\n            key: \"parseFunctionParams\",\n            value: function (t, s) {\n              var i = this.tsTryParseTypeParameters();\n              i && (t.typeParameters = i), k(D(e.prototype), \"parseFunctionParams\", this).call(this, t, s);\n            }\n          }, {\n            key: \"parseVarId\",\n            value: function (t, s) {\n              k(D(e.prototype), \"parseVarId\", this).call(this, t, s), \"Identifier\" === t.id.type && this.eat(o.bang) && (t.definite = !0);\n              var i = this.tsTryParseTypeAnnotation();\n              i && (t.id.typeAnnotation = i, this.resetEndLocation(t.id));\n            }\n          }, {\n            key: \"parseAsyncArrowFromCallExpression\",\n            value: function (t, s) {\n              return this.match(o.colon) && (t.returnType = this.tsParseTypeAnnotation()), k(D(e.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, t, s);\n            }\n          }, {\n            key: \"parseMaybeAssign\",\n            value: function () {\n              for (var t, s, i, a, r, n = this, h = arguments.length, u = new Array(h), l = 0; l < h; l++) u[l] = arguments[l];\n\n              if (this.match(o.jsxTagStart)) {\n                if (t = this.state.clone(), !(s = this.tryParse(function () {\n                  var t;\n                  return (t = k(D(e.prototype), \"parseMaybeAssign\", n)).call.apply(t, [n].concat(u));\n                }, t)).error) return s.node;\n                var c = this.state.context;\n                c[c.length - 1] === F.j_oTag ? c.length -= 2 : c[c.length - 1] === F.j_expr && (c.length -= 1);\n              }\n\n              if (!(s && s.error || this.isRelational(\"<\"))) return (a = k(D(e.prototype), \"parseMaybeAssign\", this)).call.apply(a, [this].concat(u));\n              t = t || this.state.clone();\n              var p = this.tryParse(function (t) {\n                var s;\n                r = n.tsParseTypeParameters();\n                var i = (s = k(D(e.prototype), \"parseMaybeAssign\", n)).call.apply(s, [n].concat(u));\n                return (\"ArrowFunctionExpression\" !== i.type || i.extra && i.extra.parenthesized) && t(), r && 0 !== r.params.length && n.resetStartLocationFromNode(i, r), i.typeParameters = r, i;\n              }, t);\n              if (!p.error && !p.aborted) return p.node;\n              if (!s && (ht(!this.hasPlugin(\"jsx\")), !(i = this.tryParse(function () {\n                var t;\n                return (t = k(D(e.prototype), \"parseMaybeAssign\", n)).call.apply(t, [n].concat(u));\n              }, t)).error)) return i.node;\n              if (s && s.node) return this.state = s.failState, s.node;\n              if (p.node) return this.state = p.failState, p.node;\n              if (i && i.node) return this.state = i.failState, i.node;\n              if (s && s.thrown) throw s.error;\n              if (p.thrown) throw p.error;\n              if (i && i.thrown) throw i.error;\n              throw s && s.error || p.error || i && i.error;\n            }\n          }, {\n            key: \"parseMaybeUnary\",\n            value: function (t) {\n              return !this.hasPlugin(\"jsx\") && this.isRelational(\"<\") ? this.tsParseTypeAssertion() : k(D(e.prototype), \"parseMaybeUnary\", this).call(this, t);\n            }\n          }, {\n            key: \"parseArrow\",\n            value: function (t) {\n              var s = this;\n\n              if (this.match(o.colon)) {\n                var i = this.tryParse(function (t) {\n                  var e = s.tsParseTypeOrTypePredicateAnnotation(o.colon);\n                  return !s.canInsertSemicolon() && s.match(o.arrow) || t(), e;\n                });\n                if (i.aborted) return;\n                i.thrown || (i.error && (this.state = i.failState), t.returnType = i.node);\n              }\n\n              return k(D(e.prototype), \"parseArrow\", this).call(this, t);\n            }\n          }, {\n            key: \"parseAssignableListItemTypes\",\n            value: function (t) {\n              this.eat(o.question) && (\"Identifier\" !== t.type && this.raise(t.start, \"A binding pattern parameter cannot be optional in an implementation signature.\"), t.optional = !0);\n              var e = this.tsTryParseTypeAnnotation();\n              return e && (t.typeAnnotation = e), this.resetEndLocation(t), t;\n            }\n          }, {\n            key: \"toAssignable\",\n            value: function (t, s, i) {\n              switch (t.type) {\n                case \"TSTypeCastExpression\":\n                  return k(D(e.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(t), s, i);\n\n                case \"TSParameterProperty\":\n                  return k(D(e.prototype), \"toAssignable\", this).call(this, t, s, i);\n\n                case \"TSAsExpression\":\n                case \"TSNonNullExpression\":\n                case \"TSTypeAssertion\":\n                  return t.expression = this.toAssignable(t.expression, s, i), t;\n\n                default:\n                  return k(D(e.prototype), \"toAssignable\", this).call(this, t, s, i);\n              }\n            }\n          }, {\n            key: \"checkLVal\",\n            value: function (t) {\n              var s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 64,\n                  i = arguments.length > 2 ? arguments[2] : void 0,\n                  a = arguments.length > 3 ? arguments[3] : void 0;\n\n              switch (t.type) {\n                case \"TSTypeCastExpression\":\n                  return;\n\n                case \"TSParameterProperty\":\n                  return void this.checkLVal(t.parameter, s, i, \"parameter property\");\n\n                case \"TSAsExpression\":\n                case \"TSNonNullExpression\":\n                case \"TSTypeAssertion\":\n                  return void this.checkLVal(t.expression, s, i, a);\n\n                default:\n                  return void k(D(e.prototype), \"checkLVal\", this).call(this, t, s, i, a);\n              }\n            }\n          }, {\n            key: \"parseBindingAtom\",\n            value: function () {\n              switch (this.state.type) {\n                case o._this:\n                  return this.parseIdentifier(!0);\n\n                default:\n                  return k(D(e.prototype), \"parseBindingAtom\", this).call(this);\n              }\n            }\n          }, {\n            key: \"parseMaybeDecoratorArguments\",\n            value: function (t) {\n              if (this.isRelational(\"<\")) {\n                var s = this.tsParseTypeArguments();\n\n                if (this.match(o.parenL)) {\n                  var i = k(D(e.prototype), \"parseMaybeDecoratorArguments\", this).call(this, t);\n                  return i.typeParameters = s, i;\n                }\n\n                this.unexpected(this.state.start, o.parenL);\n              }\n\n              return k(D(e.prototype), \"parseMaybeDecoratorArguments\", this).call(this, t);\n            }\n          }, {\n            key: \"isClassMethod\",\n            value: function () {\n              return this.isRelational(\"<\") || k(D(e.prototype), \"isClassMethod\", this).call(this);\n            }\n          }, {\n            key: \"isClassProperty\",\n            value: function () {\n              return this.match(o.bang) || this.match(o.colon) || k(D(e.prototype), \"isClassProperty\", this).call(this);\n            }\n          }, {\n            key: \"parseMaybeDefault\",\n            value: function () {\n              for (var t, s = arguments.length, i = new Array(s), a = 0; a < s; a++) i[a] = arguments[a];\n\n              var r = (t = k(D(e.prototype), \"parseMaybeDefault\", this)).call.apply(t, [this].concat(i));\n              return \"AssignmentPattern\" === r.type && r.typeAnnotation && r.right.start < r.typeAnnotation.start && this.raise(r.typeAnnotation.start, \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\"), r;\n            }\n          }, {\n            key: \"getTokenFromCode\",\n            value: function (t) {\n              return !this.state.inType || 62 !== t && 60 !== t ? k(D(e.prototype), \"getTokenFromCode\", this).call(this, t) : this.finishOp(o.relational, 1);\n            }\n          }, {\n            key: \"toAssignableList\",\n            value: function (t) {\n              for (var s = 0; s < t.length; s++) {\n                var i = t[s];\n                if (i) switch (i.type) {\n                  case \"TSTypeCastExpression\":\n                    t[s] = this.typeCastToParameter(i);\n                    break;\n\n                  case \"TSAsExpression\":\n                  case \"TSTypeAssertion\":\n                    this.raise(i.start, \"Unexpected type cast in parameter position.\");\n                }\n              }\n\n              return k(D(e.prototype), \"toAssignableList\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"typeCastToParameter\",\n            value: function (t) {\n              return t.expression.typeAnnotation = t.typeAnnotation, this.resetEndLocation(t.expression, t.typeAnnotation.end, t.typeAnnotation.loc.end), t.expression;\n            }\n          }, {\n            key: \"toReferencedList\",\n            value: function (t, e) {\n              for (var s = 0; s < t.length; s++) {\n                var i = t[s];\n                i && i._exprListItem && \"TsTypeCastExpression\" === i.type && this.raise(i.start, \"Did not expect a type annotation here.\");\n              }\n\n              return t;\n            }\n          }, {\n            key: \"shouldParseArrow\",\n            value: function () {\n              return this.match(o.colon) || k(D(e.prototype), \"shouldParseArrow\", this).call(this);\n            }\n          }, {\n            key: \"shouldParseAsyncArrow\",\n            value: function () {\n              return this.match(o.colon) || k(D(e.prototype), \"shouldParseAsyncArrow\", this).call(this);\n            }\n          }, {\n            key: \"canHaveLeadingDecorator\",\n            value: function () {\n              return k(D(e.prototype), \"canHaveLeadingDecorator\", this).call(this) || this.isAbstractClass();\n            }\n          }, {\n            key: \"jsxParseOpeningElementAfterName\",\n            value: function (t) {\n              var s = this;\n\n              if (this.isRelational(\"<\")) {\n                var i = this.tsTryParseAndCatch(function () {\n                  return s.tsParseTypeArguments();\n                });\n                i && (t.typeParameters = i);\n              }\n\n              return k(D(e.prototype), \"jsxParseOpeningElementAfterName\", this).call(this, t);\n            }\n          }, {\n            key: \"getGetterSetterExpectedParamCount\",\n            value: function (t) {\n              var s = k(D(e.prototype), \"getGetterSetterExpectedParamCount\", this).call(this, t),\n                  i = t.params[0];\n              return i && \"Identifier\" === i.type && \"this\" === i.name ? s + 1 : s;\n            }\n          }]), e;\n        }(t);\n      },\n      v8intrinsic: function (t) {\n        return function (t) {\n          function e() {\n            return d(this, e), g(this, D(e).apply(this, arguments));\n          }\n\n          return y(e, t), m(e, [{\n            key: \"parseV8Intrinsic\",\n            value: function () {\n              if (this.match(o.modulo)) {\n                var t = this.state.start,\n                    e = this.startNode();\n\n                if (this.eat(o.modulo), this.match(o.name)) {\n                  var s = this.parseIdentifierName(this.state.start),\n                      i = this.createIdentifier(e, s);\n                  if (i.type = \"V8IntrinsicIdentifier\", this.match(o.parenL)) return i;\n                }\n\n                this.unexpected(t);\n              }\n            }\n          }, {\n            key: \"parseExprAtom\",\n            value: function () {\n              return this.parseV8Intrinsic() || k(D(e.prototype), \"parseExprAtom\", this).apply(this, arguments);\n            }\n          }]), e;\n        }(t);\n      },\n      placeholders: function (t) {\n        return function (t) {\n          function e() {\n            return d(this, e), g(this, D(e).apply(this, arguments));\n          }\n\n          return y(e, t), m(e, [{\n            key: \"parsePlaceholder\",\n            value: function (t) {\n              if (this.match(o.placeholder)) {\n                var s = this.startNode();\n                return this.next(), this.assertNoSpace(\"Unexpected space in placeholder.\"), s.name = k(D(e.prototype), \"parseIdentifier\", this).call(this, !0), this.assertNoSpace(\"Unexpected space in placeholder.\"), this.expect(o.placeholder), this.finishPlaceholder(s, t);\n              }\n            }\n          }, {\n            key: \"finishPlaceholder\",\n            value: function (t, e) {\n              var s = !(!t.expectedNode || \"Placeholder\" !== t.type);\n              return t.expectedNode = e, s ? t : this.finishNode(t, \"Placeholder\");\n            }\n          }, {\n            key: \"getTokenFromCode\",\n            value: function (t) {\n              return 37 === t && 37 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(o.placeholder, 2) : k(D(e.prototype), \"getTokenFromCode\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"parseExprAtom\",\n            value: function () {\n              return this.parsePlaceholder(\"Expression\") || k(D(e.prototype), \"parseExprAtom\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"parseIdentifier\",\n            value: function () {\n              return this.parsePlaceholder(\"Identifier\") || k(D(e.prototype), \"parseIdentifier\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"checkReservedWord\",\n            value: function (t) {\n              void 0 !== t && k(D(e.prototype), \"checkReservedWord\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"parseBindingAtom\",\n            value: function () {\n              return this.parsePlaceholder(\"Pattern\") || k(D(e.prototype), \"parseBindingAtom\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"checkLVal\",\n            value: function (t) {\n              \"Placeholder\" !== t.type && k(D(e.prototype), \"checkLVal\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"toAssignable\",\n            value: function (t) {\n              return t && \"Placeholder\" === t.type && \"Expression\" === t.expectedNode ? (t.expectedNode = \"Pattern\", t) : k(D(e.prototype), \"toAssignable\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"verifyBreakContinue\",\n            value: function (t) {\n              t.label && \"Placeholder\" === t.label.type || k(D(e.prototype), \"verifyBreakContinue\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"parseExpressionStatement\",\n            value: function (t, s) {\n              if (\"Placeholder\" !== s.type || s.extra && s.extra.parenthesized) return k(D(e.prototype), \"parseExpressionStatement\", this).apply(this, arguments);\n\n              if (this.match(o.colon)) {\n                var i = t;\n                return i.label = this.finishPlaceholder(s, \"Identifier\"), this.next(), i.body = this.parseStatement(\"label\"), this.finishNode(i, \"LabeledStatement\");\n              }\n\n              return this.semicolon(), t.name = s.name, this.finishPlaceholder(t, \"Statement\");\n            }\n          }, {\n            key: \"parseBlock\",\n            value: function () {\n              return this.parsePlaceholder(\"BlockStatement\") || k(D(e.prototype), \"parseBlock\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"parseFunctionId\",\n            value: function () {\n              return this.parsePlaceholder(\"Identifier\") || k(D(e.prototype), \"parseFunctionId\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"parseClass\",\n            value: function (t, e, s) {\n              var i = e ? \"ClassDeclaration\" : \"ClassExpression\";\n              this.next(), this.takeDecorators(t);\n              var a = this.parsePlaceholder(\"Identifier\");\n              if (a) {\n                if (this.match(o._extends) || this.match(o.placeholder) || this.match(o.braceL)) t.id = a;else {\n                  if (s || !e) return t.id = null, t.body = this.finishPlaceholder(a, \"ClassBody\"), this.finishNode(t, i);\n                  this.unexpected(null, \"A class name is required\");\n                }\n              } else this.parseClassId(t, e, s);\n              return this.parseClassSuper(t), t.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!t.superClass), this.finishNode(t, i);\n            }\n          }, {\n            key: \"parseExport\",\n            value: function (t) {\n              var s = this.parsePlaceholder(\"Identifier\");\n              if (!s) return k(D(e.prototype), \"parseExport\", this).apply(this, arguments);\n              if (!this.isContextual(\"from\") && !this.match(o.comma)) return t.specifiers = [], t.source = null, t.declaration = this.finishPlaceholder(s, \"Declaration\"), this.finishNode(t, \"ExportNamedDeclaration\");\n              this.expectPlugin(\"exportDefaultFrom\");\n              var i = this.startNode();\n              return i.exported = s, t.specifiers = [this.finishNode(i, \"ExportDefaultSpecifier\")], k(D(e.prototype), \"parseExport\", this).call(this, t);\n            }\n          }, {\n            key: \"maybeParseExportDefaultSpecifier\",\n            value: function (t) {\n              return !!(t.specifiers && t.specifiers.length > 0) || k(D(e.prototype), \"maybeParseExportDefaultSpecifier\", this).apply(this, arguments);\n            }\n          }, {\n            key: \"checkExport\",\n            value: function (t) {\n              var s = t.specifiers;\n              s && s.length && (t.specifiers = s.filter(function (t) {\n                return \"Placeholder\" === t.exported.type;\n              })), k(D(e.prototype), \"checkExport\", this).call(this, t), t.specifiers = s;\n            }\n          }, {\n            key: \"parseImport\",\n            value: function (t) {\n              var s = this.parsePlaceholder(\"Identifier\");\n              if (!s) return k(D(e.prototype), \"parseImport\", this).apply(this, arguments);\n              if (t.specifiers = [], !this.isContextual(\"from\") && !this.match(o.comma)) return t.source = this.finishPlaceholder(s, \"StringLiteral\"), this.semicolon(), this.finishNode(t, \"ImportDeclaration\");\n              var i = this.startNodeAtNode(s);\n\n              if (i.local = s, this.finishNode(i, \"ImportDefaultSpecifier\"), t.specifiers.push(i), this.eat(o.comma)) {\n                var a = this.maybeParseStarImportSpecifier(t);\n                a || this.parseNamedImportSpecifiers(t);\n              }\n\n              return this.expectContextual(\"from\"), t.source = this.parseImportSource(), this.semicolon(), this.finishNode(t, \"ImportDeclaration\");\n            }\n          }, {\n            key: \"parseImportSource\",\n            value: function () {\n              return this.parsePlaceholder(\"StringLiteral\") || k(D(e.prototype), \"parseImportSource\", this).apply(this, arguments);\n            }\n          }]), e;\n        }(t);\n      }\n    },\n        dt = Object.keys(pt),\n        ft = {\n      sourceType: \"script\",\n      sourceFilename: void 0,\n      startLine: 1,\n      allowAwaitOutsideFunction: !1,\n      allowReturnOutsideFunction: !1,\n      allowImportExportEverywhere: !1,\n      allowSuperOutsideMethod: !1,\n      allowUndeclaredExports: !1,\n      plugins: [],\n      strictMode: null,\n      ranges: !1,\n      tokens: !1,\n      createParenthesizedExpressions: !1,\n      errorRecovery: !1\n    };\n\n    var mt = function t(e, s) {\n      d(this, t), this.line = e, this.column = s;\n    },\n        yt = function t(e, s) {\n      d(this, t), this.start = e, this.end = s;\n    };\n\n    function Dt(t) {\n      return t[t.length - 1];\n    }\n\n    var vt = function (t) {\n      function e() {\n        return d(this, e), g(this, D(e).apply(this, arguments));\n      }\n\n      return y(e, t), m(e, [{\n        key: \"getLocationForPosition\",\n        value: function (t) {\n          return t === this.state.start ? this.state.startLoc : t === this.state.lastTokStart ? this.state.lastTokStartLoc : t === this.state.end ? this.state.endLoc : t === this.state.lastTokEnd ? this.state.lastTokEndLoc : function (t, e) {\n            var s,\n                i = 1,\n                a = 0;\n\n            for (E.lastIndex = 0; (s = E.exec(t)) && s.index < e;) i++, a = E.lastIndex;\n\n            return new mt(i, e - a);\n          }(this.input, t);\n        }\n      }, {\n        key: \"raise\",\n        value: function (t, e) {\n          var s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n              i = s.missingPluginNames,\n              a = s.code,\n              r = this.getLocationForPosition(t);\n          e += \" (\".concat(r.line, \":\").concat(r.column, \")\");\n          var n = new SyntaxError(e);\n          if (n.pos = t, n.loc = r, i && (n.missingPlugin = i), void 0 !== a && (n.code = a), this.options.errorRecovery) return this.isLookahead || this.state.errors.push(n), n;\n          throw n;\n        }\n      }]), e;\n    }(function (t) {\n      function e() {\n        return d(this, e), g(this, D(e).apply(this, arguments));\n      }\n\n      return y(e, t), m(e, [{\n        key: \"addComment\",\n        value: function (t) {\n          this.filename && (t.loc.filename = this.filename), this.state.trailingComments.push(t), this.state.leadingComments.push(t);\n        }\n      }, {\n        key: \"adjustCommentsAfterTrailingComma\",\n        value: function (t, e, s) {\n          if (0 !== this.state.leadingComments.length) {\n            for (var i = null, a = e.length; null === i && a > 0;) i = e[--a];\n\n            if (null !== i) {\n              for (var r = 0; r < this.state.leadingComments.length; r++) this.state.leadingComments[r].end < this.state.commentPreviousNode.end && (this.state.leadingComments.splice(r, 1), r--);\n\n              for (var n = [], o = 0; o < this.state.leadingComments.length; o++) {\n                var h = this.state.leadingComments[o];\n                h.end < t.end ? (n.push(h), s || (this.state.leadingComments.splice(o, 1), o--)) : (void 0 === t.trailingComments && (t.trailingComments = []), t.trailingComments.push(h));\n              }\n\n              s && (this.state.leadingComments = []), n.length > 0 ? i.trailingComments = n : void 0 !== i.trailingComments && (i.trailingComments = []);\n            }\n          }\n        }\n      }, {\n        key: \"processComment\",\n        value: function (t) {\n          if (!(\"Program\" === t.type && t.body.length > 0)) {\n            var e,\n                s,\n                i,\n                a,\n                r,\n                n = this.state.commentStack;\n            if (this.state.trailingComments.length > 0) this.state.trailingComments[0].start >= t.end ? (i = this.state.trailingComments, this.state.trailingComments = []) : this.state.trailingComments.length = 0;else if (n.length > 0) {\n              var o = Dt(n);\n              o.trailingComments && o.trailingComments[0].start >= t.end && (i = o.trailingComments, delete o.trailingComments);\n            }\n\n            for (n.length > 0 && Dt(n).start >= t.start && (e = n.pop()); n.length > 0 && Dt(n).start >= t.start;) s = n.pop();\n\n            if (!s && e && (s = e), e) switch (t.type) {\n              case \"ObjectExpression\":\n                this.adjustCommentsAfterTrailingComma(t, t.properties);\n                break;\n\n              case \"ObjectPattern\":\n                this.adjustCommentsAfterTrailingComma(t, t.properties, !0);\n                break;\n\n              case \"CallExpression\":\n                this.adjustCommentsAfterTrailingComma(t, t.arguments);\n                break;\n\n              case \"ArrayExpression\":\n                this.adjustCommentsAfterTrailingComma(t, t.elements);\n                break;\n\n              case \"ArrayPattern\":\n                this.adjustCommentsAfterTrailingComma(t, t.elements, !0);\n            } else this.state.commentPreviousNode && (\"ImportSpecifier\" === this.state.commentPreviousNode.type && \"ImportSpecifier\" !== t.type || \"ExportSpecifier\" === this.state.commentPreviousNode.type && \"ExportSpecifier\" !== t.type) && this.adjustCommentsAfterTrailingComma(t, [this.state.commentPreviousNode], !0);\n\n            if (s) {\n              if (s.leadingComments) if (s !== t && s.leadingComments.length > 0 && Dt(s.leadingComments).end <= t.start) t.leadingComments = s.leadingComments, delete s.leadingComments;else for (a = s.leadingComments.length - 2; a >= 0; --a) if (s.leadingComments[a].end <= t.start) {\n                t.leadingComments = s.leadingComments.splice(0, a + 1);\n                break;\n              }\n            } else if (this.state.leadingComments.length > 0) if (Dt(this.state.leadingComments).end <= t.start) {\n              if (this.state.commentPreviousNode) for (r = 0; r < this.state.leadingComments.length; r++) this.state.leadingComments[r].end < this.state.commentPreviousNode.end && (this.state.leadingComments.splice(r, 1), r--);\n              this.state.leadingComments.length > 0 && (t.leadingComments = this.state.leadingComments, this.state.leadingComments = []);\n            } else {\n              for (a = 0; a < this.state.leadingComments.length && !(this.state.leadingComments[a].end > t.start); a++);\n\n              var h = this.state.leadingComments.slice(0, a);\n              h.length && (t.leadingComments = h), 0 === (i = this.state.leadingComments.slice(a)).length && (i = null);\n            }\n\n            this.state.commentPreviousNode = t, i && (i.length && i[0].start >= t.start && Dt(i).end <= t.end ? t.innerComments = i : t.trailingComments = i), n.push(t);\n          }\n        }\n      }]), e;\n    }(function () {\n      function t() {\n        d(this, t), this.sawUnambiguousESM = !1, this.ambiguousScriptDifferentAst = !1;\n      }\n\n      return m(t, [{\n        key: \"hasPlugin\",\n        value: function (t) {\n          return this.plugins.has(t);\n        }\n      }, {\n        key: \"getPluginOption\",\n        value: function (t, e) {\n          if (this.hasPlugin(t)) return this.plugins.get(t)[e];\n        }\n      }]), t;\n    }())),\n        xt = function () {\n      function t() {\n        d(this, t), this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.inParameters = !1, this.maybeInArrowParameters = !1, this.inPipeline = !1, this.inType = !1, this.noAnonFunctionType = !1, this.inPropertyName = !1, this.inClassProperty = !1, this.hasFlowComment = !1, this.isIterator = !1, this.topicContext = {\n          maxNumOfResolvableTopics: 0,\n          maxTopicIndex: null\n        }, this.soloAwait = !1, this.inFSharpPipelineDirectBody = !1, this.classLevel = 0, this.labels = [], this.decoratorStack = [[]], this.yieldPos = -1, this.awaitPos = -1, this.tokens = [], this.comments = [], this.trailingComments = [], this.leadingComments = [], this.commentStack = [], this.commentPreviousNode = null, this.pos = 0, this.lineStart = 0, this.type = o.eof, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.lastTokStart = 0, this.lastTokEnd = 0, this.context = [F.braceStatement], this.exprAllowed = !0, this.containsEsc = !1, this.containsOctal = !1, this.octalPosition = null, this.exportedIdentifiers = [], this.invalidTemplateEscapePosition = null;\n      }\n\n      return m(t, [{\n        key: \"init\",\n        value: function (t) {\n          this.strict = !1 !== t.strictMode && \"module\" === t.sourceType, this.curLine = t.startLine, this.startLoc = this.endLoc = this.curPosition();\n        }\n      }, {\n        key: \"curPosition\",\n        value: function () {\n          return new mt(this.curLine, this.pos - this.lineStart);\n        }\n      }, {\n        key: \"clone\",\n        value: function (e) {\n          for (var s = new t(), i = Object.keys(this), a = 0, r = i.length; a < r; a++) {\n            var n = i[a],\n                o = this[n];\n            !e && Array.isArray(o) && (o = o.slice()), s[n] = o;\n          }\n\n          return s;\n        }\n      }]), t;\n    }(),\n        gt = function (t) {\n      return t >= 48 && t <= 57;\n    },\n        kt = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]),\n        Pt = {\n      decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n      hex: [46, 88, 95, 120]\n    },\n        bt = {\n      bin: [48, 49]\n    };\n\n    bt.oct = [].concat(b(bt.bin), [50, 51, 52, 53, 54, 55]), bt.dec = [].concat(b(bt.oct), [56, 57]), bt.hex = [].concat(b(bt.dec), [65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102]);\n\n    var Et = function t(e) {\n      d(this, t), this.type = e.type, this.value = e.value, this.start = e.start, this.end = e.end, this.loc = new yt(e.startLoc, e.endLoc);\n    },\n        Ct = /^('|\")((?:\\\\?.)*?)\\1/,\n        At = function (t) {\n      function e() {\n        return d(this, e), g(this, D(e).apply(this, arguments));\n      }\n\n      return y(e, t), m(e, [{\n        key: \"addExtra\",\n        value: function (t, e, s) {\n          t && ((t.extra = t.extra || {})[e] = s);\n        }\n      }, {\n        key: \"isRelational\",\n        value: function (t) {\n          return this.match(o.relational) && this.state.value === t;\n        }\n      }, {\n        key: \"isLookaheadRelational\",\n        value: function (t) {\n          var e = this.nextTokenStart();\n\n          if (this.input.charAt(e) === t) {\n            if (e + 1 === this.input.length) return !0;\n            var s = this.input.charCodeAt(e + 1);\n            return s !== t.charCodeAt(0) && 61 !== s;\n          }\n\n          return !1;\n        }\n      }, {\n        key: \"expectRelational\",\n        value: function (t) {\n          this.isRelational(t) ? this.next() : this.unexpected(null, o.relational);\n        }\n      }, {\n        key: \"eatRelational\",\n        value: function (t) {\n          return !!this.isRelational(t) && (this.next(), !0);\n        }\n      }, {\n        key: \"isContextual\",\n        value: function (t) {\n          return this.match(o.name) && this.state.value === t && !this.state.containsEsc;\n        }\n      }, {\n        key: \"isUnparsedContextual\",\n        value: function (t, e) {\n          var s = t + e.length;\n          return this.input.slice(t, s) === e && (s === this.input.length || !X(this.input.charCodeAt(s)));\n        }\n      }, {\n        key: \"isLookaheadContextual\",\n        value: function (t) {\n          var e = this.nextTokenStart();\n          return this.isUnparsedContextual(e, t);\n        }\n      }, {\n        key: \"eatContextual\",\n        value: function (t) {\n          return this.isContextual(t) && this.eat(o.name);\n        }\n      }, {\n        key: \"expectContextual\",\n        value: function (t, e) {\n          this.eatContextual(t) || this.unexpected(null, e);\n        }\n      }, {\n        key: \"canInsertSemicolon\",\n        value: function () {\n          return this.match(o.eof) || this.match(o.braceR) || this.hasPrecedingLineBreak();\n        }\n      }, {\n        key: \"hasPrecedingLineBreak\",\n        value: function () {\n          return v.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n        }\n      }, {\n        key: \"isLineTerminator\",\n        value: function () {\n          return this.eat(o.semi) || this.canInsertSemicolon();\n        }\n      }, {\n        key: \"semicolon\",\n        value: function () {\n          this.isLineTerminator() || this.unexpected(null, o.semi);\n        }\n      }, {\n        key: \"expect\",\n        value: function (t, e) {\n          this.eat(t) || this.unexpected(e, t);\n        }\n      }, {\n        key: \"assertNoSpace\",\n        value: function () {\n          var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"Unexpected space.\";\n          this.state.start > this.state.lastTokEnd && this.raise(this.state.lastTokEnd, t);\n        }\n      }, {\n        key: \"unexpected\",\n        value: function (t) {\n          var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"Unexpected token\";\n          throw \"string\" != typeof e && (e = 'Unexpected token, expected \"'.concat(e.label, '\"')), this.raise(null != t ? t : this.state.start, e);\n        }\n      }, {\n        key: \"expectPlugin\",\n        value: function (t, e) {\n          if (!this.hasPlugin(t)) throw this.raise(null != e ? e : this.state.start, \"This experimental syntax requires enabling the parser plugin: '\".concat(t, \"'\"), {\n            missingPluginNames: [t]\n          });\n          return !0;\n        }\n      }, {\n        key: \"expectOnePlugin\",\n        value: function (t, e) {\n          var s = this;\n          if (!t.some(function (t) {\n            return s.hasPlugin(t);\n          })) throw this.raise(null != e ? e : this.state.start, \"This experimental syntax requires enabling one of the following parser plugin(s): '\".concat(t.join(\", \"), \"'\"), {\n            missingPluginNames: t\n          });\n        }\n      }, {\n        key: \"checkYieldAwaitInDefaultParams\",\n        value: function () {\n          -1 !== this.state.yieldPos && (-1 === this.state.awaitPos || this.state.yieldPos < this.state.awaitPos) && this.raise(this.state.yieldPos, \"Yield cannot be used as name inside a generator function\"), -1 !== this.state.awaitPos && this.raise(this.state.awaitPos, \"Await cannot be used as name inside an async function\");\n        }\n      }, {\n        key: \"strictDirective\",\n        value: function (t) {\n          for (;;) {\n            A.lastIndex = t, t += A.exec(this.input)[0].length;\n            var e = Ct.exec(this.input.slice(t));\n            if (!e) break;\n            if (\"use strict\" === e[2]) return !0;\n            t += e[0].length, A.lastIndex = t, t += A.exec(this.input)[0].length, \";\" === this.input[t] && t++;\n          }\n\n          return !1;\n        }\n      }, {\n        key: \"tryParse\",\n        value: function (t) {\n          var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.state.clone(),\n              s = {\n            node: null\n          };\n\n          try {\n            var i = t(function () {\n              var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n              throw s.node = t, s;\n            });\n\n            if (this.state.errors.length > e.errors.length) {\n              var a = this.state;\n              return this.state = e, {\n                node: i,\n                error: a.errors[e.errors.length],\n                thrown: !1,\n                aborted: !1,\n                failState: a\n              };\n            }\n\n            return {\n              node: i,\n              error: null,\n              thrown: !1,\n              aborted: !1,\n              failState: null\n            };\n          } catch (t) {\n            var r = this.state;\n            if (this.state = e, t instanceof SyntaxError) return {\n              node: null,\n              error: t,\n              thrown: !0,\n              aborted: !1,\n              failState: r\n            };\n            if (t === s) return {\n              node: s.node,\n              error: null,\n              thrown: !1,\n              aborted: !0,\n              failState: r\n            };\n            throw t;\n          }\n        }\n      }]), e;\n    }(function (t) {\n      function e(t, s) {\n        var i;\n        return d(this, e), (i = g(this, D(e).call(this))).state = new xt(), i.state.init(t), i.input = s, i.length = s.length, i.isLookahead = !1, i;\n      }\n\n      return y(e, t), m(e, [{\n        key: \"next\",\n        value: function () {\n          this.isLookahead || (this.checkKeywordEscapes(), this.options.tokens && this.state.tokens.push(new Et(this.state))), this.state.lastTokEnd = this.state.end, this.state.lastTokStart = this.state.start, this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();\n        }\n      }, {\n        key: \"eat\",\n        value: function (t) {\n          return !!this.match(t) && (this.next(), !0);\n        }\n      }, {\n        key: \"match\",\n        value: function (t) {\n          return this.state.type === t;\n        }\n      }, {\n        key: \"lookahead\",\n        value: function () {\n          var t = this.state;\n          this.state = t.clone(!0), this.isLookahead = !0, this.next(), this.isLookahead = !1;\n          var e = this.state;\n          return this.state = t, e;\n        }\n      }, {\n        key: \"nextTokenStart\",\n        value: function () {\n          var t = this.state.pos;\n          return A.lastIndex = t, t + A.exec(this.input)[0].length;\n        }\n      }, {\n        key: \"lookaheadCharCode\",\n        value: function () {\n          return this.input.charCodeAt(this.nextTokenStart());\n        }\n      }, {\n        key: \"setStrict\",\n        value: function (t) {\n          if (this.state.strict = t, this.match(o.num) || this.match(o.string)) {\n            for (this.state.pos = this.state.start; this.state.pos < this.state.lineStart;) this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1, --this.state.curLine;\n\n            this.nextToken();\n          }\n        }\n      }, {\n        key: \"curContext\",\n        value: function () {\n          return this.state.context[this.state.context.length - 1];\n        }\n      }, {\n        key: \"nextToken\",\n        value: function () {\n          var t = this.curContext();\n          t && t.preserveSpace || this.skipSpace(), this.state.containsOctal = !1, this.state.octalPosition = null, this.state.start = this.state.pos, this.state.startLoc = this.state.curPosition(), this.state.pos >= this.length ? this.finishToken(o.eof) : t.override ? t.override(this) : this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n        }\n      }, {\n        key: \"pushComment\",\n        value: function (t, e, s, i, a, r) {\n          var n = {\n            type: t ? \"CommentBlock\" : \"CommentLine\",\n            value: e,\n            start: s,\n            end: i,\n            loc: new yt(a, r)\n          };\n          this.options.tokens && this.state.tokens.push(n), this.state.comments.push(n), this.addComment(n);\n        }\n      }, {\n        key: \"skipBlockComment\",\n        value: function () {\n          var t,\n              e = this.state.curPosition(),\n              s = this.state.pos,\n              i = this.input.indexOf(\"*/\", this.state.pos + 2);\n          if (-1 === i) throw this.raise(s, \"Unterminated comment\");\n\n          for (this.state.pos = i + 2, E.lastIndex = s; (t = E.exec(this.input)) && t.index < this.state.pos;) ++this.state.curLine, this.state.lineStart = t.index + t[0].length;\n\n          this.isLookahead || this.pushComment(!0, this.input.slice(s + 2, i), s, this.state.pos, e, this.state.curPosition());\n        }\n      }, {\n        key: \"skipLineComment\",\n        value: function (t) {\n          var e = this.state.pos,\n              s = this.state.curPosition(),\n              i = this.input.charCodeAt(this.state.pos += t);\n          if (this.state.pos < this.length) for (; !C(i) && ++this.state.pos < this.length;) i = this.input.charCodeAt(this.state.pos);\n          this.isLookahead || this.pushComment(!1, this.input.slice(e + t, this.state.pos), e, this.state.pos, s, this.state.curPosition());\n        }\n      }, {\n        key: \"skipSpace\",\n        value: function () {\n          t: for (; this.state.pos < this.length;) {\n            var t = this.input.charCodeAt(this.state.pos);\n\n            switch (t) {\n              case 32:\n              case 160:\n              case 9:\n                ++this.state.pos;\n                break;\n\n              case 13:\n                10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos;\n\n              case 10:\n              case 8232:\n              case 8233:\n                ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;\n                break;\n\n              case 47:\n                switch (this.input.charCodeAt(this.state.pos + 1)) {\n                  case 42:\n                    this.skipBlockComment();\n                    break;\n\n                  case 47:\n                    this.skipLineComment(2);\n                    break;\n\n                  default:\n                    break t;\n                }\n\n                break;\n\n              default:\n                if (!w(t)) break t;\n                ++this.state.pos;\n            }\n          }\n        }\n      }, {\n        key: \"finishToken\",\n        value: function (t, e) {\n          this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();\n          var s = this.state.type;\n          this.state.type = t, this.state.value = e, this.isLookahead || this.updateContext(s);\n        }\n      }, {\n        key: \"readToken_numberSign\",\n        value: function () {\n          if (0 !== this.state.pos || !this.readToken_interpreter()) {\n            var t = this.state.pos + 1,\n                e = this.input.charCodeAt(t);\n            if (e >= 48 && e <= 57) throw this.raise(this.state.pos, \"Unexpected digit after hash token\");\n            if ((this.hasPlugin(\"classPrivateProperties\") || this.hasPlugin(\"classPrivateMethods\")) && this.state.classLevel > 0) return ++this.state.pos, void this.finishToken(o.hash);\n            if (\"smart\" !== this.getPluginOption(\"pipelineOperator\", \"proposal\")) throw this.raise(this.state.pos, \"Unexpected character '#'\");\n            this.finishOp(o.hash, 1);\n          }\n        }\n      }, {\n        key: \"readToken_dot\",\n        value: function () {\n          var t = this.input.charCodeAt(this.state.pos + 1);\n          t >= 48 && t <= 57 ? this.readNumber(!0) : 46 === t && 46 === this.input.charCodeAt(this.state.pos + 2) ? (this.state.pos += 3, this.finishToken(o.ellipsis)) : (++this.state.pos, this.finishToken(o.dot));\n        }\n      }, {\n        key: \"readToken_slash\",\n        value: function () {\n          if (this.state.exprAllowed && !this.state.inType) return ++this.state.pos, void this.readRegexp();\n          61 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(o.assign, 2) : this.finishOp(o.slash, 1);\n        }\n      }, {\n        key: \"readToken_interpreter\",\n        value: function () {\n          if (0 !== this.state.pos || this.length < 2) return !1;\n          var t = this.state.pos;\n          this.state.pos += 1;\n          var e = this.input.charCodeAt(this.state.pos);\n          if (33 !== e) return !1;\n\n          for (; !C(e) && ++this.state.pos < this.length;) e = this.input.charCodeAt(this.state.pos);\n\n          var s = this.input.slice(t + 2, this.state.pos);\n          return this.finishToken(o.interpreterDirective, s), !0;\n        }\n      }, {\n        key: \"readToken_mult_modulo\",\n        value: function (t) {\n          var e = 42 === t ? o.star : o.modulo,\n              s = 1,\n              i = this.input.charCodeAt(this.state.pos + 1),\n              a = this.state.exprAllowed;\n          42 === t && 42 === i && (s++, i = this.input.charCodeAt(this.state.pos + 2), e = o.exponent), 61 !== i || a || (s++, e = o.assign), this.finishOp(e, s);\n        }\n      }, {\n        key: \"readToken_pipe_amp\",\n        value: function (t) {\n          var e = this.input.charCodeAt(this.state.pos + 1);\n          e !== t ? 124 !== t || 62 !== e ? 61 !== e ? this.finishOp(124 === t ? o.bitwiseOR : o.bitwiseAND, 1) : this.finishOp(o.assign, 2) : this.finishOp(o.pipeline, 2) : 61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(o.assign, 3) : this.finishOp(124 === t ? o.logicalOR : o.logicalAND, 2);\n        }\n      }, {\n        key: \"readToken_caret\",\n        value: function () {\n          61 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(o.assign, 2) : this.finishOp(o.bitwiseXOR, 1);\n        }\n      }, {\n        key: \"readToken_plus_min\",\n        value: function (t) {\n          var e = this.input.charCodeAt(this.state.pos + 1);\n          if (e === t) return 45 !== e || this.inModule || 62 !== this.input.charCodeAt(this.state.pos + 2) || 0 !== this.state.lastTokEnd && !v.test(this.input.slice(this.state.lastTokEnd, this.state.pos)) ? void this.finishOp(o.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), void this.nextToken());\n          61 === e ? this.finishOp(o.assign, 2) : this.finishOp(o.plusMin, 1);\n        }\n      }, {\n        key: \"readToken_lt_gt\",\n        value: function (t) {\n          var e = this.input.charCodeAt(this.state.pos + 1),\n              s = 1;\n          return e === t ? (s = 62 === t && 62 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.state.pos + s) ? void this.finishOp(o.assign, s + 1) : void this.finishOp(o.bitShift, s)) : 33 !== e || 60 !== t || this.inModule || 45 !== this.input.charCodeAt(this.state.pos + 2) || 45 !== this.input.charCodeAt(this.state.pos + 3) ? (61 === e && (s = 2), void this.finishOp(o.relational, s)) : (this.skipLineComment(4), this.skipSpace(), void this.nextToken());\n        }\n      }, {\n        key: \"readToken_eq_excl\",\n        value: function (t) {\n          var e = this.input.charCodeAt(this.state.pos + 1);\n          if (61 !== e) return 61 === t && 62 === e ? (this.state.pos += 2, void this.finishToken(o.arrow)) : void this.finishOp(61 === t ? o.eq : o.bang, 1);\n          this.finishOp(o.equality, 61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2);\n        }\n      }, {\n        key: \"readToken_question\",\n        value: function () {\n          var t = this.input.charCodeAt(this.state.pos + 1),\n              e = this.input.charCodeAt(this.state.pos + 2);\n          63 !== t || this.state.inType ? 46 !== t || e >= 48 && e <= 57 ? (++this.state.pos, this.finishToken(o.question)) : (this.state.pos += 2, this.finishToken(o.questionDot)) : 61 === e ? this.finishOp(o.assign, 3) : this.finishOp(o.nullishCoalescing, 2);\n        }\n      }, {\n        key: \"getTokenFromCode\",\n        value: function (t) {\n          switch (t) {\n            case 46:\n              return void this.readToken_dot();\n\n            case 40:\n              return ++this.state.pos, void this.finishToken(o.parenL);\n\n            case 41:\n              return ++this.state.pos, void this.finishToken(o.parenR);\n\n            case 59:\n              return ++this.state.pos, void this.finishToken(o.semi);\n\n            case 44:\n              return ++this.state.pos, void this.finishToken(o.comma);\n\n            case 91:\n              return ++this.state.pos, void this.finishToken(o.bracketL);\n\n            case 93:\n              return ++this.state.pos, void this.finishToken(o.bracketR);\n\n            case 123:\n              return ++this.state.pos, void this.finishToken(o.braceL);\n\n            case 125:\n              return ++this.state.pos, void this.finishToken(o.braceR);\n\n            case 58:\n              return void (this.hasPlugin(\"functionBind\") && 58 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(o.doubleColon, 2) : (++this.state.pos, this.finishToken(o.colon)));\n\n            case 63:\n              return void this.readToken_question();\n\n            case 96:\n              return ++this.state.pos, void this.finishToken(o.backQuote);\n\n            case 48:\n              var e = this.input.charCodeAt(this.state.pos + 1);\n              if (120 === e || 88 === e) return void this.readRadixNumber(16);\n              if (111 === e || 79 === e) return void this.readRadixNumber(8);\n              if (98 === e || 66 === e) return void this.readRadixNumber(2);\n\n            case 49:\n            case 50:\n            case 51:\n            case 52:\n            case 53:\n            case 54:\n            case 55:\n            case 56:\n            case 57:\n              return void this.readNumber(!1);\n\n            case 34:\n            case 39:\n              return void this.readString(t);\n\n            case 47:\n              return void this.readToken_slash();\n\n            case 37:\n            case 42:\n              return void this.readToken_mult_modulo(t);\n\n            case 124:\n            case 38:\n              return void this.readToken_pipe_amp(t);\n\n            case 94:\n              return void this.readToken_caret();\n\n            case 43:\n            case 45:\n              return void this.readToken_plus_min(t);\n\n            case 60:\n            case 62:\n              return void this.readToken_lt_gt(t);\n\n            case 61:\n            case 33:\n              return void this.readToken_eq_excl(t);\n\n            case 126:\n              return void this.finishOp(o.tilde, 1);\n\n            case 64:\n              return ++this.state.pos, void this.finishToken(o.at);\n\n            case 35:\n              return void this.readToken_numberSign();\n\n            case 92:\n              return void this.readWord();\n\n            default:\n              if (K(t)) return void this.readWord();\n          }\n\n          throw this.raise(this.state.pos, \"Unexpected character '\".concat(String.fromCodePoint(t), \"'\"));\n        }\n      }, {\n        key: \"finishOp\",\n        value: function (t, e) {\n          var s = this.input.slice(this.state.pos, this.state.pos + e);\n          this.state.pos += e, this.finishToken(t, s);\n        }\n      }, {\n        key: \"readRegexp\",\n        value: function () {\n          for (var t, e, s = this.state.pos;;) {\n            if (this.state.pos >= this.length) throw this.raise(s, \"Unterminated regular expression\");\n            var i = this.input.charAt(this.state.pos);\n            if (v.test(i)) throw this.raise(s, \"Unterminated regular expression\");\n            if (t) t = !1;else {\n              if (\"[\" === i) e = !0;else if (\"]\" === i && e) e = !1;else if (\"/\" === i && !e) break;\n              t = \"\\\\\" === i;\n            }\n            ++this.state.pos;\n          }\n\n          var a = this.input.slice(s, this.state.pos);\n          ++this.state.pos;\n\n          for (var r = \"\"; this.state.pos < this.length;) {\n            var n = this.input[this.state.pos],\n                h = this.input.codePointAt(this.state.pos);\n            if (kt.has(n)) r.indexOf(n) > -1 && this.raise(this.state.pos + 1, \"Duplicate regular expression flag\");else {\n              if (!X(h) && 92 !== h) break;\n              this.raise(this.state.pos + 1, \"Invalid regular expression flag\");\n            }\n            ++this.state.pos, r += n;\n          }\n\n          this.finishToken(o.regexp, {\n            pattern: a,\n            flags: r\n          });\n        }\n      }, {\n        key: \"readInt\",\n        value: function (t, e, s) {\n          for (var i = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], a = this.state.pos, r = 16 === t ? Pt.hex : Pt.decBinOct, n = 16 === t ? bt.hex : 10 === t ? bt.dec : 8 === t ? bt.oct : bt.bin, o = !1, h = 0, u = 0, l = null == e ? 1 / 0 : e; u < l; ++u) {\n            var c = this.input.charCodeAt(this.state.pos),\n                p = void 0;\n\n            if (this.hasPlugin(\"numericSeparator\") && 95 === c) {\n              var d = this.input.charCodeAt(this.state.pos - 1),\n                  f = this.input.charCodeAt(this.state.pos + 1);\n              -1 === n.indexOf(f) ? this.raise(this.state.pos, \"A numeric separator is only allowed between two digits\") : (r.indexOf(d) > -1 || r.indexOf(f) > -1 || Number.isNaN(f)) && this.raise(this.state.pos, \"A numeric separator is only allowed between two digits\"), i || this.raise(this.state.pos, \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\"), ++this.state.pos;\n            } else {\n              if ((p = c >= 97 ? c - 97 + 10 : c >= 65 ? c - 65 + 10 : gt(c) ? c - 48 : 1 / 0) >= t) if (this.options.errorRecovery && p <= 9) p = 0, this.raise(this.state.start + u + 2, \"Expected number in radix \" + t);else {\n                if (!s) break;\n                p = 0, o = !0;\n              }\n              ++this.state.pos, h = h * t + p;\n            }\n          }\n\n          return this.state.pos === a || null != e && this.state.pos - a !== e || o ? null : h;\n        }\n      }, {\n        key: \"readRadixNumber\",\n        value: function (t) {\n          var e = this.state.pos,\n              s = !1;\n          this.state.pos += 2;\n          var i = this.readInt(t);\n          if (null == i && this.raise(this.state.start + 2, \"Expected number in radix \" + t), this.hasPlugin(\"bigInt\") && 110 === this.input.charCodeAt(this.state.pos) && (++this.state.pos, s = !0), K(this.input.codePointAt(this.state.pos))) throw this.raise(this.state.pos, \"Identifier directly after number\");\n\n          if (s) {\n            var a = this.input.slice(e, this.state.pos).replace(/[_n]/g, \"\");\n            this.finishToken(o.bigint, a);\n          } else this.finishToken(o.num, i);\n        }\n      }, {\n        key: \"readNumber\",\n        value: function (t) {\n          var e = this.state.pos,\n              s = !1,\n              i = !1,\n              a = !1;\n          t || null !== this.readInt(10) || this.raise(e, \"Invalid number\");\n          var r = this.state.pos - e >= 2 && 48 === this.input.charCodeAt(e);\n          r && (this.state.strict && this.raise(e, \"Legacy octal literals are not allowed in strict mode\"), /[89]/.test(this.input.slice(e, this.state.pos)) && (r = !1, a = !0));\n          var n = this.input.charCodeAt(this.state.pos);\n\n          if (46 !== n || r || (++this.state.pos, this.readInt(10), s = !0, n = this.input.charCodeAt(this.state.pos)), 69 !== n && 101 !== n || r || (43 !== (n = this.input.charCodeAt(++this.state.pos)) && 45 !== n || ++this.state.pos, null === this.readInt(10) && this.raise(e, \"Invalid number\"), s = !0, n = this.input.charCodeAt(this.state.pos)), this.hasPlugin(\"numericSeparator\") && (r || a)) {\n            var h = this.input.slice(e, this.state.pos).indexOf(\"_\");\n            h > 0 && this.raise(h + e, \"Numeric separator can not be used after leading 0\");\n          }\n\n          if (this.hasPlugin(\"bigInt\") && 110 === n && ((s || r || a) && this.raise(e, \"Invalid BigIntLiteral\"), ++this.state.pos, i = !0), K(this.input.codePointAt(this.state.pos))) throw this.raise(this.state.pos, \"Identifier directly after number\");\n          var u = this.input.slice(e, this.state.pos).replace(/[_n]/g, \"\");\n          if (i) this.finishToken(o.bigint, u);else {\n            var l = r ? parseInt(u, 8) : parseFloat(u);\n            this.finishToken(o.num, l);\n          }\n        }\n      }, {\n        key: \"readCodePoint\",\n        value: function (t) {\n          var e;\n\n          if (123 === this.input.charCodeAt(this.state.pos)) {\n            var s = ++this.state.pos;\n            if (e = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, !0, t), ++this.state.pos, null === e) --this.state.invalidTemplateEscapePosition;else if (e > 1114111) {\n              if (!t) return this.state.invalidTemplateEscapePosition = s - 2, null;\n              this.raise(s, \"Code point out of bounds\");\n            }\n          } else e = this.readHexChar(4, !1, t);\n\n          return e;\n        }\n      }, {\n        key: \"readString\",\n        value: function (t) {\n          for (var e = \"\", s = ++this.state.pos;;) {\n            if (this.state.pos >= this.length) throw this.raise(this.state.start, \"Unterminated string constant\");\n            var i = this.input.charCodeAt(this.state.pos);\n            if (i === t) break;\n            if (92 === i) e += this.input.slice(s, this.state.pos), e += this.readEscapedChar(!1), s = this.state.pos;else if (8232 === i || 8233 === i) ++this.state.pos, ++this.state.curLine;else {\n              if (C(i)) throw this.raise(this.state.start, \"Unterminated string constant\");\n              ++this.state.pos;\n            }\n          }\n\n          e += this.input.slice(s, this.state.pos++), this.finishToken(o.string, e);\n        }\n      }, {\n        key: \"readTmplToken\",\n        value: function () {\n          for (var t = \"\", e = this.state.pos, s = !1;;) {\n            if (this.state.pos >= this.length) throw this.raise(this.state.start, \"Unterminated template\");\n            var i = this.input.charCodeAt(this.state.pos);\n            if (96 === i || 36 === i && 123 === this.input.charCodeAt(this.state.pos + 1)) return this.state.pos === this.state.start && this.match(o.template) ? 36 === i ? (this.state.pos += 2, void this.finishToken(o.dollarBraceL)) : (++this.state.pos, void this.finishToken(o.backQuote)) : (t += this.input.slice(e, this.state.pos), void this.finishToken(o.template, s ? null : t));\n\n            if (92 === i) {\n              t += this.input.slice(e, this.state.pos);\n              var a = this.readEscapedChar(!0);\n              null === a ? s = !0 : t += a, e = this.state.pos;\n            } else if (C(i)) {\n              switch (t += this.input.slice(e, this.state.pos), ++this.state.pos, i) {\n                case 13:\n                  10 === this.input.charCodeAt(this.state.pos) && ++this.state.pos;\n\n                case 10:\n                  t += \"\\n\";\n                  break;\n\n                default:\n                  t += String.fromCharCode(i);\n              }\n\n              ++this.state.curLine, this.state.lineStart = this.state.pos, e = this.state.pos;\n            } else ++this.state.pos;\n          }\n        }\n      }, {\n        key: \"readEscapedChar\",\n        value: function (t) {\n          var e = !t,\n              s = this.input.charCodeAt(++this.state.pos);\n\n          switch (++this.state.pos, s) {\n            case 110:\n              return \"\\n\";\n\n            case 114:\n              return \"\\r\";\n\n            case 120:\n              var i = this.readHexChar(2, !1, e);\n              return null === i ? null : String.fromCharCode(i);\n\n            case 117:\n              var a = this.readCodePoint(e);\n              return null === a ? null : String.fromCodePoint(a);\n\n            case 116:\n              return \"\\t\";\n\n            case 98:\n              return \"\\b\";\n\n            case 118:\n              return \"\\v\";\n\n            case 102:\n              return \"\\f\";\n\n            case 13:\n              10 === this.input.charCodeAt(this.state.pos) && ++this.state.pos;\n\n            case 10:\n              this.state.lineStart = this.state.pos, ++this.state.curLine;\n\n            case 8232:\n            case 8233:\n              return \"\";\n\n            case 56:\n            case 57:\n              if (t) {\n                var r = this.state.pos - 1;\n                return this.state.invalidTemplateEscapePosition = r, null;\n              }\n\n            default:\n              if (s >= 48 && s <= 55) {\n                var n = this.state.pos - 1,\n                    o = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0],\n                    h = parseInt(o, 8);\n                h > 255 && (o = o.slice(0, -1), h = parseInt(o, 8)), this.state.pos += o.length - 1;\n                var u = this.input.charCodeAt(this.state.pos);\n\n                if (\"0\" !== o || 56 === u || 57 === u) {\n                  if (t) return this.state.invalidTemplateEscapePosition = n, null;\n                  this.state.strict ? this.raise(n, \"Octal literal in strict mode\") : this.state.containsOctal || (this.state.containsOctal = !0, this.state.octalPosition = n);\n                }\n\n                return String.fromCharCode(h);\n              }\n\n              return String.fromCharCode(s);\n          }\n        }\n      }, {\n        key: \"readHexChar\",\n        value: function (t, e, s) {\n          var i = this.state.pos,\n              a = this.readInt(16, t, e, !1);\n          return null === a && (s ? this.raise(i, \"Bad character escape sequence\") : (this.state.pos = i - 1, this.state.invalidTemplateEscapePosition = i - 1)), a;\n        }\n      }, {\n        key: \"readWord1\",\n        value: function () {\n          var t = \"\";\n          this.state.containsEsc = !1;\n\n          for (var e = this.state.pos, s = this.state.pos; this.state.pos < this.length;) {\n            var i = this.input.codePointAt(this.state.pos);\n            if (X(i)) this.state.pos += i <= 65535 ? 1 : 2;else if (this.state.isIterator && 64 === i) ++this.state.pos;else {\n              if (92 !== i) break;\n              this.state.containsEsc = !0, t += this.input.slice(s, this.state.pos);\n              var a = this.state.pos,\n                  r = this.state.pos === e ? K : X;\n\n              if (117 !== this.input.charCodeAt(++this.state.pos)) {\n                this.raise(this.state.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n                continue;\n              }\n\n              ++this.state.pos;\n              var n = this.readCodePoint(!0);\n              null !== n && (r(n) || this.raise(a, \"Invalid Unicode escape\"), t += String.fromCodePoint(n)), s = this.state.pos;\n            }\n          }\n\n          return t + this.input.slice(s, this.state.pos);\n        }\n      }, {\n        key: \"isIterator\",\n        value: function (t) {\n          return \"@@iterator\" === t || \"@@asyncIterator\" === t;\n        }\n      }, {\n        key: \"readWord\",\n        value: function () {\n          var t = this.readWord1(),\n              e = a.get(t) || o.name;\n          !this.state.isIterator || this.isIterator(t) && this.state.inType || this.raise(this.state.pos, \"Invalid identifier \".concat(t)), this.finishToken(e, t);\n        }\n      }, {\n        key: \"checkKeywordEscapes\",\n        value: function () {\n          var t = this.state.type.keyword;\n          t && this.state.containsEsc && this.raise(this.state.start, \"Escape sequence in keyword \".concat(t));\n        }\n      }, {\n        key: \"braceIsBlock\",\n        value: function (t) {\n          var e = this.curContext();\n          return e === F.functionExpression || e === F.functionStatement || (t !== o.colon || e !== F.braceStatement && e !== F.braceExpression ? t === o._return || t === o.name && this.state.exprAllowed ? v.test(this.input.slice(this.state.lastTokEnd, this.state.start)) : t === o._else || t === o.semi || t === o.eof || t === o.parenR || t === o.arrow || (t === o.braceL ? e === F.braceStatement : t !== o._var && t !== o._const && t !== o.name && (t === o.relational || !this.state.exprAllowed)) : !e.isExpr);\n        }\n      }, {\n        key: \"updateContext\",\n        value: function (t) {\n          var e,\n              s = this.state.type;\n          !s.keyword || t !== o.dot && t !== o.questionDot ? (e = s.updateContext) ? e.call(this, t) : this.state.exprAllowed = s.beforeExpr : this.state.exprAllowed = !1;\n        }\n      }]), e;\n    }(vt)),\n        wt = function () {\n      function t(e, s, i) {\n        d(this, t), this.type = \"\", this.start = s, this.end = 0, this.loc = new yt(i), e && e.options.ranges && (this.range = [s, 0]), e && e.filename && (this.loc.filename = e.filename);\n      }\n\n      return m(t, [{\n        key: \"__clone\",\n        value: function () {\n          for (var e = new t(), s = Object.keys(this), i = 0, a = s.length; i < a; i++) {\n            var r = s[i];\n            \"leadingComments\" !== r && \"trailingComments\" !== r && \"innerComments\" !== r && (e[r] = this[r]);\n          }\n\n          return e;\n        }\n      }]), t;\n    }(),\n        Tt = {\n      kind: \"loop\"\n    },\n        Ft = {\n      kind: \"switch\"\n    },\n        Nt = function (t) {\n      function e(t, s) {\n        var i;\n        d(this, e), t = function (t) {\n          for (var e = {}, s = 0, i = Object.keys(ft); s < i.length; s++) {\n            var a = i[s];\n            e[a] = t && null != t[a] ? t[a] : ft[a];\n          }\n\n          return e;\n        }(t);\n        var a = (i = g(this, D(e).call(this, t, s))).getScopeHandler();\n        return i.options = t, i.inModule = \"module\" === i.options.sourceType, i.scope = new a(i.raise.bind(x(i)), i.inModule), i.plugins = function (t) {\n          for (var e = new Map(), s = 0; s < t.length; s++) {\n            var i = t[s],\n                a = P(Array.isArray(i) ? i : [i, {}], 2),\n                r = a[0],\n                n = a[1];\n            e.has(r) || e.set(r, n || {});\n          }\n\n          return e;\n        }(i.options.plugins), i.filename = t.sourceFilename, i;\n      }\n\n      return y(e, t), m(e, [{\n        key: \"getScopeHandler\",\n        value: function () {\n          return at;\n        }\n      }, {\n        key: \"parse\",\n        value: function () {\n          this.scope.enter(1);\n          var t = this.startNode(),\n              e = this.startNode();\n          return this.nextToken(), t.errors = null, this.parseTopLevel(t, e), t.errors = this.state.errors, t;\n        }\n      }]), e;\n    }(function (t) {\n      function e() {\n        return d(this, e), g(this, D(e).apply(this, arguments));\n      }\n\n      return y(e, t), m(e, [{\n        key: \"parseTopLevel\",\n        value: function (t, e) {\n          if (e.sourceType = this.options.sourceType, e.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(e, !0, !0, o.eof), this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) for (var s = 0, i = Array.from(this.scope.undefinedExports); s < i.length; s++) {\n            var a = P(i[s], 1)[0],\n                r = this.scope.undefinedExports.get(a);\n            this.raise(r, \"Export '\".concat(a, \"' is not defined\"));\n          }\n          return t.program = this.finishNode(e, \"Program\"), t.comments = this.state.comments, this.options.tokens && (t.tokens = this.state.tokens), this.finishNode(t, \"File\");\n        }\n      }, {\n        key: \"stmtToDirective\",\n        value: function (t) {\n          var e = t.expression,\n              s = this.startNodeAt(e.start, e.loc.start),\n              i = this.startNodeAt(t.start, t.loc.start),\n              a = this.input.slice(e.start, e.end),\n              r = s.value = a.slice(1, -1);\n          return this.addExtra(s, \"raw\", a), this.addExtra(s, \"rawValue\", r), i.value = this.finishNodeAt(s, \"DirectiveLiteral\", e.end, e.loc.end), this.finishNodeAt(i, \"Directive\", t.end, t.loc.end);\n        }\n      }, {\n        key: \"parseInterpreterDirective\",\n        value: function () {\n          if (!this.match(o.interpreterDirective)) return null;\n          var t = this.startNode();\n          return t.value = this.state.value, this.next(), this.finishNode(t, \"InterpreterDirective\");\n        }\n      }, {\n        key: \"isLet\",\n        value: function (t) {\n          if (!this.isContextual(\"let\")) return !1;\n          var e = this.nextTokenStart(),\n              s = this.input.charCodeAt(e);\n          if (91 === s) return !0;\n          if (t) return !1;\n          if (123 === s) return !0;\n\n          if (K(s)) {\n            for (var i = e + 1; X(this.input.charCodeAt(i));) ++i;\n\n            var a = this.input.slice(e, i);\n            if (!R.test(a)) return !0;\n          }\n\n          return !1;\n        }\n      }, {\n        key: \"parseStatement\",\n        value: function (t, e) {\n          return this.match(o.at) && this.parseDecorators(!0), this.parseStatementContent(t, e);\n        }\n      }, {\n        key: \"parseStatementContent\",\n        value: function (t, e) {\n          var s,\n              i = this.state.type,\n              a = this.startNode();\n\n          switch (this.isLet(t) && (i = o._var, s = \"let\"), i) {\n            case o._break:\n            case o._continue:\n              return this.parseBreakContinueStatement(a, i.keyword);\n\n            case o._debugger:\n              return this.parseDebuggerStatement(a);\n\n            case o._do:\n              return this.parseDoStatement(a);\n\n            case o._for:\n              return this.parseForStatement(a);\n\n            case o._function:\n              if (46 === this.lookaheadCharCode()) break;\n              return t && (this.state.strict ? this.raise(this.state.start, \"In strict mode code, functions can only be declared at top level or inside a block\") : \"if\" !== t && \"label\" !== t && this.raise(this.state.start, \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\")), this.parseFunctionStatement(a, !1, !t);\n\n            case o._class:\n              return t && this.unexpected(), this.parseClass(a, !0);\n\n            case o._if:\n              return this.parseIfStatement(a);\n\n            case o._return:\n              return this.parseReturnStatement(a);\n\n            case o._switch:\n              return this.parseSwitchStatement(a);\n\n            case o._throw:\n              return this.parseThrowStatement(a);\n\n            case o._try:\n              return this.parseTryStatement(a);\n\n            case o._const:\n            case o._var:\n              return s = s || this.state.value, t && \"var\" !== s && this.raise(this.state.start, \"Lexical declaration cannot appear in a single-statement context\"), this.parseVarStatement(a, s);\n\n            case o._while:\n              return this.parseWhileStatement(a);\n\n            case o._with:\n              return this.parseWithStatement(a);\n\n            case o.braceL:\n              return this.parseBlock();\n\n            case o.semi:\n              return this.parseEmptyStatement(a);\n\n            case o._export:\n            case o._import:\n              var r,\n                  n = this.lookaheadCharCode();\n              if (40 === n || 46 === n) break;\n              return this.options.allowImportExportEverywhere || e || this.raise(this.state.start, \"'import' and 'export' may only appear at the top level\"), this.next(), i === o._import ? \"ImportDeclaration\" !== (r = this.parseImport(a)).type || r.importKind && \"value\" !== r.importKind || (this.sawUnambiguousESM = !0) : (\"ExportNamedDeclaration\" !== (r = this.parseExport(a)).type || r.exportKind && \"value\" !== r.exportKind) && (\"ExportAllDeclaration\" !== r.type || r.exportKind && \"value\" !== r.exportKind) && \"ExportDefaultDeclaration\" !== r.type || (this.sawUnambiguousESM = !0), this.assertModuleNodeAllowed(a), r;\n\n            default:\n              if (this.isAsyncFunction()) return t && this.raise(this.state.start, \"Async functions can only be declared at the top level or inside a block\"), this.next(), this.parseFunctionStatement(a, !0, !t);\n          }\n\n          var h = this.state.value,\n              u = this.parseExpression();\n          return i === o.name && \"Identifier\" === u.type && this.eat(o.colon) ? this.parseLabeledStatement(a, h, u, t) : this.parseExpressionStatement(a, u);\n        }\n      }, {\n        key: \"assertModuleNodeAllowed\",\n        value: function (t) {\n          this.options.allowImportExportEverywhere || this.inModule || this.raise(t.start, \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\", {\n            code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n          });\n        }\n      }, {\n        key: \"takeDecorators\",\n        value: function (t) {\n          var e = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n          e.length && (t.decorators = e, this.resetStartLocationFromNode(t, e[0]), this.state.decoratorStack[this.state.decoratorStack.length - 1] = []);\n        }\n      }, {\n        key: \"canHaveLeadingDecorator\",\n        value: function () {\n          return this.match(o._class);\n        }\n      }, {\n        key: \"parseDecorators\",\n        value: function (t) {\n          for (var e = this.state.decoratorStack[this.state.decoratorStack.length - 1]; this.match(o.at);) {\n            var s = this.parseDecorator();\n            e.push(s);\n          }\n\n          if (this.match(o._export)) t || this.unexpected(), this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") && this.raise(this.state.start, \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\");else if (!this.canHaveLeadingDecorator()) throw this.raise(this.state.start, \"Leading decorators must be attached to a class declaration\");\n        }\n      }, {\n        key: \"parseDecorator\",\n        value: function () {\n          this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n          var t = this.startNode();\n\n          if (this.next(), this.hasPlugin(\"decorators\")) {\n            this.state.decoratorStack.push([]);\n            var e,\n                s = this.state.start,\n                i = this.state.startLoc;\n            if (this.eat(o.parenL)) e = this.parseExpression(), this.expect(o.parenR);else for (e = this.parseIdentifier(!1); this.eat(o.dot);) {\n              var a = this.startNodeAt(s, i);\n              a.object = e, a.property = this.parseIdentifier(!0), a.computed = !1, e = this.finishNode(a, \"MemberExpression\");\n            }\n            t.expression = this.parseMaybeDecoratorArguments(e), this.state.decoratorStack.pop();\n          } else t.expression = this.parseExprSubscripts();\n\n          return this.finishNode(t, \"Decorator\");\n        }\n      }, {\n        key: \"parseMaybeDecoratorArguments\",\n        value: function (t) {\n          if (this.eat(o.parenL)) {\n            var e = this.startNodeAtNode(t);\n            return e.callee = t, e.arguments = this.parseCallExpressionArguments(o.parenR, !1), this.toReferencedList(e.arguments), this.finishNode(e, \"CallExpression\");\n          }\n\n          return t;\n        }\n      }, {\n        key: \"parseBreakContinueStatement\",\n        value: function (t, e) {\n          var s = \"break\" === e;\n          return this.next(), this.isLineTerminator() ? t.label = null : (t.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(t, e), this.finishNode(t, s ? \"BreakStatement\" : \"ContinueStatement\");\n        }\n      }, {\n        key: \"verifyBreakContinue\",\n        value: function (t, e) {\n          var s,\n              i = \"break\" === e;\n\n          for (s = 0; s < this.state.labels.length; ++s) {\n            var a = this.state.labels[s];\n\n            if (null == t.label || a.name === t.label.name) {\n              if (null != a.kind && (i || \"loop\" === a.kind)) break;\n              if (t.label && i) break;\n            }\n          }\n\n          s === this.state.labels.length && this.raise(t.start, \"Unsyntactic \" + e);\n        }\n      }, {\n        key: \"parseDebuggerStatement\",\n        value: function (t) {\n          return this.next(), this.semicolon(), this.finishNode(t, \"DebuggerStatement\");\n        }\n      }, {\n        key: \"parseHeaderExpression\",\n        value: function () {\n          this.expect(o.parenL);\n          var t = this.parseExpression();\n          return this.expect(o.parenR), t;\n        }\n      }, {\n        key: \"parseDoStatement\",\n        value: function (t) {\n          var e = this;\n          return this.next(), this.state.labels.push(Tt), t.body = this.withTopicForbiddingContext(function () {\n            return e.parseStatement(\"do\");\n          }), this.state.labels.pop(), this.expect(o._while), t.test = this.parseHeaderExpression(), this.eat(o.semi), this.finishNode(t, \"DoWhileStatement\");\n        }\n      }, {\n        key: \"parseForStatement\",\n        value: function (t) {\n          this.next(), this.state.labels.push(Tt);\n          var e = -1;\n          if (this.isAwaitAllowed() && this.eatContextual(\"await\") && (e = this.state.lastTokStart), this.scope.enter(0), this.expect(o.parenL), this.match(o.semi)) return e > -1 && this.unexpected(e), this.parseFor(t, null);\n          var s = this.isLet();\n\n          if (this.match(o._var) || this.match(o._const) || s) {\n            var i = this.startNode(),\n                a = s ? \"let\" : this.state.value;\n            return this.next(), this.parseVar(i, !0, a), this.finishNode(i, \"VariableDeclaration\"), (this.match(o._in) || this.isContextual(\"of\")) && 1 === i.declarations.length ? this.parseForIn(t, i, e) : (e > -1 && this.unexpected(e), this.parseFor(t, i));\n          }\n\n          var r = {\n            start: 0\n          },\n              n = this.parseExpression(!0, r);\n\n          if (this.match(o._in) || this.isContextual(\"of\")) {\n            var h = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n            return this.toAssignable(n, void 0, h), this.checkLVal(n, void 0, void 0, h), this.parseForIn(t, n, e);\n          }\n\n          return r.start && this.unexpected(r.start), e > -1 && this.unexpected(e), this.parseFor(t, n);\n        }\n      }, {\n        key: \"parseFunctionStatement\",\n        value: function (t, e, s) {\n          return this.next(), this.parseFunction(t, 1 | (s ? 0 : 2), e);\n        }\n      }, {\n        key: \"parseIfStatement\",\n        value: function (t) {\n          return this.next(), t.test = this.parseHeaderExpression(), t.consequent = this.parseStatement(\"if\"), t.alternate = this.eat(o._else) ? this.parseStatement(\"if\") : null, this.finishNode(t, \"IfStatement\");\n        }\n      }, {\n        key: \"parseReturnStatement\",\n        value: function (t) {\n          return this.scope.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.state.start, \"'return' outside of function\"), this.next(), this.isLineTerminator() ? t.argument = null : (t.argument = this.parseExpression(), this.semicolon()), this.finishNode(t, \"ReturnStatement\");\n        }\n      }, {\n        key: \"parseSwitchStatement\",\n        value: function (t) {\n          this.next(), t.discriminant = this.parseHeaderExpression();\n          var e,\n              s,\n              i = t.cases = [];\n\n          for (this.expect(o.braceL), this.state.labels.push(Ft), this.scope.enter(0); !this.match(o.braceR);) if (this.match(o._case) || this.match(o._default)) {\n            var a = this.match(o._case);\n            e && this.finishNode(e, \"SwitchCase\"), i.push(e = this.startNode()), e.consequent = [], this.next(), a ? e.test = this.parseExpression() : (s && this.raise(this.state.lastTokStart, \"Multiple default clauses\"), s = !0, e.test = null), this.expect(o.colon);\n          } else e ? e.consequent.push(this.parseStatement(null)) : this.unexpected();\n\n          return this.scope.exit(), e && this.finishNode(e, \"SwitchCase\"), this.next(), this.state.labels.pop(), this.finishNode(t, \"SwitchStatement\");\n        }\n      }, {\n        key: \"parseThrowStatement\",\n        value: function (t) {\n          return this.next(), v.test(this.input.slice(this.state.lastTokEnd, this.state.start)) && this.raise(this.state.lastTokEnd, \"Illegal newline after throw\"), t.argument = this.parseExpression(), this.semicolon(), this.finishNode(t, \"ThrowStatement\");\n        }\n      }, {\n        key: \"parseTryStatement\",\n        value: function (t) {\n          var e = this;\n\n          if (this.next(), t.block = this.parseBlock(), t.handler = null, this.match(o._catch)) {\n            var s = this.startNode();\n\n            if (this.next(), this.match(o.parenL)) {\n              this.expect(o.parenL), s.param = this.parseBindingAtom();\n              var i = \"Identifier\" === s.param.type;\n              this.scope.enter(i ? 32 : 0), this.checkLVal(s.param, 9, null, \"catch clause\"), this.expect(o.parenR);\n            } else s.param = null, this.scope.enter(0);\n\n            s.body = this.withTopicForbiddingContext(function () {\n              return e.parseBlock(!1, !1);\n            }), this.scope.exit(), t.handler = this.finishNode(s, \"CatchClause\");\n          }\n\n          return t.finalizer = this.eat(o._finally) ? this.parseBlock() : null, t.handler || t.finalizer || this.raise(t.start, \"Missing catch or finally clause\"), this.finishNode(t, \"TryStatement\");\n        }\n      }, {\n        key: \"parseVarStatement\",\n        value: function (t, e) {\n          return this.next(), this.parseVar(t, !1, e), this.semicolon(), this.finishNode(t, \"VariableDeclaration\");\n        }\n      }, {\n        key: \"parseWhileStatement\",\n        value: function (t) {\n          var e = this;\n          return this.next(), t.test = this.parseHeaderExpression(), this.state.labels.push(Tt), t.body = this.withTopicForbiddingContext(function () {\n            return e.parseStatement(\"while\");\n          }), this.state.labels.pop(), this.finishNode(t, \"WhileStatement\");\n        }\n      }, {\n        key: \"parseWithStatement\",\n        value: function (t) {\n          var e = this;\n          return this.state.strict && this.raise(this.state.start, \"'with' in strict mode\"), this.next(), t.object = this.parseHeaderExpression(), t.body = this.withTopicForbiddingContext(function () {\n            return e.parseStatement(\"with\");\n          }), this.finishNode(t, \"WithStatement\");\n        }\n      }, {\n        key: \"parseEmptyStatement\",\n        value: function (t) {\n          return this.next(), this.finishNode(t, \"EmptyStatement\");\n        }\n      }, {\n        key: \"parseLabeledStatement\",\n        value: function (t, e, s, i) {\n          for (var a = 0, r = this.state.labels; a < r.length; a++) {\n            r[a].name === e && this.raise(s.start, \"Label '\".concat(e, \"' is already declared\"));\n          }\n\n          for (var n = this.state.type.isLoop ? \"loop\" : this.match(o._switch) ? \"switch\" : null, h = this.state.labels.length - 1; h >= 0; h--) {\n            var u = this.state.labels[h];\n            if (u.statementStart !== t.start) break;\n            u.statementStart = this.state.start, u.kind = n;\n          }\n\n          return this.state.labels.push({\n            name: e,\n            kind: n,\n            statementStart: this.state.start\n          }), t.body = this.parseStatement(i ? -1 === i.indexOf(\"label\") ? i + \"label\" : i : \"label\"), this.state.labels.pop(), t.label = s, this.finishNode(t, \"LabeledStatement\");\n        }\n      }, {\n        key: \"parseExpressionStatement\",\n        value: function (t, e) {\n          return t.expression = e, this.semicolon(), this.finishNode(t, \"ExpressionStatement\");\n        }\n      }, {\n        key: \"parseBlock\",\n        value: function () {\n          var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n              e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n              s = this.startNode();\n          return this.expect(o.braceL), e && this.scope.enter(0), this.parseBlockBody(s, t, !1, o.braceR), e && this.scope.exit(), this.finishNode(s, \"BlockStatement\");\n        }\n      }, {\n        key: \"isValidDirective\",\n        value: function (t) {\n          return \"ExpressionStatement\" === t.type && \"StringLiteral\" === t.expression.type && !t.expression.extra.parenthesized;\n        }\n      }, {\n        key: \"parseBlockBody\",\n        value: function (t, e, s, i) {\n          var a = t.body = [],\n              r = t.directives = [];\n          this.parseBlockOrModuleBlockBody(a, e ? r : void 0, s, i);\n        }\n      }, {\n        key: \"parseBlockOrModuleBlockBody\",\n        value: function (t, e, s, i) {\n          for (var a, r, n = !1; !this.eat(i);) {\n            n || !this.state.containsOctal || r || (r = this.state.octalPosition);\n            var o = this.parseStatement(null, s);\n\n            if (e && !n && this.isValidDirective(o)) {\n              var h = this.stmtToDirective(o);\n              e.push(h), void 0 === a && \"use strict\" === h.value.value && (a = this.state.strict, this.setStrict(!0), r && this.raise(r, \"Octal literal in strict mode\"));\n            } else n = !0, t.push(o);\n          }\n\n          !1 === a && this.setStrict(!1);\n        }\n      }, {\n        key: \"parseFor\",\n        value: function (t, e) {\n          var s = this;\n          return t.init = e, this.expect(o.semi), t.test = this.match(o.semi) ? null : this.parseExpression(), this.expect(o.semi), t.update = this.match(o.parenR) ? null : this.parseExpression(), this.expect(o.parenR), t.body = this.withTopicForbiddingContext(function () {\n            return s.parseStatement(\"for\");\n          }), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, \"ForStatement\");\n        }\n      }, {\n        key: \"parseForIn\",\n        value: function (t, e, s) {\n          var i = this,\n              a = this.match(o._in);\n          return this.next(), a ? s > -1 && this.unexpected(s) : t.await = s > -1, \"VariableDeclaration\" !== e.type || null == e.declarations[0].init || a && !this.state.strict && \"var\" === e.kind && \"Identifier\" === e.declarations[0].id.type ? \"AssignmentPattern\" === e.type && this.raise(e.start, \"Invalid left-hand side in for-loop\") : this.raise(e.start, \"\".concat(a ? \"for-in\" : \"for-of\", \" loop variable declaration may not have an initializer\")), t.left = e, t.right = a ? this.parseExpression() : this.parseMaybeAssign(), this.expect(o.parenR), t.body = this.withTopicForbiddingContext(function () {\n            return i.parseStatement(\"for\");\n          }), this.scope.exit(), this.state.labels.pop(), this.finishNode(t, a ? \"ForInStatement\" : \"ForOfStatement\");\n        }\n      }, {\n        key: \"parseVar\",\n        value: function (t, e, s) {\n          var i = t.declarations = [],\n              a = this.hasPlugin(\"typescript\");\n\n          for (t.kind = s;;) {\n            var r = this.startNode();\n            if (this.parseVarId(r, s), this.eat(o.eq) ? r.init = this.parseMaybeAssign(e) : (\"const\" !== s || this.match(o._in) || this.isContextual(\"of\") ? \"Identifier\" === r.id.type || e && (this.match(o._in) || this.isContextual(\"of\")) || this.raise(this.state.lastTokEnd, \"Complex binding patterns require an initialization value\") : a || this.unexpected(), r.init = null), i.push(this.finishNode(r, \"VariableDeclarator\")), !this.eat(o.comma)) break;\n          }\n\n          return t;\n        }\n      }, {\n        key: \"parseVarId\",\n        value: function (t, e) {\n          t.id = this.parseBindingAtom(), this.checkLVal(t.id, \"var\" === e ? 5 : 9, void 0, \"variable declaration\", \"var\" !== e);\n        }\n      }, {\n        key: \"parseFunction\",\n        value: function (t) {\n          var e = this,\n              s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n              i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n              a = 1 & s,\n              r = 2 & s,\n              n = !(!a || 4 & s);\n          this.initFunction(t, i), this.match(o.star) && r && this.raise(this.state.start, \"Generators can only be declared at the top level or inside a block\"), t.generator = this.eat(o.star), a && (t.id = this.parseFunctionId(n));\n          var h = this.state.maybeInArrowParameters,\n              u = this.state.inClassProperty,\n              l = this.state.yieldPos,\n              c = this.state.awaitPos;\n          return this.state.maybeInArrowParameters = !1, this.state.inClassProperty = !1, this.state.yieldPos = -1, this.state.awaitPos = -1, this.scope.enter(p(t.async, t.generator)), a || (t.id = this.parseFunctionId()), this.parseFunctionParams(t), this.withTopicForbiddingContext(function () {\n            e.parseFunctionBodyAndFinish(t, a ? \"FunctionDeclaration\" : \"FunctionExpression\");\n          }), this.scope.exit(), a && !r && this.registerFunctionStatementId(t), this.state.maybeInArrowParameters = h, this.state.inClassProperty = u, this.state.yieldPos = l, this.state.awaitPos = c, t;\n        }\n      }, {\n        key: \"parseFunctionId\",\n        value: function (t) {\n          return t || this.match(o.name) ? this.parseIdentifier() : null;\n        }\n      }, {\n        key: \"parseFunctionParams\",\n        value: function (t, e) {\n          var s = this.state.inParameters;\n          this.state.inParameters = !0, this.expect(o.parenL), t.params = this.parseBindingList(o.parenR, 41, !1, e), this.state.inParameters = s, this.checkYieldAwaitInDefaultParams();\n        }\n      }, {\n        key: \"registerFunctionStatementId\",\n        value: function (t) {\n          t.id && this.scope.declareName(t.id.name, this.state.strict || t.generator || t.async ? this.scope.treatFunctionsAsVar ? 5 : 9 : 17, t.id.start);\n        }\n      }, {\n        key: \"parseClass\",\n        value: function (t, e, s) {\n          this.next(), this.takeDecorators(t);\n          var i = this.state.strict;\n          return this.state.strict = !0, this.parseClassId(t, e, s), this.parseClassSuper(t), t.body = this.parseClassBody(!!t.superClass), this.state.strict = i, this.finishNode(t, e ? \"ClassDeclaration\" : \"ClassExpression\");\n        }\n      }, {\n        key: \"isClassProperty\",\n        value: function () {\n          return this.match(o.eq) || this.match(o.semi) || this.match(o.braceR);\n        }\n      }, {\n        key: \"isClassMethod\",\n        value: function () {\n          return this.match(o.parenL);\n        }\n      }, {\n        key: \"isNonstaticConstructor\",\n        value: function (t) {\n          return !(t.computed || t.static || \"constructor\" !== t.key.name && \"constructor\" !== t.key.value);\n        }\n      }, {\n        key: \"parseClassBody\",\n        value: function (t) {\n          var e = this;\n          this.state.classLevel++;\n          var s = {\n            hadConstructor: !1\n          },\n              i = [],\n              a = this.startNode();\n          if (a.body = [], this.expect(o.braceL), this.withTopicForbiddingContext(function () {\n            for (; !e.eat(o.braceR);) if (e.eat(o.semi)) {\n              if (i.length > 0) throw e.raise(e.state.lastTokEnd, \"Decorators must not be followed by a semicolon\");\n            } else if (e.match(o.at)) i.push(e.parseDecorator());else {\n              var r = e.startNode();\n              i.length && (r.decorators = i, e.resetStartLocationFromNode(r, i[0]), i = []), e.parseClassMember(a, r, s, t), \"constructor\" === r.kind && r.decorators && r.decorators.length > 0 && e.raise(r.start, \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\");\n            }\n          }), i.length) throw this.raise(this.state.start, \"You have trailing decorators with no method\");\n          return this.state.classLevel--, this.finishNode(a, \"ClassBody\");\n        }\n      }, {\n        key: \"parseClassMember\",\n        value: function (t, e, s, i) {\n          var a = !1,\n              r = this.state.containsEsc;\n\n          if (this.match(o.name) && \"static\" === this.state.value) {\n            var n = this.parseIdentifier(!0);\n\n            if (this.isClassMethod()) {\n              var h = e;\n              return h.kind = \"method\", h.computed = !1, h.key = n, h.static = !1, void this.pushClassMethod(t, h, !1, !1, !1, !1);\n            }\n\n            if (this.isClassProperty()) {\n              var u = e;\n              return u.computed = !1, u.key = n, u.static = !1, void t.body.push(this.parseClassProperty(u));\n            }\n\n            if (r) throw this.unexpected();\n            a = !0;\n          }\n\n          this.parseClassMemberWithIsStatic(t, e, s, a, i);\n        }\n      }, {\n        key: \"parseClassMemberWithIsStatic\",\n        value: function (t, e, s, i, a) {\n          var r = e,\n              n = e,\n              h = e,\n              u = e,\n              l = r,\n              c = r;\n          if (e.static = i, this.eat(o.star)) return l.kind = \"method\", this.parseClassPropertyName(l), \"PrivateName\" === l.key.type ? void this.pushClassPrivateMethod(t, n, !0, !1) : (this.isNonstaticConstructor(r) && this.raise(r.key.start, \"Constructor can't be a generator\"), void this.pushClassMethod(t, r, !0, !1, !1, !1));\n          var p = this.state.containsEsc,\n              d = this.parseClassPropertyName(e),\n              f = \"PrivateName\" === d.type,\n              m = \"Identifier\" === d.type,\n              y = this.state.start;\n\n          if (this.parsePostMemberNameModifiers(c), this.isClassMethod()) {\n            if (l.kind = \"method\", f) return void this.pushClassPrivateMethod(t, n, !1, !1);\n            var D = this.isNonstaticConstructor(r),\n                v = !1;\n            D && (r.kind = \"constructor\", s.hadConstructor && !this.hasPlugin(\"typescript\") && this.raise(d.start, \"Duplicate constructor in the same class\"), s.hadConstructor = !0, v = a), this.pushClassMethod(t, r, !1, !1, D, v);\n          } else if (this.isClassProperty()) f ? this.pushClassPrivateProperty(t, u) : this.pushClassProperty(t, h);else if (!m || \"async\" !== d.name || p || this.isLineTerminator()) !m || \"get\" !== d.name && \"set\" !== d.name || p || this.match(o.star) && this.isLineTerminator() ? this.isLineTerminator() ? f ? this.pushClassPrivateProperty(t, u) : this.pushClassProperty(t, h) : this.unexpected() : (l.kind = d.name, this.parseClassPropertyName(r), \"PrivateName\" === l.key.type ? this.pushClassPrivateMethod(t, n, !1, !1) : (this.isNonstaticConstructor(r) && this.raise(r.key.start, \"Constructor can't have get/set modifier\"), this.pushClassMethod(t, r, !1, !1, !1, !1)), this.checkGetterSetterParams(r));else {\n            var x = this.eat(o.star);\n            c.optional && this.unexpected(y), l.kind = \"method\", this.parseClassPropertyName(l), \"PrivateName\" === l.key.type ? this.pushClassPrivateMethod(t, n, x, !0) : (this.isNonstaticConstructor(r) && this.raise(r.key.start, \"Constructor can't be an async function\"), this.pushClassMethod(t, r, x, !0, !1, !1));\n          }\n        }\n      }, {\n        key: \"parseClassPropertyName\",\n        value: function (t) {\n          var e = this.parsePropertyName(t);\n          return t.computed || !t.static || \"prototype\" !== e.name && \"prototype\" !== e.value || this.raise(e.start, \"Classes may not have static property named prototype\"), \"PrivateName\" === e.type && \"constructor\" === e.id.name && this.raise(e.start, \"Classes may not have a private field named '#constructor'\"), e;\n        }\n      }, {\n        key: \"pushClassProperty\",\n        value: function (t, e) {\n          e.computed || \"constructor\" !== e.key.name && \"constructor\" !== e.key.value || this.raise(e.key.start, \"Classes may not have a field named 'constructor'\"), t.body.push(this.parseClassProperty(e));\n        }\n      }, {\n        key: \"pushClassPrivateProperty\",\n        value: function (t, e) {\n          this.expectPlugin(\"classPrivateProperties\", e.key.start), t.body.push(this.parseClassPrivateProperty(e));\n        }\n      }, {\n        key: \"pushClassMethod\",\n        value: function (t, e, s, i, a, r) {\n          t.body.push(this.parseMethod(e, s, i, a, r, \"ClassMethod\", !0));\n        }\n      }, {\n        key: \"pushClassPrivateMethod\",\n        value: function (t, e, s, i) {\n          this.expectPlugin(\"classPrivateMethods\", e.key.start), t.body.push(this.parseMethod(e, s, i, !1, !1, \"ClassPrivateMethod\", !0));\n        }\n      }, {\n        key: \"parsePostMemberNameModifiers\",\n        value: function (t) {}\n      }, {\n        key: \"parseAccessModifier\",\n        value: function () {}\n      }, {\n        key: \"parseClassPrivateProperty\",\n        value: function (t) {\n          return this.state.inClassProperty = !0, this.scope.enter(320), t.value = this.eat(o.eq) ? this.parseMaybeAssign() : null, this.semicolon(), this.state.inClassProperty = !1, this.scope.exit(), this.finishNode(t, \"ClassPrivateProperty\");\n        }\n      }, {\n        key: \"parseClassProperty\",\n        value: function (t) {\n          return t.typeAnnotation || this.expectPlugin(\"classProperties\"), this.state.inClassProperty = !0, this.scope.enter(320), this.match(o.eq) ? (this.expectPlugin(\"classProperties\"), this.next(), t.value = this.parseMaybeAssign()) : t.value = null, this.semicolon(), this.state.inClassProperty = !1, this.scope.exit(), this.finishNode(t, \"ClassProperty\");\n        }\n      }, {\n        key: \"parseClassId\",\n        value: function (t, e, s) {\n          var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 139;\n          this.match(o.name) ? (t.id = this.parseIdentifier(), e && this.checkLVal(t.id, i, void 0, \"class name\")) : s || !e ? t.id = null : this.unexpected(null, \"A class name is required\");\n        }\n      }, {\n        key: \"parseClassSuper\",\n        value: function (t) {\n          t.superClass = this.eat(o._extends) ? this.parseExprSubscripts() : null;\n        }\n      }, {\n        key: \"parseExport\",\n        value: function (t) {\n          var e = this.maybeParseExportDefaultSpecifier(t),\n              s = !e || this.eat(o.comma),\n              i = s && this.eatExportStar(t),\n              a = i && this.maybeParseExportNamespaceSpecifier(t),\n              r = s && (!a || this.eat(o.comma)),\n              n = e || i;\n          if (i && !a) return e && this.unexpected(), this.parseExportFrom(t, !0), this.finishNode(t, \"ExportAllDeclaration\");\n          var h,\n              u = this.maybeParseExportNamedSpecifiers(t);\n          if (e && s && !i && !u || a && r && !u) throw this.unexpected(null, o.braceL);\n          if (n || u ? (h = !1, this.parseExportFrom(t, n)) : h = this.maybeParseExportDeclaration(t), n || u || h) return this.checkExport(t, !0, !1, !!t.source), this.finishNode(t, \"ExportNamedDeclaration\");\n          if (this.eat(o._default)) return t.declaration = this.parseExportDefaultExpression(), this.checkExport(t, !0, !0), this.finishNode(t, \"ExportDefaultDeclaration\");\n          throw this.unexpected(null, o.braceL);\n        }\n      }, {\n        key: \"eatExportStar\",\n        value: function (t) {\n          return this.eat(o.star);\n        }\n      }, {\n        key: \"maybeParseExportDefaultSpecifier\",\n        value: function (t) {\n          if (this.isExportDefaultSpecifier()) {\n            this.expectPlugin(\"exportDefaultFrom\");\n            var e = this.startNode();\n            return e.exported = this.parseIdentifier(!0), t.specifiers = [this.finishNode(e, \"ExportDefaultSpecifier\")], !0;\n          }\n\n          return !1;\n        }\n      }, {\n        key: \"maybeParseExportNamespaceSpecifier\",\n        value: function (t) {\n          if (this.isContextual(\"as\")) {\n            t.specifiers || (t.specifiers = []);\n            var e = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n            return this.next(), e.exported = this.parseIdentifier(!0), t.specifiers.push(this.finishNode(e, \"ExportNamespaceSpecifier\")), !0;\n          }\n\n          return !1;\n        }\n      }, {\n        key: \"maybeParseExportNamedSpecifiers\",\n        value: function (t) {\n          var e;\n          return !!this.match(o.braceL) && (t.specifiers || (t.specifiers = []), (e = t.specifiers).push.apply(e, b(this.parseExportSpecifiers())), t.source = null, t.declaration = null, !0);\n        }\n      }, {\n        key: \"maybeParseExportDeclaration\",\n        value: function (t) {\n          if (this.shouldParseExportDeclaration()) {\n            if (this.isContextual(\"async\")) {\n              var e = this.nextTokenStart();\n              this.isUnparsedContextual(e, \"function\") || this.unexpected(e, 'Unexpected token, expected \"function\"');\n            }\n\n            return t.specifiers = [], t.source = null, t.declaration = this.parseExportDeclaration(t), !0;\n          }\n\n          return !1;\n        }\n      }, {\n        key: \"isAsyncFunction\",\n        value: function () {\n          if (!this.isContextual(\"async\")) return !1;\n          var t = this.nextTokenStart();\n          return !v.test(this.input.slice(this.state.pos, t)) && this.isUnparsedContextual(t, \"function\");\n        }\n      }, {\n        key: \"parseExportDefaultExpression\",\n        value: function () {\n          var t = this.startNode(),\n              e = this.isAsyncFunction();\n          if (this.match(o._function) || e) return this.next(), e && this.next(), this.parseFunction(t, 5, e);\n          if (this.match(o._class)) return this.parseClass(t, !0, !0);\n          if (this.match(o.at)) return this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") && this.raise(this.state.start, \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\"), this.parseDecorators(!1), this.parseClass(t, !0, !0);\n          if (this.match(o._const) || this.match(o._var) || this.isLet()) throw this.raise(this.state.start, \"Only expressions, functions or classes are allowed as the `default` export.\");\n          var s = this.parseMaybeAssign();\n          return this.semicolon(), s;\n        }\n      }, {\n        key: \"parseExportDeclaration\",\n        value: function (t) {\n          return this.parseStatement(null);\n        }\n      }, {\n        key: \"isExportDefaultSpecifier\",\n        value: function () {\n          if (this.match(o.name)) return \"async\" !== this.state.value && \"let\" !== this.state.value;\n          if (!this.match(o._default)) return !1;\n          var t = this.nextTokenStart();\n          return 44 === this.input.charCodeAt(t) || this.isUnparsedContextual(t, \"from\");\n        }\n      }, {\n        key: \"parseExportFrom\",\n        value: function (t, e) {\n          this.eatContextual(\"from\") ? (t.source = this.parseImportSource(), this.checkExport(t)) : e ? this.unexpected() : t.source = null, this.semicolon();\n        }\n      }, {\n        key: \"shouldParseExportDeclaration\",\n        value: function () {\n          if (this.match(o.at) && (this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]), this.hasPlugin(\"decorators\"))) {\n            if (!this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) return !0;\n            this.unexpected(this.state.start, \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\");\n          }\n\n          return \"var\" === this.state.type.keyword || \"const\" === this.state.type.keyword || \"function\" === this.state.type.keyword || \"class\" === this.state.type.keyword || this.isLet() || this.isAsyncFunction();\n        }\n      }, {\n        key: \"checkExport\",\n        value: function (t, e, s, i) {\n          if (e) if (s) this.checkDuplicateExports(t, \"default\");else if (t.specifiers && t.specifiers.length) for (var a = 0, r = t.specifiers; a < r.length; a++) {\n            var n = r[a];\n            this.checkDuplicateExports(n, n.exported.name), !i && n.local && (this.checkReservedWord(n.local.name, n.local.start, !0, !1), this.scope.checkLocalExport(n.local));\n          } else if (t.declaration) if (\"FunctionDeclaration\" === t.declaration.type || \"ClassDeclaration\" === t.declaration.type) {\n            var o = t.declaration.id;\n            if (!o) throw new Error(\"Assertion failure\");\n            this.checkDuplicateExports(t, o.name);\n          } else if (\"VariableDeclaration\" === t.declaration.type) for (var h = 0, u = t.declaration.declarations; h < u.length; h++) {\n            var l = u[h];\n            this.checkDeclaration(l.id);\n          }\n\n          if (this.state.decoratorStack[this.state.decoratorStack.length - 1].length) {\n            var c = t.declaration && (\"ClassDeclaration\" === t.declaration.type || \"ClassExpression\" === t.declaration.type);\n            if (!t.declaration || !c) throw this.raise(t.start, \"You can only use decorators on an export when exporting a class\");\n            this.takeDecorators(t.declaration);\n          }\n        }\n      }, {\n        key: \"checkDeclaration\",\n        value: function (t) {\n          if (\"Identifier\" === t.type) this.checkDuplicateExports(t, t.name);else if (\"ObjectPattern\" === t.type) for (var e = 0, s = t.properties; e < s.length; e++) {\n            var i = s[e];\n            this.checkDeclaration(i);\n          } else if (\"ArrayPattern\" === t.type) for (var a = 0, r = t.elements; a < r.length; a++) {\n            var n = r[a];\n            n && this.checkDeclaration(n);\n          } else \"ObjectProperty\" === t.type ? this.checkDeclaration(t.value) : \"RestElement\" === t.type ? this.checkDeclaration(t.argument) : \"AssignmentPattern\" === t.type && this.checkDeclaration(t.left);\n        }\n      }, {\n        key: \"checkDuplicateExports\",\n        value: function (t, e) {\n          this.state.exportedIdentifiers.indexOf(e) > -1 && this.raise(t.start, \"default\" === e ? \"Only one default export allowed per module.\" : \"`\".concat(e, \"` has already been exported. Exported identifiers must be unique.\")), this.state.exportedIdentifiers.push(e);\n        }\n      }, {\n        key: \"parseExportSpecifiers\",\n        value: function () {\n          var t = [],\n              e = !0;\n\n          for (this.expect(o.braceL); !this.eat(o.braceR);) {\n            if (e) e = !1;else if (this.expect(o.comma), this.eat(o.braceR)) break;\n            var s = this.startNode();\n            s.local = this.parseIdentifier(!0), s.exported = this.eatContextual(\"as\") ? this.parseIdentifier(!0) : s.local.__clone(), t.push(this.finishNode(s, \"ExportSpecifier\"));\n          }\n\n          return t;\n        }\n      }, {\n        key: \"parseImport\",\n        value: function (t) {\n          if (t.specifiers = [], !this.match(o.string)) {\n            var e = !this.maybeParseDefaultImportSpecifier(t) || this.eat(o.comma),\n                s = e && this.maybeParseStarImportSpecifier(t);\n            e && !s && this.parseNamedImportSpecifiers(t), this.expectContextual(\"from\");\n          }\n\n          return t.source = this.parseImportSource(), this.semicolon(), this.finishNode(t, \"ImportDeclaration\");\n        }\n      }, {\n        key: \"parseImportSource\",\n        value: function () {\n          return this.match(o.string) || this.unexpected(), this.parseExprAtom();\n        }\n      }, {\n        key: \"shouldParseDefaultImport\",\n        value: function (t) {\n          return this.match(o.name);\n        }\n      }, {\n        key: \"parseImportSpecifierLocal\",\n        value: function (t, e, s, i) {\n          e.local = this.parseIdentifier(), this.checkLVal(e.local, 9, void 0, i), t.specifiers.push(this.finishNode(e, s));\n        }\n      }, {\n        key: \"maybeParseDefaultImportSpecifier\",\n        value: function (t) {\n          return !!this.shouldParseDefaultImport(t) && (this.parseImportSpecifierLocal(t, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\"), !0);\n        }\n      }, {\n        key: \"maybeParseStarImportSpecifier\",\n        value: function (t) {\n          if (this.match(o.star)) {\n            var e = this.startNode();\n            return this.next(), this.expectContextual(\"as\"), this.parseImportSpecifierLocal(t, e, \"ImportNamespaceSpecifier\", \"import namespace specifier\"), !0;\n          }\n\n          return !1;\n        }\n      }, {\n        key: \"parseNamedImportSpecifiers\",\n        value: function (t) {\n          var e = !0;\n\n          for (this.expect(o.braceL); !this.eat(o.braceR);) {\n            if (e) e = !1;else {\n              if (this.eat(o.colon)) throw this.raise(this.state.start, \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\");\n              if (this.expect(o.comma), this.eat(o.braceR)) break;\n            }\n            this.parseImportSpecifier(t);\n          }\n        }\n      }, {\n        key: \"parseImportSpecifier\",\n        value: function (t) {\n          var e = this.startNode();\n          e.imported = this.parseIdentifier(!0), this.eatContextual(\"as\") ? e.local = this.parseIdentifier() : (this.checkReservedWord(e.imported.name, e.start, !0, !0), e.local = e.imported.__clone()), this.checkLVal(e.local, 9, void 0, \"import specifier\"), t.specifiers.push(this.finishNode(e, \"ImportSpecifier\"));\n        }\n      }]), e;\n    }(function (t) {\n      function e() {\n        return d(this, e), g(this, D(e).apply(this, arguments));\n      }\n\n      return y(e, t), m(e, [{\n        key: \"checkDuplicatedProto\",\n        value: function (t, e) {\n          if (!(\"SpreadElement\" === t.type || t.computed || t.kind || t.shorthand)) {\n            var s = t.key;\n            \"__proto__\" === (\"Identifier\" === s.type ? s.name : String(s.value)) && (e.used && !e.start && (e.start = s.start), e.used = !0);\n          }\n        }\n      }, {\n        key: \"getExpression\",\n        value: function () {\n          this.scope.enter(1), this.nextToken();\n          var t = this.parseExpression();\n          return this.match(o.eof) || this.unexpected(), t.comments = this.state.comments, t.errors = this.state.errors, t;\n        }\n      }, {\n        key: \"parseExpression\",\n        value: function (t, e) {\n          var s = this.state.start,\n              i = this.state.startLoc,\n              a = this.parseMaybeAssign(t, e);\n\n          if (this.match(o.comma)) {\n            var r = this.startNodeAt(s, i);\n\n            for (r.expressions = [a]; this.eat(o.comma);) r.expressions.push(this.parseMaybeAssign(t, e));\n\n            return this.toReferencedList(r.expressions), this.finishNode(r, \"SequenceExpression\");\n          }\n\n          return a;\n        }\n      }, {\n        key: \"parseMaybeAssign\",\n        value: function (t, e, s, i) {\n          var a,\n              r = this.state.start,\n              n = this.state.startLoc;\n\n          if (this.isContextual(\"yield\")) {\n            if (this.scope.inGenerator) {\n              var h = this.parseYield(t);\n              return s && (h = s.call(this, h, r, n)), h;\n            }\n\n            this.state.exprAllowed = !1;\n          }\n\n          e ? a = !1 : (e = {\n            start: 0\n          }, a = !0), (this.match(o.parenL) || this.match(o.name)) && (this.state.potentialArrowAt = this.state.start);\n          var u = this.parseMaybeConditional(t, e, i);\n\n          if (s && (u = s.call(this, u, r, n)), this.state.type.isAssign) {\n            var l = this.startNodeAt(r, n),\n                c = this.state.value;\n            l.operator = c, \"??=\" === c && (this.expectPlugin(\"nullishCoalescingOperator\"), this.expectPlugin(\"logicalAssignment\")), \"||=\" !== c && \"&&=\" !== c || this.expectPlugin(\"logicalAssignment\"), l.left = this.match(o.eq) ? this.toAssignable(u, void 0, \"assignment expression\") : u, e.start >= l.left.start && (e.start = 0), this.checkLVal(u, void 0, void 0, \"assignment expression\");\n\n            var p,\n                d = function t(e) {\n              return \"ParenthesizedExpression\" === e.type ? t(e.expression) : e;\n            }(u);\n\n            return \"ObjectPattern\" === d.type ? p = \"`({a}) = 0` use `({a} = 0)`\" : \"ArrayPattern\" === d.type && (p = \"`([a]) = 0` use `([a] = 0)`\"), p && (u.extra && u.extra.parenthesized || \"ParenthesizedExpression\" === u.type) && this.raise(d.start, \"You're trying to assign to a parenthesized expression, eg. instead of \".concat(p)), this.next(), l.right = this.parseMaybeAssign(t), this.finishNode(l, \"AssignmentExpression\");\n          }\n\n          return a && e.start && this.unexpected(e.start), u;\n        }\n      }, {\n        key: \"parseMaybeConditional\",\n        value: function (t, e, s) {\n          var i = this.state.start,\n              a = this.state.startLoc,\n              r = this.state.potentialArrowAt,\n              n = this.parseExprOps(t, e);\n          return \"ArrowFunctionExpression\" === n.type && n.start === r ? n : e && e.start ? n : this.parseConditional(n, t, i, a, s);\n        }\n      }, {\n        key: \"parseConditional\",\n        value: function (t, e, s, i, a) {\n          if (this.eat(o.question)) {\n            var r = this.startNodeAt(s, i);\n            return r.test = t, r.consequent = this.parseMaybeAssign(), this.expect(o.colon), r.alternate = this.parseMaybeAssign(e), this.finishNode(r, \"ConditionalExpression\");\n          }\n\n          return t;\n        }\n      }, {\n        key: \"parseExprOps\",\n        value: function (t, e) {\n          var s = this.state.start,\n              i = this.state.startLoc,\n              a = this.state.potentialArrowAt,\n              r = this.parseMaybeUnary(e);\n          return \"ArrowFunctionExpression\" === r.type && r.start === a ? r : e && e.start ? r : this.parseExprOp(r, s, i, -1, t);\n        }\n      }, {\n        key: \"parseExprOp\",\n        value: function (t, e, s, i, a) {\n          var r = this.state.type.binop;\n\n          if (!(null == r || a && this.match(o._in)) && r > i) {\n            var n = this.state.value;\n            if (\"|>\" === n && this.state.inFSharpPipelineDirectBody) return t;\n            var h = this.startNodeAt(e, s);\n            h.left = t, h.operator = n, \"**\" !== n || \"UnaryExpression\" !== t.type || !this.options.createParenthesizedExpressions && t.extra && t.extra.parenthesized || this.raise(t.argument.start, \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\");\n            var u = this.state.type;\n            if (u === o.pipeline ? (this.expectPlugin(\"pipelineOperator\"), this.state.inPipeline = !0, this.checkPipelineAtInfixOperator(t, e)) : u === o.nullishCoalescing && this.expectPlugin(\"nullishCoalescingOperator\"), this.next(), u === o.pipeline && \"minimal\" === this.getPluginOption(\"pipelineOperator\", \"proposal\") && this.match(o.name) && \"await\" === this.state.value && this.scope.inAsync) throw this.raise(this.state.start, 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal');\n\n            if (h.right = this.parseExprOpRightExpr(u, r, a), u === o.nullishCoalescing) {\n              if (!(\"LogicalExpression\" !== t.type || \"??\" === t.operator || t.extra && t.extra.parenthesized)) throw this.raise(t.start, \"Nullish coalescing operator(??) requires parens when mixing with logical operators\");\n              if (!(\"LogicalExpression\" !== h.right.type || \"??\" === h.right.operator || h.right.extra && h.right.extra.parenthesized)) throw this.raise(h.right.start, \"Nullish coalescing operator(??) requires parens when mixing with logical operators\");\n            }\n\n            return this.finishNode(h, u === o.logicalOR || u === o.logicalAND || u === o.nullishCoalescing ? \"LogicalExpression\" : \"BinaryExpression\"), this.parseExprOp(h, e, s, i, a);\n          }\n\n          return t;\n        }\n      }, {\n        key: \"parseExprOpRightExpr\",\n        value: function (t, e, s) {\n          var i = this,\n              a = this.state.start,\n              r = this.state.startLoc;\n\n          switch (t) {\n            case o.pipeline:\n              switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n                case \"smart\":\n                  return this.withTopicPermittingContext(function () {\n                    return i.parseSmartPipelineBody(i.parseExprOpBaseRightExpr(t, e, s), a, r);\n                  });\n\n                case \"fsharp\":\n                  return this.withSoloAwaitPermittingContext(function () {\n                    return i.parseFSharpPipelineBody(e, s);\n                  });\n              }\n\n            default:\n              return this.parseExprOpBaseRightExpr(t, e, s);\n          }\n        }\n      }, {\n        key: \"parseExprOpBaseRightExpr\",\n        value: function (t, e, s) {\n          var i = this.state.start,\n              a = this.state.startLoc;\n          return this.parseExprOp(this.parseMaybeUnary(), i, a, t.rightAssociative ? e - 1 : e, s);\n        }\n      }, {\n        key: \"parseMaybeUnary\",\n        value: function (t) {\n          if (this.isContextual(\"await\") && this.isAwaitAllowed()) return this.parseAwait();\n\n          if (this.state.type.prefix) {\n            var e = this.startNode(),\n                s = this.match(o.incDec);\n            if (e.operator = this.state.value, e.prefix = !0, \"throw\" === e.operator && this.expectPlugin(\"throwExpressions\"), this.next(), e.argument = this.parseMaybeUnary(), t && t.start && this.unexpected(t.start), s) this.checkLVal(e.argument, void 0, void 0, \"prefix operation\");else if (this.state.strict && \"delete\" === e.operator) {\n              var i = e.argument;\n              \"Identifier\" === i.type ? this.raise(e.start, \"Deleting local variable in strict mode\") : \"MemberExpression\" === i.type && \"PrivateName\" === i.property.type && this.raise(e.start, \"Deleting a private field is not allowed\");\n            }\n            return this.finishNode(e, s ? \"UpdateExpression\" : \"UnaryExpression\");\n          }\n\n          var a = this.state.start,\n              r = this.state.startLoc,\n              n = this.parseExprSubscripts(t);\n          if (t && t.start) return n;\n\n          for (; this.state.type.postfix && !this.canInsertSemicolon();) {\n            var h = this.startNodeAt(a, r);\n            h.operator = this.state.value, h.prefix = !1, h.argument = n, this.checkLVal(n, void 0, void 0, \"postfix operation\"), this.next(), n = this.finishNode(h, \"UpdateExpression\");\n          }\n\n          return n;\n        }\n      }, {\n        key: \"parseExprSubscripts\",\n        value: function (t) {\n          var e = this.state.start,\n              s = this.state.startLoc,\n              i = this.state.potentialArrowAt,\n              a = this.parseExprAtom(t);\n          return \"ArrowFunctionExpression\" === a.type && a.start === i ? a : t && t.start ? a : this.parseSubscripts(a, e, s);\n        }\n      }, {\n        key: \"parseSubscripts\",\n        value: function (t, e, s, i) {\n          var a = {\n            optionalChainMember: !1,\n            maybeAsyncArrow: this.atPossibleAsync(t),\n            stop: !1\n          };\n\n          do {\n            t = this.parseSubscript(t, e, s, i, a), a.maybeAsyncArrow = !1;\n          } while (!a.stop);\n\n          return t;\n        }\n      }, {\n        key: \"parseSubscript\",\n        value: function (t, e, s, i, a) {\n          if (!i && this.eat(o.doubleColon)) {\n            var r = this.startNodeAt(e, s);\n            return r.object = t, r.callee = this.parseNoCallExpr(), a.stop = !0, this.parseSubscripts(this.finishNode(r, \"BindExpression\"), e, s, i);\n          }\n\n          if (this.match(o.questionDot)) {\n            if (this.expectPlugin(\"optionalChaining\"), a.optionalChainMember = !0, i && 40 === this.lookaheadCharCode()) return a.stop = !0, t;\n            this.next();\n            var n = this.startNodeAt(e, s);\n            return this.eat(o.bracketL) ? (n.object = t, n.property = this.parseExpression(), n.computed = !0, n.optional = !0, this.expect(o.bracketR), this.finishNode(n, \"OptionalMemberExpression\")) : this.eat(o.parenL) ? (n.callee = t, n.arguments = this.parseCallExpressionArguments(o.parenR, !1), n.optional = !0, this.finishCallExpression(n, !0)) : (n.object = t, n.property = this.parseIdentifier(!0), n.computed = !1, n.optional = !0, this.finishNode(n, \"OptionalMemberExpression\"));\n          }\n\n          if (this.eat(o.dot)) {\n            var h = this.startNodeAt(e, s);\n            return h.object = t, h.property = this.parseMaybePrivateName(), h.computed = !1, \"PrivateName\" === h.property.type && \"Super\" === h.object.type && this.raise(e, \"Private fields can't be accessed on super\"), a.optionalChainMember ? (h.optional = !1, this.finishNode(h, \"OptionalMemberExpression\")) : this.finishNode(h, \"MemberExpression\");\n          }\n\n          if (this.eat(o.bracketL)) {\n            var u = this.startNodeAt(e, s);\n            return u.object = t, u.property = this.parseExpression(), u.computed = !0, this.expect(o.bracketR), a.optionalChainMember ? (u.optional = !1, this.finishNode(u, \"OptionalMemberExpression\")) : this.finishNode(u, \"MemberExpression\");\n          }\n\n          if (!i && this.match(o.parenL)) {\n            var l = this.state.maybeInArrowParameters,\n                c = this.state.yieldPos,\n                p = this.state.awaitPos;\n            this.state.maybeInArrowParameters = !0, this.state.yieldPos = -1, this.state.awaitPos = -1, this.next();\n            var d = this.startNodeAt(e, s);\n            return d.callee = t, d.arguments = this.parseCallExpressionArguments(o.parenR, a.maybeAsyncArrow, \"Import\" === t.type, \"Super\" !== t.type, d), this.finishCallExpression(d, a.optionalChainMember), a.maybeAsyncArrow && this.shouldParseAsyncArrow() ? (a.stop = !0, d = this.parseAsyncArrowFromCallExpression(this.startNodeAt(e, s), d), this.checkYieldAwaitInDefaultParams(), this.state.yieldPos = c, this.state.awaitPos = p) : (this.toReferencedListDeep(d.arguments), -1 !== c && (this.state.yieldPos = c), (this.isAwaitAllowed() || l) && -1 === p || (this.state.awaitPos = p)), this.state.maybeInArrowParameters = l, d;\n          }\n\n          return this.match(o.backQuote) ? this.parseTaggedTemplateExpression(e, s, t, a) : (a.stop = !0, t);\n        }\n      }, {\n        key: \"parseTaggedTemplateExpression\",\n        value: function (t, e, s, i, a) {\n          var r = this.startNodeAt(t, e);\n          return r.tag = s, r.quasi = this.parseTemplate(!0), a && (r.typeParameters = a), i.optionalChainMember && this.raise(t, \"Tagged Template Literals are not allowed in optionalChain\"), this.finishNode(r, \"TaggedTemplateExpression\");\n        }\n      }, {\n        key: \"atPossibleAsync\",\n        value: function (t) {\n          return \"Identifier\" === t.type && \"async\" === t.name && this.state.lastTokEnd === t.end && !this.canInsertSemicolon() && \"async\" === this.input.slice(t.start, t.end);\n        }\n      }, {\n        key: \"finishCallExpression\",\n        value: function (t, e) {\n          if (\"Import\" === t.callee.type) if (1 !== t.arguments.length) this.raise(t.start, \"import() requires exactly one argument\");else {\n            var s = t.arguments[0];\n            s && \"SpreadElement\" === s.type && this.raise(s.start, \"... is not allowed in import()\");\n          }\n          return this.finishNode(t, e ? \"OptionalCallExpression\" : \"CallExpression\");\n        }\n      }, {\n        key: \"parseCallExpressionArguments\",\n        value: function (t, e, s, i, a) {\n          var r,\n              n = [],\n              h = !0,\n              u = this.state.inFSharpPipelineDirectBody;\n\n          for (this.state.inFSharpPipelineDirectBody = !1; !this.eat(t);) {\n            if (h) h = !1;else if (this.expect(o.comma), this.match(t)) {\n              s && this.raise(this.state.lastTokStart, \"Trailing comma is disallowed inside import(...) arguments\"), a && this.addExtra(a, \"trailingComma\", this.state.lastTokStart), this.next();\n              break;\n            }\n            this.match(o.parenL) && !r && (r = this.state.start), n.push(this.parseExprListItem(!1, e ? {\n              start: 0\n            } : void 0, e ? {\n              start: 0\n            } : void 0, i));\n          }\n\n          return e && r && this.shouldParseAsyncArrow() && this.unexpected(), this.state.inFSharpPipelineDirectBody = u, n;\n        }\n      }, {\n        key: \"shouldParseAsyncArrow\",\n        value: function () {\n          return this.match(o.arrow) && !this.canInsertSemicolon();\n        }\n      }, {\n        key: \"parseAsyncArrowFromCallExpression\",\n        value: function (t, e) {\n          var s;\n          return this.expect(o.arrow), this.parseArrowExpression(t, e.arguments, !0, null === (s = e.extra) || void 0 === s ? void 0 : s.trailingComma), t;\n        }\n      }, {\n        key: \"parseNoCallExpr\",\n        value: function () {\n          var t = this.state.start,\n              e = this.state.startLoc;\n          return this.parseSubscripts(this.parseExprAtom(), t, e, !0);\n        }\n      }, {\n        key: \"parseExprAtom\",\n        value: function (t) {\n          this.state.type === o.slash && this.readRegexp();\n          var e,\n              s = this.state.potentialArrowAt === this.state.start;\n\n          switch (this.state.type) {\n            case o._super:\n              return e = this.startNode(), this.next(), !this.match(o.parenL) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(e.start, \"super is only allowed in object methods and classes\") : this.raise(e.start, \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\"), this.match(o.parenL) || this.match(o.bracketL) || this.match(o.dot) || this.raise(e.start, \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\"), this.finishNode(e, \"Super\");\n\n            case o._import:\n              return e = this.startNode(), this.next(), this.match(o.dot) ? this.parseImportMetaProperty(e) : (this.expectPlugin(\"dynamicImport\", e.start), this.match(o.parenL) || this.unexpected(null, o.parenL), this.finishNode(e, \"Import\"));\n\n            case o._this:\n              return e = this.startNode(), this.next(), this.finishNode(e, \"ThisExpression\");\n\n            case o.name:\n              e = this.startNode();\n              var i = this.state.containsEsc,\n                  a = this.parseIdentifier();\n              if (!i && \"async\" === a.name && this.match(o._function) && !this.canInsertSemicolon()) return this.next(), this.parseFunction(e, void 0, !0);\n\n              if (s && !i && \"async\" === a.name && this.match(o.name) && !this.canInsertSemicolon()) {\n                var r = [this.parseIdentifier()];\n                return this.expect(o.arrow), this.parseArrowExpression(e, r, !0), e;\n              }\n\n              return s && this.match(o.arrow) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(e, [a], !1), e) : a;\n\n            case o._do:\n              this.expectPlugin(\"doExpressions\");\n              var n = this.startNode();\n              this.next();\n              var h = this.state.labels;\n              return this.state.labels = [], n.body = this.parseBlock(), this.state.labels = h, this.finishNode(n, \"DoExpression\");\n\n            case o.regexp:\n              var u = this.state.value;\n              return (e = this.parseLiteral(u.value, \"RegExpLiteral\")).pattern = u.pattern, e.flags = u.flags, e;\n\n            case o.num:\n              return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n            case o.bigint:\n              return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n            case o.string:\n              return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n            case o._null:\n              return e = this.startNode(), this.next(), this.finishNode(e, \"NullLiteral\");\n\n            case o._true:\n            case o._false:\n              return this.parseBooleanLiteral();\n\n            case o.parenL:\n              return this.parseParenAndDistinguishExpression(s);\n\n            case o.bracketL:\n              var l = this.state.inFSharpPipelineDirectBody;\n              return this.state.inFSharpPipelineDirectBody = !1, e = this.startNode(), this.next(), e.elements = this.parseExprList(o.bracketR, !0, t, e), this.state.maybeInArrowParameters || this.toReferencedList(e.elements), this.state.inFSharpPipelineDirectBody = l, this.finishNode(e, \"ArrayExpression\");\n\n            case o.braceL:\n              var c = this.state.inFSharpPipelineDirectBody;\n              this.state.inFSharpPipelineDirectBody = !1;\n              var p = this.parseObj(!1, t);\n              return this.state.inFSharpPipelineDirectBody = c, p;\n\n            case o._function:\n              return this.parseFunctionExpression();\n\n            case o.at:\n              this.parseDecorators();\n\n            case o._class:\n              return e = this.startNode(), this.takeDecorators(e), this.parseClass(e, !1);\n\n            case o._new:\n              return this.parseNew();\n\n            case o.backQuote:\n              return this.parseTemplate(!1);\n\n            case o.doubleColon:\n              e = this.startNode(), this.next(), e.object = null;\n              var d = e.callee = this.parseNoCallExpr();\n              if (\"MemberExpression\" === d.type) return this.finishNode(e, \"BindExpression\");\n              throw this.raise(d.start, \"Binding should be performed on object property.\");\n\n            case o.hash:\n              if (this.state.inPipeline) return e = this.startNode(), \"smart\" !== this.getPluginOption(\"pipelineOperator\", \"proposal\") && this.raise(e.start, \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\"), this.next(), this.primaryTopicReferenceIsAllowedInCurrentTopicContext() || this.raise(e.start, \"Topic reference was used in a lexical context without topic binding\"), this.registerTopicReference(), this.finishNode(e, \"PipelinePrimaryTopicReference\");\n\n            default:\n              throw this.unexpected();\n          }\n        }\n      }, {\n        key: \"parseBooleanLiteral\",\n        value: function () {\n          var t = this.startNode();\n          return t.value = this.match(o._true), this.next(), this.finishNode(t, \"BooleanLiteral\");\n        }\n      }, {\n        key: \"parseMaybePrivateName\",\n        value: function () {\n          if (this.match(o.hash)) {\n            this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n            var t = this.startNode();\n            return this.next(), this.assertNoSpace(\"Unexpected space between # and identifier\"), t.id = this.parseIdentifier(!0), this.finishNode(t, \"PrivateName\");\n          }\n\n          return this.parseIdentifier(!0);\n        }\n      }, {\n        key: \"parseFunctionExpression\",\n        value: function () {\n          var t = this.startNode(),\n              e = this.startNode();\n          return this.next(), e = this.createIdentifier(e, \"function\"), this.scope.inGenerator && this.eat(o.dot) ? this.parseMetaProperty(t, e, \"sent\") : this.parseFunction(t);\n        }\n      }, {\n        key: \"parseMetaProperty\",\n        value: function (t, e, s) {\n          t.meta = e, \"function\" === e.name && \"sent\" === s && (this.isContextual(s) ? this.expectPlugin(\"functionSent\") : this.hasPlugin(\"functionSent\") || this.unexpected());\n          var i = this.state.containsEsc;\n          return t.property = this.parseIdentifier(!0), (t.property.name !== s || i) && this.raise(t.property.start, \"The only valid meta property for \".concat(e.name, \" is \").concat(e.name, \".\").concat(s)), this.finishNode(t, \"MetaProperty\");\n        }\n      }, {\n        key: \"parseImportMetaProperty\",\n        value: function (t) {\n          var e = this.createIdentifier(this.startNodeAtNode(t), \"import\");\n          return this.expect(o.dot), this.isContextual(\"meta\") ? (this.expectPlugin(\"importMeta\"), this.inModule || this.raise(e.start, \"import.meta may appear only with 'sourceType: \\\"module\\\"'\", {\n            code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n          }), this.sawUnambiguousESM = !0) : this.hasPlugin(\"importMeta\") || this.raise(e.start, \"Dynamic imports require a parameter: import('a.js')\"), this.parseMetaProperty(t, e, \"meta\");\n        }\n      }, {\n        key: \"parseLiteral\",\n        value: function (t, e, s, i) {\n          s = s || this.state.start, i = i || this.state.startLoc;\n          var a = this.startNodeAt(s, i);\n          return this.addExtra(a, \"rawValue\", t), this.addExtra(a, \"raw\", this.input.slice(s, this.state.end)), a.value = t, this.next(), this.finishNode(a, e);\n        }\n      }, {\n        key: \"parseParenAndDistinguishExpression\",\n        value: function (t) {\n          var e,\n              s = this.state.start,\n              i = this.state.startLoc;\n          this.expect(o.parenL);\n          var a = this.state.maybeInArrowParameters,\n              r = this.state.yieldPos,\n              n = this.state.awaitPos,\n              h = this.state.inFSharpPipelineDirectBody;\n          this.state.maybeInArrowParameters = !0, this.state.yieldPos = -1, this.state.awaitPos = -1, this.state.inFSharpPipelineDirectBody = !1;\n\n          for (var u, l, c = this.state.start, p = this.state.startLoc, d = [], f = {\n            start: 0\n          }, m = {\n            start: 0\n          }, y = !0; !this.match(o.parenR);) {\n            if (y) y = !1;else if (this.expect(o.comma, m.start || null), this.match(o.parenR)) {\n              l = this.state.start;\n              break;\n            }\n\n            if (this.match(o.ellipsis)) {\n              var D = this.state.start,\n                  v = this.state.startLoc;\n              u = this.state.start, d.push(this.parseParenItem(this.parseRestBinding(), D, v)), this.checkCommaAfterRest(41);\n              break;\n            }\n\n            d.push(this.parseMaybeAssign(!1, f, this.parseParenItem, m));\n          }\n\n          var x = this.state.start,\n              g = this.state.startLoc;\n          this.expect(o.parenR), this.state.maybeInArrowParameters = a, this.state.inFSharpPipelineDirectBody = h;\n          var k = this.startNodeAt(s, i);\n\n          if (t && this.shouldParseArrow() && (k = this.parseArrow(k))) {\n            this.checkYieldAwaitInDefaultParams(), this.state.yieldPos = r, this.state.awaitPos = n;\n\n            for (var P = 0; P < d.length; P++) {\n              var b = d[P];\n              b.extra && b.extra.parenthesized && this.unexpected(b.extra.parenStart);\n            }\n\n            return this.parseArrowExpression(k, d, !1), k;\n          }\n\n          if (-1 !== r && (this.state.yieldPos = r), -1 !== n && (this.state.awaitPos = n), d.length || this.unexpected(this.state.lastTokStart), l && this.unexpected(l), u && this.unexpected(u), f.start && this.unexpected(f.start), m.start && this.unexpected(m.start), this.toReferencedListDeep(d, !0), d.length > 1 ? ((e = this.startNodeAt(c, p)).expressions = d, this.finishNodeAt(e, \"SequenceExpression\", x, g)) : e = d[0], !this.options.createParenthesizedExpressions) return this.addExtra(e, \"parenthesized\", !0), this.addExtra(e, \"parenStart\", s), e;\n          var E = this.startNodeAt(s, i);\n          return E.expression = e, this.finishNode(E, \"ParenthesizedExpression\"), E;\n        }\n      }, {\n        key: \"shouldParseArrow\",\n        value: function () {\n          return !this.canInsertSemicolon();\n        }\n      }, {\n        key: \"parseArrow\",\n        value: function (t) {\n          if (this.eat(o.arrow)) return t;\n        }\n      }, {\n        key: \"parseParenItem\",\n        value: function (t, e, s) {\n          return t;\n        }\n      }, {\n        key: \"parseNew\",\n        value: function () {\n          var t = this.startNode(),\n              e = this.startNode();\n\n          if (this.next(), e = this.createIdentifier(e, \"new\"), this.eat(o.dot)) {\n            var s = this.parseMetaProperty(t, e, \"target\");\n\n            if (!this.scope.inNonArrowFunction && !this.state.inClassProperty) {\n              var i = \"new.target can only be used in functions\";\n              this.hasPlugin(\"classProperties\") && (i += \" or class properties\"), this.raise(s.start, i);\n            }\n\n            return s;\n          }\n\n          return t.callee = this.parseNoCallExpr(), \"Import\" === t.callee.type ? this.raise(t.callee.start, \"Cannot use new with import(...)\") : \"OptionalMemberExpression\" === t.callee.type || \"OptionalCallExpression\" === t.callee.type ? this.raise(this.state.lastTokEnd, \"constructors in/after an Optional Chain are not allowed\") : this.eat(o.questionDot) && this.raise(this.state.start, \"constructors in/after an Optional Chain are not allowed\"), this.parseNewArguments(t), this.finishNode(t, \"NewExpression\");\n        }\n      }, {\n        key: \"parseNewArguments\",\n        value: function (t) {\n          if (this.eat(o.parenL)) {\n            var e = this.parseExprList(o.parenR);\n            this.toReferencedList(e), t.arguments = e;\n          } else t.arguments = [];\n        }\n      }, {\n        key: \"parseTemplateElement\",\n        value: function (t) {\n          var e = this.startNode();\n          return null === this.state.value && (t ? this.state.invalidTemplateEscapePosition = null : this.raise(this.state.invalidTemplateEscapePosition || 0, \"Invalid escape sequence in template\")), e.value = {\n            raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n            cooked: this.state.value\n          }, this.next(), e.tail = this.match(o.backQuote), this.finishNode(e, \"TemplateElement\");\n        }\n      }, {\n        key: \"parseTemplate\",\n        value: function (t) {\n          var e = this.startNode();\n          this.next(), e.expressions = [];\n          var s = this.parseTemplateElement(t);\n\n          for (e.quasis = [s]; !s.tail;) this.expect(o.dollarBraceL), e.expressions.push(this.parseExpression()), this.expect(o.braceR), e.quasis.push(s = this.parseTemplateElement(t));\n\n          return this.next(), this.finishNode(e, \"TemplateLiteral\");\n        }\n      }, {\n        key: \"parseObj\",\n        value: function (t, e) {\n          var s = Object.create(null),\n              i = !0,\n              a = this.startNode();\n\n          for (a.properties = [], this.next(); !this.eat(o.braceR);) {\n            if (i) i = !1;else if (this.expect(o.comma), this.match(o.braceR)) {\n              this.addExtra(a, \"trailingComma\", this.state.lastTokStart), this.next();\n              break;\n            }\n            var r = this.parseObjectMember(t, e);\n            t || this.checkDuplicatedProto(r, s), r.shorthand && this.addExtra(r, \"shorthand\", !0), a.properties.push(r);\n          }\n\n          return this.match(o.eq) || void 0 === s.start || this.raise(s.start, \"Redefinition of __proto__ property\"), this.finishNode(a, t ? \"ObjectPattern\" : \"ObjectExpression\");\n        }\n      }, {\n        key: \"isAsyncProp\",\n        value: function (t) {\n          return !t.computed && \"Identifier\" === t.key.type && \"async\" === t.key.name && (this.match(o.name) || this.match(o.num) || this.match(o.string) || this.match(o.bracketL) || this.state.type.keyword || this.match(o.star)) && !this.hasPrecedingLineBreak();\n        }\n      }, {\n        key: \"parseObjectMember\",\n        value: function (t, e) {\n          var s = [];\n          if (this.match(o.at)) for (this.hasPlugin(\"decorators\") && this.raise(this.state.start, \"Stage 2 decorators disallow object literal property decorators\"); this.match(o.at);) s.push(this.parseDecorator());\n          var i,\n              a,\n              r = this.startNode(),\n              n = !1,\n              h = !1;\n          if (this.match(o.ellipsis)) return s.length && this.unexpected(), t ? (this.next(), r.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(r, \"RestElement\")) : this.parseSpread();\n          s.length && (r.decorators = s, s = []), r.method = !1, (t || e) && (i = this.state.start, a = this.state.startLoc), t || (n = this.eat(o.star));\n          var u = this.state.containsEsc;\n          return this.parsePropertyName(r), t || u || n || !this.isAsyncProp(r) ? h = !1 : (h = !0, n = this.eat(o.star), this.parsePropertyName(r)), this.parseObjPropValue(r, i, a, n, h, t, e, u), r;\n        }\n      }, {\n        key: \"isGetterOrSetterMethod\",\n        value: function (t, e) {\n          return !e && !t.computed && \"Identifier\" === t.key.type && (\"get\" === t.key.name || \"set\" === t.key.name) && (this.match(o.string) || this.match(o.num) || this.match(o.bracketL) || this.match(o.name) || !!this.state.type.keyword);\n        }\n      }, {\n        key: \"getGetterSetterExpectedParamCount\",\n        value: function (t) {\n          return \"get\" === t.kind ? 0 : 1;\n        }\n      }, {\n        key: \"checkGetterSetterParams\",\n        value: function (t) {\n          var e = this.getGetterSetterExpectedParamCount(t),\n              s = t.start;\n          t.params.length !== e && (\"get\" === t.kind ? this.raise(s, \"getter must not have any formal parameters\") : this.raise(s, \"setter must have exactly one formal parameter\")), \"set\" === t.kind && \"RestElement\" === t.params[t.params.length - 1].type && this.raise(s, \"setter function argument must not be a rest parameter\");\n        }\n      }, {\n        key: \"parseObjectMethod\",\n        value: function (t, e, s, i, a) {\n          return s || e || this.match(o.parenL) ? (i && this.unexpected(), t.kind = \"method\", t.method = !0, this.parseMethod(t, e, s, !1, !1, \"ObjectMethod\")) : !a && this.isGetterOrSetterMethod(t, i) ? ((e || s) && this.unexpected(), t.kind = t.key.name, this.parsePropertyName(t), this.parseMethod(t, !1, !1, !1, !1, \"ObjectMethod\"), this.checkGetterSetterParams(t), t) : void 0;\n        }\n      }, {\n        key: \"parseObjectProperty\",\n        value: function (t, e, s, i, a) {\n          return t.shorthand = !1, this.eat(o.colon) ? (t.value = i ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(!1, a), this.finishNode(t, \"ObjectProperty\")) : t.computed || \"Identifier\" !== t.key.type ? void 0 : (this.checkReservedWord(t.key.name, t.key.start, !0, !0), i ? t.value = this.parseMaybeDefault(e, s, t.key.__clone()) : this.match(o.eq) && a ? (a.start || (a.start = this.state.start), t.value = this.parseMaybeDefault(e, s, t.key.__clone())) : t.value = t.key.__clone(), t.shorthand = !0, this.finishNode(t, \"ObjectProperty\"));\n        }\n      }, {\n        key: \"parseObjPropValue\",\n        value: function (t, e, s, i, a, r, n, o) {\n          var h = this.parseObjectMethod(t, i, a, r, o) || this.parseObjectProperty(t, e, s, r, n);\n          return h || this.unexpected(), h;\n        }\n      }, {\n        key: \"parsePropertyName\",\n        value: function (t) {\n          if (this.eat(o.bracketL)) t.computed = !0, t.key = this.parseMaybeAssign(), this.expect(o.bracketR);else {\n            var e = this.state.inPropertyName;\n            this.state.inPropertyName = !0, t.key = this.match(o.num) || this.match(o.string) ? this.parseExprAtom() : this.parseMaybePrivateName(), \"PrivateName\" !== t.key.type && (t.computed = !1), this.state.inPropertyName = e;\n          }\n          return t.key;\n        }\n      }, {\n        key: \"initFunction\",\n        value: function (t, e) {\n          t.id = null, t.generator = !1, t.async = !!e;\n        }\n      }, {\n        key: \"parseMethod\",\n        value: function (t, e, s, i, a, r) {\n          var n = arguments.length > 6 && void 0 !== arguments[6] && arguments[6],\n              o = this.state.yieldPos,\n              h = this.state.awaitPos;\n          this.state.yieldPos = -1, this.state.awaitPos = -1, this.initFunction(t, s), t.generator = !!e;\n          var u = i;\n          return this.scope.enter(64 | p(s, t.generator) | (n ? 256 : 0) | (a ? 128 : 0)), this.parseFunctionParams(t, u), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBodyAndFinish(t, r, !0), this.scope.exit(), this.state.yieldPos = o, this.state.awaitPos = h, t;\n        }\n      }, {\n        key: \"parseArrowExpression\",\n        value: function (t, e, s, i) {\n          this.scope.enter(16 | p(s, !1)), this.initFunction(t, s);\n          var a = this.state.maybeInArrowParameters,\n              r = this.state.yieldPos,\n              n = this.state.awaitPos;\n          return this.state.maybeInArrowParameters = !1, this.state.yieldPos = -1, this.state.awaitPos = -1, e && this.setArrowFunctionParameters(t, e, i), this.parseFunctionBody(t, !0), this.scope.exit(), this.state.maybeInArrowParameters = a, this.state.yieldPos = r, this.state.awaitPos = n, this.finishNode(t, \"ArrowFunctionExpression\");\n        }\n      }, {\n        key: \"setArrowFunctionParameters\",\n        value: function (t, e, s) {\n          t.params = this.toAssignableList(e, !0, \"arrow function parameters\", s);\n        }\n      }, {\n        key: \"isStrictBody\",\n        value: function (t) {\n          if (\"BlockStatement\" === t.body.type && t.body.directives.length) for (var e = 0, s = t.body.directives; e < s.length; e++) {\n            if (\"use strict\" === s[e].value.value) return !0;\n          }\n          return !1;\n        }\n      }, {\n        key: \"parseFunctionBodyAndFinish\",\n        value: function (t, e) {\n          var s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n          this.parseFunctionBody(t, !1, s), this.finishNode(t, e);\n        }\n      }, {\n        key: \"parseFunctionBody\",\n        value: function (t, e) {\n          var s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],\n              i = e && !this.match(o.braceL),\n              a = this.state.strict,\n              r = !1,\n              n = this.state.inParameters;\n          if (this.state.inParameters = !1, i) t.body = this.parseMaybeAssign(), this.checkParams(t, !1, e, !1);else {\n            var h = !this.isSimpleParamList(t.params);\n\n            if ((!a || h) && (r = this.strictDirective(this.state.end)) && h) {\n              var u = \"method\" !== t.kind && \"constructor\" !== t.kind || !t.key ? t.start : t.key.end;\n              this.raise(u, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n            }\n\n            var l = this.state.labels;\n            this.state.labels = [], r && (this.state.strict = !0), this.checkParams(t, !(a || r || e || s || h), e, !a && r), t.body = this.parseBlock(!0, !1), this.state.labels = l;\n          }\n          this.state.inParameters = n, this.state.strict && t.id && this.checkLVal(t.id, 65, void 0, \"function name\", void 0, !a && r), this.state.strict = a;\n        }\n      }, {\n        key: \"isSimpleParamList\",\n        value: function (t) {\n          for (var e = 0, s = t.length; e < s; e++) if (\"Identifier\" !== t[e].type) return !1;\n\n          return !0;\n        }\n      }, {\n        key: \"checkParams\",\n        value: function (t, e, s) {\n          for (var i = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], a = Object.create(null), r = 0; r < t.params.length; r++) this.checkLVal(t.params[r], 5, e ? null : a, \"function parameter list\", void 0, i);\n        }\n      }, {\n        key: \"parseExprList\",\n        value: function (t, e, s, i) {\n          for (var a = [], r = !0; !this.eat(t);) {\n            if (r) r = !1;else if (this.expect(o.comma), this.match(t)) {\n              i && this.addExtra(i, \"trailingComma\", this.state.lastTokStart), this.next();\n              break;\n            }\n            a.push(this.parseExprListItem(e, s));\n          }\n\n          return a;\n        }\n      }, {\n        key: \"parseExprListItem\",\n        value: function (t, e, s, i) {\n          var a;\n          if (t && this.match(o.comma)) a = null;else if (this.match(o.ellipsis)) {\n            var r = this.state.start,\n                n = this.state.startLoc;\n            a = this.parseParenItem(this.parseSpread(e, s), r, n);\n          } else if (this.match(o.question)) {\n            this.expectPlugin(\"partialApplication\"), i || this.raise(this.state.start, \"Unexpected argument placeholder\");\n            var h = this.startNode();\n            this.next(), a = this.finishNode(h, \"ArgumentPlaceholder\");\n          } else a = this.parseMaybeAssign(!1, e, this.parseParenItem, s);\n          return a;\n        }\n      }, {\n        key: \"parseIdentifier\",\n        value: function (t) {\n          var e = this.startNode(),\n              s = this.parseIdentifierName(e.start, t);\n          return this.createIdentifier(e, s);\n        }\n      }, {\n        key: \"createIdentifier\",\n        value: function (t, e) {\n          return t.name = e, t.loc.identifierName = e, this.finishNode(t, \"Identifier\");\n        }\n      }, {\n        key: \"parseIdentifierName\",\n        value: function (t, e) {\n          var s;\n          if (this.match(o.name)) s = this.state.value;else {\n            if (!this.state.type.keyword) throw this.unexpected();\n            \"class\" !== (s = this.state.type.keyword) && \"function\" !== s || this.state.lastTokEnd === this.state.lastTokStart + 1 && 46 === this.input.charCodeAt(this.state.lastTokStart) || this.state.context.pop();\n          }\n          return e ? this.state.type = o.name : this.checkReservedWord(s, this.state.start, !!this.state.type.keyword, !1), this.next(), s;\n        }\n      }, {\n        key: \"checkReservedWord\",\n        value: function (t, e, s, i) {\n          if (this.scope.inGenerator && \"yield\" === t) this.raise(e, \"Can not use 'yield' as identifier inside a generator\");else {\n            if (\"await\" === t) {\n              if (this.scope.inAsync) return void this.raise(e, \"Can not use 'await' as identifier inside an async function\");\n              -1 === this.state.awaitPos && (this.state.maybeInArrowParameters || this.isAwaitAllowed()) && (this.state.awaitPos = this.state.start);\n            }\n\n            if (this.state.inClassProperty && \"arguments\" === t) this.raise(e, \"'arguments' is not allowed in class field initializer\");else if (s && function (t) {\n              return a.has(t);\n            }(t)) this.raise(e, \"Unexpected keyword '\".concat(t, \"'\"));else (this.state.strict ? i ? M : B : L)(t, this.inModule) && (this.scope.inAsync || \"await\" !== t ? this.raise(e, \"Unexpected reserved word '\".concat(t, \"'\")) : this.raise(e, \"Can not use keyword 'await' outside an async function\"));\n          }\n        }\n      }, {\n        key: \"isAwaitAllowed\",\n        value: function () {\n          return this.scope.inFunction ? this.scope.inAsync : !!this.options.allowAwaitOutsideFunction || !!this.hasPlugin(\"topLevelAwait\") && this.inModule;\n        }\n      }, {\n        key: \"parseAwait\",\n        value: function () {\n          var t = this.startNode();\n          return this.next(), this.state.inParameters ? this.raise(t.start, \"await is not allowed in async function parameters\") : -1 === this.state.awaitPos && (this.state.awaitPos = t.start), this.eat(o.star) && this.raise(t.start, \"await* has been removed from the async functions proposal. Use Promise.all() instead.\"), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.hasPrecedingLineBreak() || this.match(o.plusMin) || this.match(o.parenL) || this.match(o.bracketL) || this.match(o.backQuote) || this.match(o.regexp) || this.match(o.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(o.modulo) ? this.ambiguousScriptDifferentAst = !0 : this.sawUnambiguousESM = !0), this.state.soloAwait || (t.argument = this.parseMaybeUnary()), this.finishNode(t, \"AwaitExpression\");\n        }\n      }, {\n        key: \"parseYield\",\n        value: function (t) {\n          var e = this.startNode();\n          return this.state.inParameters ? this.raise(e.start, \"yield is not allowed in generator parameters\") : -1 === this.state.yieldPos && (this.state.yieldPos = e.start), this.next(), this.match(o.semi) || !this.match(o.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak() ? (e.delegate = !1, e.argument = null) : (e.delegate = this.eat(o.star), e.argument = this.parseMaybeAssign(t)), this.finishNode(e, \"YieldExpression\");\n        }\n      }, {\n        key: \"checkPipelineAtInfixOperator\",\n        value: function (t, e) {\n          \"smart\" === this.getPluginOption(\"pipelineOperator\", \"proposal\") && \"SequenceExpression\" === t.type && this.raise(e, \"Pipeline head should not be a comma-separated sequence expression\");\n        }\n      }, {\n        key: \"parseSmartPipelineBody\",\n        value: function (t, e, s) {\n          var i = this.checkSmartPipelineBodyStyle(t);\n          return this.checkSmartPipelineBodyEarlyErrors(t, i, e), this.parseSmartPipelineBodyInStyle(t, i, e, s);\n        }\n      }, {\n        key: \"checkSmartPipelineBodyEarlyErrors\",\n        value: function (t, e, s) {\n          if (this.match(o.arrow)) throw this.raise(this.state.start, 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized');\n          \"PipelineTopicExpression\" === e && \"SequenceExpression\" === t.type && this.raise(s, \"Pipeline body may not be a comma-separated sequence expression\");\n        }\n      }, {\n        key: \"parseSmartPipelineBodyInStyle\",\n        value: function (t, e, s, i) {\n          var a = this.startNodeAt(s, i);\n\n          switch (e) {\n            case \"PipelineBareFunction\":\n              a.callee = t;\n              break;\n\n            case \"PipelineBareConstructor\":\n              a.callee = t.callee;\n              break;\n\n            case \"PipelineBareAwaitedFunction\":\n              a.callee = t.argument;\n              break;\n\n            case \"PipelineTopicExpression\":\n              this.topicReferenceWasUsedInCurrentTopicContext() || this.raise(s, \"Pipeline is in topic style but does not use topic reference\"), a.expression = t;\n              break;\n\n            default:\n              throw new Error(\"Internal @babel/parser error: Unknown pipeline style (\".concat(e, \")\"));\n          }\n\n          return this.finishNode(a, e);\n        }\n      }, {\n        key: \"checkSmartPipelineBodyStyle\",\n        value: function (t) {\n          return t.type, this.isSimpleReference(t) ? \"PipelineBareFunction\" : \"PipelineTopicExpression\";\n        }\n      }, {\n        key: \"isSimpleReference\",\n        value: function (t) {\n          switch (t.type) {\n            case \"MemberExpression\":\n              return !t.computed && this.isSimpleReference(t.object);\n\n            case \"Identifier\":\n              return !0;\n\n            default:\n              return !1;\n          }\n        }\n      }, {\n        key: \"withTopicPermittingContext\",\n        value: function (t) {\n          var e = this.state.topicContext;\n          this.state.topicContext = {\n            maxNumOfResolvableTopics: 1,\n            maxTopicIndex: null\n          };\n\n          try {\n            return t();\n          } finally {\n            this.state.topicContext = e;\n          }\n        }\n      }, {\n        key: \"withTopicForbiddingContext\",\n        value: function (t) {\n          var e = this.state.topicContext;\n          this.state.topicContext = {\n            maxNumOfResolvableTopics: 0,\n            maxTopicIndex: null\n          };\n\n          try {\n            return t();\n          } finally {\n            this.state.topicContext = e;\n          }\n        }\n      }, {\n        key: \"withSoloAwaitPermittingContext\",\n        value: function (t) {\n          var e = this.state.soloAwait;\n          this.state.soloAwait = !0;\n\n          try {\n            return t();\n          } finally {\n            this.state.soloAwait = e;\n          }\n        }\n      }, {\n        key: \"registerTopicReference\",\n        value: function () {\n          this.state.topicContext.maxTopicIndex = 0;\n        }\n      }, {\n        key: \"primaryTopicReferenceIsAllowedInCurrentTopicContext\",\n        value: function () {\n          return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n        }\n      }, {\n        key: \"topicReferenceWasUsedInCurrentTopicContext\",\n        value: function () {\n          return null != this.state.topicContext.maxTopicIndex && this.state.topicContext.maxTopicIndex >= 0;\n        }\n      }, {\n        key: \"parseFSharpPipelineBody\",\n        value: function (t, e) {\n          var s = this.state.start,\n              i = this.state.startLoc;\n          this.state.potentialArrowAt = this.state.start;\n          var a = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = !0;\n          var r = this.parseExprOp(this.parseMaybeUnary(), s, i, t, e);\n          return this.state.inFSharpPipelineDirectBody = a, r;\n        }\n      }]), e;\n    }(function (t) {\n      function e() {\n        return d(this, e), g(this, D(e).apply(this, arguments));\n      }\n\n      return y(e, t), m(e, [{\n        key: \"toAssignable\",\n        value: function (t, e, s) {\n          var i;\n          if (t) switch (t.type) {\n            case \"Identifier\":\n            case \"ObjectPattern\":\n            case \"ArrayPattern\":\n            case \"AssignmentPattern\":\n              break;\n\n            case \"ObjectExpression\":\n              t.type = \"ObjectPattern\";\n\n              for (var a = 0, r = t.properties.length, n = r - 1; a < r; a++) {\n                var o,\n                    h = t.properties[a],\n                    u = a === n;\n                this.toAssignableObjectExpressionProp(h, e, u), u && \"RestElement\" === h.type && (null === (o = t.extra) || void 0 === o ? void 0 : o.trailingComma) && this.raiseRestNotLast(t.extra.trailingComma);\n              }\n\n              break;\n\n            case \"ObjectProperty\":\n              this.toAssignable(t.value, e, s);\n              break;\n\n            case \"SpreadElement\":\n              this.checkToRestConversion(t), t.type = \"RestElement\";\n              var l = t.argument;\n              this.toAssignable(l, e, s);\n              break;\n\n            case \"ArrayExpression\":\n              t.type = \"ArrayPattern\", this.toAssignableList(t.elements, e, s, null === (i = t.extra) || void 0 === i ? void 0 : i.trailingComma);\n              break;\n\n            case \"AssignmentExpression\":\n              \"=\" !== t.operator && this.raise(t.left.end, \"Only '=' operator can be used for specifying default value.\"), t.type = \"AssignmentPattern\", delete t.operator, this.toAssignable(t.left, e, s);\n              break;\n\n            case \"ParenthesizedExpression\":\n              t.expression = this.toAssignable(t.expression, e, s);\n          }\n          return t;\n        }\n      }, {\n        key: \"toAssignableObjectExpressionProp\",\n        value: function (t, e, s) {\n          if (\"ObjectMethod\" === t.type) {\n            var i = \"get\" === t.kind || \"set\" === t.kind ? \"Object pattern can't contain getter or setter\" : \"Object pattern can't contain methods\";\n            this.raise(t.key.start, i);\n          } else \"SpreadElement\" !== t.type || s ? this.toAssignable(t, e, \"object destructuring pattern\") : this.raiseRestNotLast(t.start);\n        }\n      }, {\n        key: \"toAssignableList\",\n        value: function (t, e, s, i) {\n          var a = t.length;\n\n          if (a) {\n            var r = t[a - 1];\n            if (r && \"RestElement\" === r.type) --a;else if (r && \"SpreadElement\" === r.type) {\n              r.type = \"RestElement\";\n              var n = r.argument;\n              this.toAssignable(n, e, s), \"Identifier\" !== n.type && \"MemberExpression\" !== n.type && \"ArrayPattern\" !== n.type && \"ObjectPattern\" !== n.type && this.unexpected(n.start), i && this.raiseTrailingCommaAfterRest(i), --a;\n            }\n          }\n\n          for (var o = 0; o < a; o++) {\n            var h = t[o];\n            h && (this.toAssignable(h, e, s), \"RestElement\" === h.type && this.raiseRestNotLast(h.start));\n          }\n\n          return t;\n        }\n      }, {\n        key: \"toReferencedList\",\n        value: function (t, e) {\n          return t;\n        }\n      }, {\n        key: \"toReferencedListDeep\",\n        value: function (t, e) {\n          this.toReferencedList(t, e);\n\n          for (var s = 0; s < t.length; s++) {\n            var i = t[s];\n            i && \"ArrayExpression\" === i.type && this.toReferencedListDeep(i.elements);\n          }\n\n          return t;\n        }\n      }, {\n        key: \"parseSpread\",\n        value: function (t, e) {\n          var s = this.startNode();\n          return this.next(), s.argument = this.parseMaybeAssign(!1, t, void 0, e), this.finishNode(s, \"SpreadElement\");\n        }\n      }, {\n        key: \"parseRestBinding\",\n        value: function () {\n          var t = this.startNode();\n          return this.next(), t.argument = this.parseBindingAtom(), this.finishNode(t, \"RestElement\");\n        }\n      }, {\n        key: \"parseBindingAtom\",\n        value: function () {\n          switch (this.state.type) {\n            case o.bracketL:\n              var t = this.startNode();\n              return this.next(), t.elements = this.parseBindingList(o.bracketR, 93, !0), this.finishNode(t, \"ArrayPattern\");\n\n            case o.braceL:\n              return this.parseObj(!0);\n          }\n\n          return this.parseIdentifier();\n        }\n      }, {\n        key: \"parseBindingList\",\n        value: function (t, e, s, i) {\n          for (var a = [], r = !0; !this.eat(t);) if (r ? r = !1 : this.expect(o.comma), s && this.match(o.comma)) a.push(null);else {\n            if (this.eat(t)) break;\n\n            if (this.match(o.ellipsis)) {\n              a.push(this.parseAssignableListItemTypes(this.parseRestBinding())), this.checkCommaAfterRest(e), this.expect(t);\n              break;\n            }\n\n            var n = [];\n\n            for (this.match(o.at) && this.hasPlugin(\"decorators\") && this.raise(this.state.start, \"Stage 2 decorators cannot be used to decorate parameters\"); this.match(o.at);) n.push(this.parseDecorator());\n\n            a.push(this.parseAssignableListItem(i, n));\n          }\n\n          return a;\n        }\n      }, {\n        key: \"parseAssignableListItem\",\n        value: function (t, e) {\n          var s = this.parseMaybeDefault();\n          this.parseAssignableListItemTypes(s);\n          var i = this.parseMaybeDefault(s.start, s.loc.start, s);\n          return e.length && (s.decorators = e), i;\n        }\n      }, {\n        key: \"parseAssignableListItemTypes\",\n        value: function (t) {\n          return t;\n        }\n      }, {\n        key: \"parseMaybeDefault\",\n        value: function (t, e, s) {\n          if (e = e || this.state.startLoc, t = t || this.state.start, s = s || this.parseBindingAtom(), !this.eat(o.eq)) return s;\n          var i = this.startNodeAt(t, e);\n          return i.left = s, i.right = this.parseMaybeAssign(), this.finishNode(i, \"AssignmentPattern\");\n        }\n      }, {\n        key: \"checkLVal\",\n        value: function (t) {\n          var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 64,\n              s = arguments.length > 2 ? arguments[2] : void 0,\n              i = arguments.length > 3 ? arguments[3] : void 0,\n              a = arguments.length > 4 ? arguments[4] : void 0,\n              r = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];\n\n          switch (t.type) {\n            case \"Identifier\":\n              if (this.state.strict && (r ? M(t.name, this.inModule) : O(t.name)) && this.raise(t.start, \"\".concat(64 === e ? \"Assigning to\" : \"Binding\", \" '\").concat(t.name, \"' in strict mode\")), s) {\n                var n = \"_\".concat(t.name);\n                s[n] ? this.raise(t.start, \"Argument name clash\") : s[n] = !0;\n              }\n\n              a && \"let\" === t.name && this.raise(t.start, \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\"), 64 & e || this.scope.declareName(t.name, e, t.start);\n              break;\n\n            case \"MemberExpression\":\n              64 !== e && this.raise(t.start, \"Binding member expression\");\n              break;\n\n            case \"ObjectPattern\":\n              for (var o = 0, h = t.properties; o < h.length; o++) {\n                var u = h[o];\n                if (\"ObjectProperty\" === u.type) u = u.value;else if (\"ObjectMethod\" === u.type) continue;\n                this.checkLVal(u, e, s, \"object destructuring pattern\", a);\n              }\n\n              break;\n\n            case \"ArrayPattern\":\n              for (var l = 0, c = t.elements; l < c.length; l++) {\n                var p = c[l];\n                p && this.checkLVal(p, e, s, \"array destructuring pattern\", a);\n              }\n\n              break;\n\n            case \"AssignmentPattern\":\n              this.checkLVal(t.left, e, s, \"assignment pattern\");\n              break;\n\n            case \"RestElement\":\n              this.checkLVal(t.argument, e, s, \"rest element\");\n              break;\n\n            case \"ParenthesizedExpression\":\n              this.checkLVal(t.expression, e, s, \"parenthesized expression\");\n              break;\n\n            default:\n              var d = (64 === e ? \"Invalid\" : \"Binding invalid\") + \" left-hand side\" + (i ? \" in \" + i : \"expression\");\n              this.raise(t.start, d);\n          }\n        }\n      }, {\n        key: \"checkToRestConversion\",\n        value: function (t) {\n          \"Identifier\" !== t.argument.type && \"MemberExpression\" !== t.argument.type && this.raise(t.argument.start, \"Invalid rest operator's argument\");\n        }\n      }, {\n        key: \"checkCommaAfterRest\",\n        value: function (t) {\n          this.match(o.comma) && (this.lookaheadCharCode() === t ? this.raiseTrailingCommaAfterRest(this.state.start) : this.raiseRestNotLast(this.state.start));\n        }\n      }, {\n        key: \"raiseRestNotLast\",\n        value: function (t) {\n          throw this.raise(t, \"Rest element must be last element\");\n        }\n      }, {\n        key: \"raiseTrailingCommaAfterRest\",\n        value: function (t) {\n          this.raise(t, \"Unexpected trailing comma after rest element\");\n        }\n      }]), e;\n    }(function (t) {\n      function e() {\n        return d(this, e), g(this, D(e).apply(this, arguments));\n      }\n\n      return y(e, t), m(e, [{\n        key: \"startNode\",\n        value: function () {\n          return new wt(this, this.state.start, this.state.startLoc);\n        }\n      }, {\n        key: \"startNodeAt\",\n        value: function (t, e) {\n          return new wt(this, t, e);\n        }\n      }, {\n        key: \"startNodeAtNode\",\n        value: function (t) {\n          return this.startNodeAt(t.start, t.loc.start);\n        }\n      }, {\n        key: \"finishNode\",\n        value: function (t, e) {\n          return this.finishNodeAt(t, e, this.state.lastTokEnd, this.state.lastTokEndLoc);\n        }\n      }, {\n        key: \"finishNodeAt\",\n        value: function (t, e, s, i) {\n          return t.type = e, t.end = s, t.loc.end = i, this.options.ranges && (t.range[1] = s), this.processComment(t), t;\n        }\n      }, {\n        key: \"resetStartLocation\",\n        value: function (t, e, s) {\n          t.start = e, t.loc.start = s, this.options.ranges && (t.range[0] = e);\n        }\n      }, {\n        key: \"resetEndLocation\",\n        value: function (t) {\n          var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.state.lastTokEnd,\n              s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.state.lastTokEndLoc;\n          t.end = e, t.loc.end = s, this.options.ranges && (t.range[1] = e);\n        }\n      }, {\n        key: \"resetStartLocationFromNode\",\n        value: function (t, e) {\n          this.resetStartLocation(t, e.start, e.loc.start);\n        }\n      }]), e;\n    }(At)))));\n\n    function St(t, e) {\n      var s = Nt;\n      return t && t.plugins && (!function (t) {\n        if (ut(t, \"decorators\")) {\n          if (ut(t, \"decorators-legacy\")) throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n          var e = lt(t, \"decorators\", \"decoratorsBeforeExport\");\n          if (null == e) throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n          if (\"boolean\" != typeof e) throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n        }\n\n        if (ut(t, \"flow\") && ut(t, \"typescript\")) throw new Error(\"Cannot combine flow and typescript plugins.\");\n        if (ut(t, \"placeholders\") && ut(t, \"v8intrinsic\")) throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n        if (ut(t, \"pipelineOperator\") && -1 === ct.indexOf(lt(t, \"pipelineOperator\", \"proposal\"))) throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + ct.map(function (t) {\n          return \"'\".concat(t, \"'\");\n        }).join(\", \"));\n      }(t.plugins), s = function (t) {\n        var e = dt.filter(function (e) {\n          return ut(t, e);\n        }),\n            s = e.join(\"/\"),\n            i = It[s];\n\n        if (!i) {\n          i = Nt;\n\n          for (var a = 0; a < e.length; a++) {\n            var r = e[a];\n            i = pt[r](i);\n          }\n\n          It[s] = i;\n        }\n\n        return i;\n      }(t.plugins)), new s(t, e);\n    }\n\n    var It = {};\n    e.parse = function (t, e) {\n      if (!e || \"unambiguous\" !== e.sourceType) return St(e, t).parse();\n      e = Object.assign({}, e);\n\n      try {\n        e.sourceType = \"module\";\n        var s = St(e, t),\n            i = s.parse();\n        if (s.sawUnambiguousESM) return i;\n        if (s.ambiguousScriptDifferentAst) try {\n          return e.sourceType = \"script\", St(e, t).parse();\n        } catch (t) {} else i.program.sourceType = \"script\";\n        return i;\n      } catch (s) {\n        try {\n          return e.sourceType = \"script\", St(e, t).parse();\n        } catch (t) {}\n\n        throw s;\n      }\n    }, e.parseExpression = function (t, e) {\n      var s = St(e, t);\n      return s.options.strictMode && (s.state.strict = !0), s.getExpression();\n    }, e.tokTypes = o;\n  });\n\n  s(ot);\n  ot.parse, ot.parseExpression, ot.tokTypes;\n  var ht = u;\n\n  function ut(t, e) {\n    return Object.assign({\n      sourceType: \"module\",\n      allowAwaitOutsideFunction: !0,\n      allowImportExportEverywhere: !0,\n      allowReturnOutsideFunction: !0,\n      allowSuperOutsideMethod: !0,\n      allowUndeclaredExports: !0,\n      errorRecovery: !0,\n      plugins: [\"jsx\", \"doExpressions\", \"objectRestSpread\", \"classProperties\", \"exportDefaultFrom\", \"exportNamespaceFrom\", \"asyncGenerators\", \"functionBind\", \"functionSent\", \"dynamicImport\", \"numericSeparator\", \"importMeta\", \"optionalCatchBinding\", \"optionalChaining\", \"classPrivateProperties\", [\"pipelineOperator\", {\n        proposal: \"minimal\"\n      }], \"nullishCoalescingOperator\", \"bigInt\", \"throwExpressions\", \"logicalAssignment\", \"classPrivateMethods\", \"v8intrinsic\", \"partialApplication\"].concat(e)\n    }, t);\n  }\n\n  function lt(t, s) {\n    return function (i, a, r) {\n      var n,\n          o = ot,\n          h = [ut({\n        strictMode: !0\n      }, [\"decorators-legacy\"].concat(s)), ut({\n        strictMode: !1\n      }, [\"decorators-legacy\"].concat(s)), ut({\n        strictMode: !0\n      }, [[\"decorators\", {\n        decoratorsBeforeExport: !1\n      }]].concat(s)), ut({\n        strictMode: !1\n      }, [[\"decorators\", {\n        decoratorsBeforeExport: !1\n      }]].concat(s))];\n\n      try {\n        n = function (t, e) {\n          for (var s, i = 0; i < e.length; i++) try {\n            return t(e[i]);\n          } catch (t) {\n            s || (s = t);\n          }\n\n          throw s;\n        }(o[t].bind(null, i), h);\n      } catch (t) {\n        throw e(t.message.replace(/ \\(.*\\)/, \"\"), {\n          start: {\n            line: t.loc.line,\n            column: t.loc.column + 1\n          }\n        });\n      }\n\n      return delete n.tokens, nt(n, Object.assign({}, r, {\n        originalText: i\n      }));\n    };\n  }\n\n  var ct = lt(\"parse\", [\"flow\"]),\n      pt = lt(\"parse\", [[\"flow\", {\n    all: !0,\n    enums: !0\n  }]]),\n      dt = lt(\"parseExpression\");\n\n  function ft(t, s) {\n    switch (t.type) {\n      case \"ArrayExpression\":\n        return t.elements.forEach(i);\n\n      case \"ObjectExpression\":\n        return t.properties.forEach(i);\n\n      case \"ObjectProperty\":\n        if (t.computed) throw a(\"computed\");\n        if (t.shorthand) throw a(\"shorthand\");\n        return [t.key, t.value].forEach(i);\n\n      case \"UnaryExpression\":\n        switch (t.operator) {\n          case \"+\":\n          case \"-\":\n            return i(t.argument);\n\n          default:\n            throw a(\"operator\");\n        }\n\n      case \"Identifier\":\n        if (s && \"ObjectProperty\" === s.type && s.key === t) return;\n        throw a();\n\n      case \"NullLiteral\":\n      case \"BooleanLiteral\":\n      case \"NumericLiteral\":\n      case \"StringLiteral\":\n        return;\n\n      default:\n        throw a();\n    }\n\n    function i(e) {\n      return ft(e, t);\n    }\n\n    function a(s) {\n      var i = s ? \"\".concat(t.type, \" with \").concat(s, \"=\").concat(JSON.stringify(t[s])) : t.type;\n      return e(\"\".concat(i, \" is not allowed in JSON.\"), {\n        start: {\n          line: t.loc.start.line,\n          column: t.loc.start.column + 1\n        }\n      });\n    }\n  }\n\n  var mt = Object.assign({\n    parse: ct,\n    astFormat: \"estree\",\n    hasPragma: ht\n  }, c),\n      yt = Object.assign({}, mt, {\n    parse: pt\n  }),\n      Dt = Object.assign({}, mt, {\n    parse: dt\n  }),\n      vt = {\n    parsers: {\n      babel: mt,\n      \"babel-flow\": yt,\n      babylon: mt,\n      json: Object.assign({}, Dt, {\n        hasPragma: function () {\n          return !0;\n        }\n      }),\n      json5: Dt,\n      \"json-stringify\": Object.assign({\n        parse: function (t, e, s) {\n          var i = dt(t, e, s);\n          return i.comments.forEach(ft), ft(i), i;\n        },\n        astFormat: \"estree-json\"\n      }, c),\n      __js_expression: Dt,\n      __vue_expression: Dt,\n      __vue_event_binding: mt\n    }\n  },\n      xt = vt.parsers;\n  t.default = vt, t.parsers = xt, Object.defineProperty(t, \"__esModule\", {\n    value: !0\n  });\n});","map":null,"metadata":{},"sourceType":"script"}